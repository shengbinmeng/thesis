%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Fig.11.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: memorize
%%CreationDate: 2015/4/2, 14:06:58
%%BoundingBox: 0 0 540 232
%%HiResBoundingBox: 0 0 539.2500 231.7500
%%CropBox: 0 0 539.2500 231.7500
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1245 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/"
   pdf:Producer="Microsoft® Office Visio® 2007"
   pdf:Keywords=""
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Office Visio® 2007"
   xmp:CreateDate="2015-04-02T14:06:35+08:00"
   xmp:ModifyDate="2015-04-02T14:06:35+08:00"
   xmpMM:DocumentID="uuid:8F945896-B192-4300-AD6B-1DAADDF22D6A"
   xmpMM:InstanceID="uuid:8F945896-B192-4300-AD6B-1DAADDF22D6A"
   pdfaid:part="1"
   pdfaid:conformance="B">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>段一舟</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 1 
/Lookup <~
=]nnB^V9~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 1 
/Lookup <~
o()?mF)q~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -231.75 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 231.75 li
539.25 231.75 li
539.25 0 li
cp
clp
[1 0 0 1 0 0 ]ct
41.591 17.33 mo
69.937 17.33 li
69.937 3.157 li
41.591 3.157 li
cp
false sop
/1 
[/DeviceRGB] /CSA add_res
.969836 .970302 .970644 rgb
ef
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
41.591 17.33 mo
69.937 17.33 li
69.937 3.157 li
41.591 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ARIAL
Type42DictBegin
[<00010000000c000c000c000c4f532f32103263b7000000cc000000606376
7420a11cd7eb0000012c000006546670676dcc79599a000007800000066e
676c7966e8a84b3d000062b800002c4a68656164e43a05f100000df00000
00366868656112330d3400000e2800000024686d7478b4790c2800000e4c
0000238c6c6f636131e93b2a000031d800001ab86d61787012710c200000
4c90000000206e616d65564def3a00004cb000000a487072657025d64dbf
000056f800000bbe67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400021
064005d3fe510133073e01b2400001ffffff0000042605bb000000200004
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
4043555441403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
0000000533330e80923f5f0f3cf5081b080000000000a2e3272a00000000
cf756123faaffd671000080c00000009000100000000000000010000073e
fe4e00431000faaffa7a100000010000000000000000000000000000046b
06000100000000000239000000000000023900b002d7005e000000000000
000000000000000000000000000000000000000000000000000004ac0072
0000000002aa0041000000000000000004730055047300df0473003c0473
00560473001a047300550473004d04730061047300530473005500000000
0000000000000000000000000000000000000000000000000556fffd0556
009605c7006605c7009e00000000000000000639006d0000000000000000
00000000000000000473009606aa009805c7009c063900630556009e0000
000005c700a10000000004e3003000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000004730046000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000047300870473004802aa008500000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000001a8ffba000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
051bffba0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000100ffba0800ffba1000ffba00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000015001500150015006b00bf00bf00bf00bf
00bf00bf00bf00bf00bf00f300f301160116011601f40262037704640514
05f106dc0732087c099609960996099609960996099609960a6b0b370bd4
0c780c780c780d400d400d400d400d400d850f1a0fef1089110c110c1242
124212991299129912991299129912991299129912991299129912991299
129912991373137313731373137313731373137313731373137313731455
152015a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315a315a315a315a315a315a315a3
15a315a315a315a315a315a315a315a315bd15bd15bd15bd15bd15bd15bd
15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd
15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd15bd
15bd15bd15bd15bd15bd15bd15d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715d715d715d715d715d715d715d7
15d715d715d715d715d715d715d715d715f1160b16251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
162516251625162516251625162516251625162516251625162516251625
16251625162516251625000100000d5b003100030000000000020010002f
0056000004ac0bbe000000000000003a02be0000000300000000006a0000
0000000300000001000a006a0000000300000002000e00ea000000030000
0003005e00cc0000000300000004000a006a00000003000000050018012a
0000000300000006000e014200000003000000070062006a000000030000
00080030000e0000000300000009008a0150000000030000000d02aa01da
0001000000000000003504840001000000000001000504b9000100000000
0002000704f90001000000000003002f04ea0001000000000004000504b9
0001000000000005000c0519000100000000000600070525000100000000
0007003104b900010000000000080018048b00010000000000090045052c
000100000000000d015505710003000104030002000c06c6000300010405
0002001006d60003000104060002000c06e60003000104070002001006f2
0003000104080002001007020003000104090000006a0000000300010409
0001000a006a0003000104090002000e00ea0003000104090003005e00cc
0003000104090004000a006a00030001040900050018012a000300010409
0006000e014200030001040900070062006a00030001040900080030000e
0003000104090009008a0150000300010409000d02aa01da00030001040a
0002000c06c600030001040b00020010071200030001040c0002000c06c6
00030001040e0002000c07220003000104100002000e0732000300010413
0002001207400003000104140002000c06c60003000104150002001006c6
0003000104160002000c06c60003000104190002000e075200030001041b
00020010072200030001041d0002000c06c600030001041f0002000c06c6
0003000104240002000e076000030001042a0002000e076e00030001042d
0002000e077c00030001080a0002000c06c60003000108160002000c06c6
000300010c0a0002000c06c6000300010c0c0002000c06c600a900200032
00300031003400200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e0041007200690061006c00200069007300200061
002000740072006100640065006d00610072006b0020006f006600200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e002e004d006f006e006f00740079
00700065003a0041007200690061006c00200052006500670075006c0061
0072003a00560065007200730069006f006e00200035002e003100360020
0028004d006900630072006f0073006f0066007400290056006500720073
0069006f006e00200035002e003200300041007200690061006c004d0054
004d006f006e006f00740079007000650020005400790070006500200044
0072006100770069006e00670020004f006600660069006300650020002d
00200052006f00620069006e0020004e006900630068006f006c00610073
002c0020005000610074007200690063006900610020005300610075006e
0064006500720073002000310039003800320059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
00200074006f00200064006900730070006c0061007900200061006e0064
0020007000720069006e007400200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
00200074006800650020006c006900630065006e00730065002000740065
0072006d007300200066006f00720020007400680065002000700072006f
006400750063007400200069006e00200077006800690063006800200074
00680069007300200066006f006e007400200069007300200069006e0063
006c0075006400650064002e00200059006f00750020006d006100790020
006f006e006c0079002000280069002900200065006d0062006500640020
007400680069007300200066006f006e007400200069006e00200063006f
006e00740065006e00740020006100730020007000650072006d00690074
007400650064002000620079002000740068006500200065006d00620065
006400640069006e00670020007200650073007400720069006300740069
006f006e007300200069006e0063006c007500640065006400200069006e
0020007400680069007300200066006f006e0074003b00200061006e0064
00200028006900690029002000740065006d0070006f0072006100720069
006c007900200064006f0077006e006c006f006100640020007400680069
007300200066006f006e007400200074006f002000610020007000720069
006e0074006500720020006f00720020006f00740068006500720020006f
00750074007000750074002000640065007600690063006500200074006f
002000680065006c00700020007000720069006e007400200063006f006e
00740065006e0074002ea9203230313420546865204d6f6e6f7479706520
436f72706f726174696f6e2e20416c6c2052696768747320526573657276
65642e417269616c20697320612074726164656d61726b206f6620546865
204d6f6e6f7479706520436f72706f726174696f6e2e4d6f6e6f74797065
3a417269616c20526567756c61723a56657273696f6e20352e313620284d
6963726f736f66742956657273696f6e20352e3230417269616c4d544d6f
6e6f7479706520547970652044726177696e67204f6666696365202d2052
6f62696e204e6963686f6c61732c205061747269636961205361756e6465
72732031393832596f75206d617920757365207468697320666f6e742074
6f20646973706c617920616e64207072696e7420636f6e74656e74206173
207065726d697474656420627920746865206c6963656e7365207465726d
7320666f72207468652070726f6475637420696e20776869636820746869
7320666f6e7420697320696e636c756465642e20596f75206d6179206f6e
6c792028692920656d626564207468697320666f6e7420696e20636f6e74
656e74206173207065726d69747465642062792074686520656d62656464
696e67207265737472696374696f6e7320696e636c7564656420696e2074
68697320666f6e743b20616e6420286969292074656d706f726172696c79
20646f776e6c6f6164207468697320666f6e7420746f2061207072696e74
6572206f72206f74686572206f75747075742064657669636520746f2068
656c70207072696e7420636f6e74656e742e004e006f0072006d0061006c
006e0079006f00620079010d0065006a006e00e9006e006f0072006d0061
006c005300740061006e0064006100720064039a03b103bd03bf03bd03b9
03ba03ac004e006f0072006d00610061006c0069004e006f0072006d00e1
006c006e0065004e006f0072006d0061006c0065005300740061006e0064
0061006100720064041e0431044b0447043d044b0439004e006100760061
0064006e006f0074006801b001a10300006e00670041007200720075006e
00740061b900540328b326181fd0bc032900e0032900020329b22b1d1fb9
0327031db23b1f40b80323b31215320f412d03200001002f032000010020
0320006f032000af032000bf03200004005f031e00010010031e007f031e
0080031e00af031e00bf031e00d0031e00060000031e0010031e0020031e
006f031e009f031e00e0031e0006031d031cb2201f1041270319007f0319
0002000f031700ef031700ff03170003001f0317002f0317004f0317005f
0317008f0317009f03170006000f0317005f0317006f0317007f031700bf
031700f00317000600400317b2923340b80317b28b3340b80317b36a6c32
40b80317b2613340b80317b35c5d3240b80317b357593240b80317b34d51
3240b80317b344493240b80317b23a3340b80317b331343240b80317b32e
423240b80317b3272c3240b80317b312253280b80317b30a0d32c0411603
1600d00316000200700316000102c4000f0101001f00a0031500b0031500
020306000f0101001f00400312b32426329fbf0304000103020301006400
1fffc00301b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002
edb30e11329f414a02e200af02e200bf02e2000302e202e202e102e1007f
02e00001001002e0003f02e0009f02e000bf02e000cf02e000ef02e00006
02e002e002df02df02de02de000f02dd002f02dd003f02dd005f02dd009f
02dd00bf02dd00ef02dd000702dd02dd001002dc0001000002dc00010010
02dc003f02dc000202dc02dc001002db000102db02db000f02da000102da
02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ff
c002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b
1f40bb0322003e00330322b225311fb80318b23c691fb802e3b3202b1fa0
413002d400b002d40002000002d4001002d4002002d4005002d4006002d4
007002d40006006002d6007002d6008002d6009002d600a002d600b002d6
0006000002d6001002d6002002ca002002cc002002d6003002d6004002d6
005002d6000802d0b2202b1fb802cfb226421f411602ce02c70017001f02
cd02c80017001f02cc02c60017001f02cb02c50017001f02c902c5001e00
1f02ca02c6b21e1f00410b02c6000002c7001002c6001002c7002f02c500
0502c1b324121fff411102bf0001001f02bf002f02bf003f02bf004f02bf
005f02bf008f02bf000602bf0222b2641f12410b02bb00ca0800001f02b2
00e90800001f02a600a20800406a1f4026434932402043493240263a3d32
40203a3d329f209f26024026969932402096993240268e923240208e9232
4026848c324020848c3240267a813240207a813240266c763240206c7632
4026646a324020646a3240265a5f3240205a5f3240264f543240204f5432
b8029eb724271f374f6b0120410f02770030027700400277005002770004
02770277027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180
bc0180520180a201806501807e01808101803c01805e01802b01801c0180
1e0180400180bb0138000100800140b40180400180bb0138000100800139
40180180ca0180ad018073018026018025018024018020013740b80221b2
493340b80221b2453340b80221b341423240b80221b33d3e320f410f0221
003f0221007f0221000300bf022100cf022100ff0221000300400221b320
223240b80221b3191e3240b80222b32a3f3240b80221b32e3a326f414802
c3007f02c3008f02c300df02c30004002f02c3006002c300cf02c3000300
0f02c3003f02c3005f02c300c002c300ef02c300ff02c3000600df022200
01008f02220001000f0222002f0222003f0222005f0222007f022200ef02
22000600bf022100ef02210002006f0221007f022100af02210003002f02
21003f0221004f0221000302c302c30222022202210221401d101c102b10
48038f1c010f1e014f1eff1e023700161600000012110811b8010db6f70d
f8f70d00094109028e028f001d001f0290028f001d001f028fb2f91d1fb8
0198b226bb1f41150197001e0401001f013900260125001f013800730401
001f0135001c0801001f0134001c02ab001f0132b21c561fb8010fb2262c
1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401
b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b8
0201b61fb91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d
1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f48
1c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401
b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b2
1f5537b80168402c07960758074f07360732072c0721071f071d071b0714
08120810080e080c080a080808060804080208000814b8ffe0402b000001
001406100000010006040000010004100000010010020000010002000000
01000002010802004a00b013034b024b5342014bb0c063004b6220b0f653
23b8010a515ab005234201b0124b004b5442b0382b4bb807ff52b0372b4b
b007505b58b101018e59b0382bb00288b801005458b801ffb101018e851b
b0124358b900010111858d1bb900010128858d5959001816763f183f123e
113946443e113946443e113946443e113946443e11394660443e11394660
442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b
5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b901f201f04544b9
01f101f045445958b9033e01f2455258b901f2033e4459594bb801565320
5c58b9002001f14544b9002601f145445958b9081e0020455258b9002008
1e4459594bb8019a53205c58b9002501f24544b9002401f245445958b909
090025455258b9002509094459594bb8040153205c58b173244544b12424
45445958b917200073455258b9007317204459594bb8040153205c58b1ca
254544b1252545445958b9168000ca455258b900ca16804459594bb03e53
205c58b11c1c4544b11e1c45445958b9011a001c455258b9001c011a4459
594bb05653205c58b11c1c4544b12f1c45445958b90189001c455258b900
1c01894459594bb8030153205c58b11c1c4544b11c1c45445958b90de000
1c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b
59635c456523456023456560234560b08b766818b080622020b163594565
234520b003266062636820b003266165b059236544b063234420b13b5c45
65234520b003266062636820b003266165b05c236544b03b2344b1005c45
5458b15c406544b23b403b4523614459b347503437456523456023456560
234560b089766818b080622020b134504565234520b003266062636820b0
03266165b050236544b034234420b147374565234520b003266062636820
b003266165b037236544b0472344b10037455458b137406544b247404745
23614459004b5342014b5058b108004259435c58b108004259b3020b0a12
4358601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59
b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e23
42b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b011
2342002b7475737500184569444569444569447373737374757374752b2b
2b2b74752b2b2b2b2b737373737373737373737373737373737373737373
737373732b2b2b45b0406144737400004bb02a534bb03f515a58b1070745
b040604459004bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e
534bb03a515a58b1030345b040604459004bb02e534bb03c515a58b10909
45b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b
2b2b2b435c58b9008002bbb301401e017400735903b01e4b5402b0124b54
5ab012435c5a58ba009f02220001007359002b7473012b01732b2b2b2b2b
2b2b2b737373732b2b2b2b2b002b2b2b2b2b2b0045694473456944734569
44737475456944734569444569444569447374456944456944732b2b2b2b
2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b7374
757374752b2b2b742b2b000000>
[11339 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 556 19 <00020055ffe7041105c00010001d0155b10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301bb4062019101c
b8fff0b202200bbeffe00016ffe00012ffe0000fffe0406204068702880b
880fc90e0509070b180245134c154a19431b54135c155c19521b6b076b0b
63136c156b19601b79027706760b7a0f870698079610c918da02d606d60b
db0f1a1a1e0405141e0d0d17730940212334300901000910090209901f11
7300b8ffc0400e212334200040000200901ec78b182b10f65d2bed10f65d
712bed003fed3fed3130015d71005d003838383838013838385959131012
363332161612151002062322272613101633323611102623220706556bd3
a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d30104013dac5fb3
feffdafefefec3ad98b7019dfe97eff00168016aee698600>PBAAAA+ARIAL AddT42Char 
1 9958 83 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>PBAAAA+ARIAL AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/zero 19 def
/p 83 def
end
PBAAAA+ARIAL /Encoding get
dup 48 /zero put
dup 112 /p put
pop
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL /PBAAAA+ARIAL findfont ct_VMDictPut
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero 63{/.notdef}rp /p 143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
50.203 13.25 mo
(p)sh
55.764 13.25 mo
(0)sh
69.938 17.33 mo
98.284 17.33 li
98.284 3.157 li
69.938 3.157 li
cp
.969836 .970302 .970644 rgb
ef
69.938 17.33 mo
98.284 17.33 li
98.284 3.157 li
69.938 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 1000 20 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/one 20 def
end
PBAAAA+ARIAL /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one 62{/.notdef}rp /p 143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
78.549 13.25 mo
(p)sh
84.111 13.25 mo
(1)sh
98.284 17.33 mo
126.63 17.33 li
126.63 3.157 li
98.284 3.157 li
cp
.969836 .970302 .970644 rgb
ef
98.284 17.33 mo
126.63 17.33 li
126.63 3.157 li
98.284 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 1220 21 <0001003c0000040705c0001e01c7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40363b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021b101c101d101e1006befff00007ffe000
08fff00009fff0401a1e0a10080606ca1c1a141c1c1a081c1a030102081a
1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb400f0102
0c0a7317d30000014021233401bb0281002000100138400c11b53f025f02
6f027f020402ba0224001f018fb18b182b10f65df4ed10f62b3c10f4ed00
3f3cfd3c3fedfd5de4111217390111121739870e2e2b0e7d10c401111239
313000383838380138383838005d015d7259592515212637363637363635
34262322060727363633321615140606070606070407fc37021725a39aef
a8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b93
9c8a13cfd9eaad58aabca4886131>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/two 21 def
end
PBAAAA+ARIAL /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two 61{/.notdef}rp /p 143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
106.9 13.25 mo
(p)sh
112.46 13.25 mo
(2)sh
126.63 17.33 mo
154.976 17.33 li
154.976 3.157 li
126.63 3.157 li
cp
.969836 .970302 .970644 rgb
ef
126.63 17.33 mo
154.976 17.33 li
154.976 3.157 li
126.63 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 1774 22 <00010056ffe6041605c0002b0159b10202435458400b1918400d0d025518
1c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e1c041e29
1c05290d230d0c181901001220100c0c0255200726b8ffe8b40c0d025526
2f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610c6123910
c42b3210c42b3231301b4028050d160d450d860d0445115711761b035216
6c106a146416750d7914860d8a14891ba50d0a052003b8ffe0400b0b0c0d
0e040701230d0c01b802a4b340000100bb01180029000d0135b40c0c1504
18ba02a4001902684027151e1c05041e290d12735f206f200220180d0d06
55208007732640212334302601002610260226b8fff4b70d0d065526902d
18b80138b219d301ba01380000ffc0400b212334200040000200902cb801
92b18b182b10f65d2bedf4ed10f62b5d712bedf42b5ded003fed3fedfde4
1112392fed10fd5de411123901111217393130013838015d005d01715913
371616333236353426232207371633323635342623220607273636333216
1615140607161615140023222656b41f956b7fafa27d334c14120b73b886
6a698c14b421eaae78ca6b66648290fee8d6c1ff0183189987b0827ca114
9e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5e6>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/three 22 def
end
PBAAAA+ARIAL /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three 60{/.notdef}rp /p 143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
135.24 13.25 mo
(p)sh
140.8 13.25 mo
(3)sh
154.98 17.33 mo
183.326 17.33 li
183.326 3.157 li
154.98 3.157 li
cp
.969836 .970302 .970644 rgb
ef
154.98 17.33 mo
183.326 17.33 li
183.326 3.157 li
154.98 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 2248 23 <0002001a0000041005ba000a000d0126403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6b40d0d
02550ab8ffeeb40d0d06550ab80137400d07402223340780213507900f02
b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ffe4b60d
0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b2b3c10
e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c40f0f0f
313001435c58b9000dffdeb212390db8ffd4400b333903222d3903041d1d
3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c221c39
0c402d392b2b2b2b2b5921112135013311331523110311010296fd84029d
93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/four 23 def
end
PBAAAA+ARIAL /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four 59{/.notdef}rp /p 
143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
163.59 13.25 mo
(p)sh
169.15 13.25 mo
(4)sh
183.32 17.33 mo
211.666 17.33 li
211.666 3.157 li
183.32 3.157 li
cp
.969836 .970302 .970644 rgb
ef
183.32 17.33 mo
211.666 17.33 li
211.666 3.157 li
183.32 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 2600 24 <00010055ffe7042105a6001e0156b10202435458b90001ffc0400d0d0d02
55011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab4
0f0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffd
c410c42b31301b4029120c0d0d06550f0c0d0d06554b1a791d8a1d9613a7
13c30cd60cdb1b080913180e2a1a03093005300bbaffe00003ffe0401013
0a15121313ca0e0f140e13140e0f0db802a440130e0a1e15400ea00e020e
0e0f40150115151c12b802bbb70f0401d340000100b801184020041e1c0d
115f106f107f108f1004108007731840212334301801001810180218b8ff
f4b70d0d065518902012bc0135000f0195000d0138b20eb501ba01380000
ffc0400b212334200040000200901fb80192b18b182b10f65d2bedf4edf4
ed10f62b5d712bedf45d3c003fedfd5de43fed12392f5d11392f5d10ed10
e487082e2b057d10c4001112393130013838383801715d2b2b5913371616
33323635342623220607271321152103363332001514070623222655bd15
996c82b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a
8bc4a29ab24f3f1602f1acfe765cfef6d1c791b2e000>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/five 24 def
end
PBAAAA+ARIAL /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five 58{/.notdef}rp 
/p 143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
191.94 13.25 mo
(p)sh
197.5 13.25 mo
(5)sh
211.67 17.33 mo
240.016 17.33 li
240.016 3.157 li
211.67 3.157 li
cp
.969836 .970302 .970644 rgb
ef
211.67 17.33 mo
240.016 17.33 li
240.016 3.157 li
211.67 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 3042 25 <0002004dffe7041505c0001d002a014fb10202435458401f0f011f015f01
03011b281e400d010d0d14051e1b05221e140d0a1e01002510b8fff44019
0d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f2b2b2bcd
2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b19014407
4015441944205a1254206b03640764086a1264207408751c8508861cd608
d4161107200d0d065527b8ffe0b40d0d065523b8ffe0400b0d0d06552120
0d0d065507b8ffe0b42720232021b8ffe04011281e400d500d020d0d141b
01d35f000100b802684009051e1b05221e140d01b80138401200b5257310
40212334301001001010100210b8fff0b70c0c065510902c0aba0138001e
013940163f175f176f177f170417160c0c065517160d0d065517b80224b3
2bc78b182b10f62b2b5deded10f62b5d712bedf4ed003fed3fedfd5de411
12392f5ded313001383838382b2b2b2b015d005d59010726272623220706
060736363332121514060623220011103736333216011416163332363534
2623220603fbb3182c496b564155620241bc67b4fd77d084e1fee49d89e8
adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed
7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/six 25 def
end
PBAAAA+ARIAL /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
57{/.notdef}rp /p 143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
220.28 13.25 mo
(p)sh
225.84 13.25 mo
(6)sh
240.02 17.33 mo
268.366 17.33 li
268.366 3.157 li
240.02 3.157 li
cp
.969836 .970302 .970644 rgb
ef
240.02 17.33 mo
268.366 17.33 li
268.366 3.157 li
240.02 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 3512 26 <000100610000041605a7000d0070400ec40d01040d010402080409030d00
b802bb4030020104090c0d73030302402123344f025f026f0203021a0f08
7309eb004f015f015f02033f015f016f017f010401190eb80192b18b182b
4e10f45d713c4df4ed4e10f6712b3c4d10ed003f3f3cfd3c391139011112
39313001715d13352115060003060723361212376103b58cfeed4b360fb9
0382f38904faad8c95fe12fefbb8dbad01ea01c79c00>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/seven 26 def
end
PBAAAA+ARIAL /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 56{/.notdef}rp /p 143{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
248.63 13.25 mo
(p)sh
254.19 13.25 mo
(7)sh
41.591 45.68 mo
69.937 45.68 li
69.937 31.507 li
41.591 31.507 li
cp
.901642 .903157 .904266 rgb
ef
41.591 45.68 mo
69.937 45.68 li
69.937 31.507 li
41.591 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 10410 84 <00020048fe6903e0043e0010001c0136408e0b022b022a183b024b02790c
063f153f194b19901ea01e053413341b3f1e4413441b5313531b6313631b
601e801ed406d512e606e90cea18102902220c2b153902350c4902460c5a
026902d90cdb18e316e919e61bfc020f01040d141a1c0b070e06141c040b
000e170e3300251010d00f01100f400f600f800f041e400b0c02551e400d
0d02550f12101002550fb8fff440110f0f02550f060e0e02550f160d0d02
550fb8fffe400b0c0c02550f16101006550fb8ffe8b40c0c06550fb8fff4
403f0d0d06550f741124bf07cf07df07ff07041f073f074f070307240b0b
0255071a0c0c025507220d0d025507160c0c0655071a0d0d065507191d1e
74213450182b2b4ef42b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d
713c10fdf43c003f3fed3f3fed113912393130005d015d71007101110606
23220011343636333217353311011416333236353426232206032c2a9755
bdfeef6fd37ec571a2fd21ac7873a6af7675a3fe6902083b4e012e0107a0
fe83a68efa4303adcdcdc3c7d4d6c700>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/q 84 def
end
PBAAAA+ARIAL /Encoding get
dup 113 /q put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 56{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
50.203 41.59 mo
(q)sh
55.764 41.59 mo
(0)sh
69.938 45.68 mo
98.284 45.68 li
98.284 31.507 li
69.938 31.507 li
cp
.901642 .903157 .904266 rgb
ef
69.938 45.68 mo
98.284 45.68 li
98.284 31.507 li
69.938 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
78.549 41.59 mo
(q)sh
84.111 41.59 mo
(1)sh
98.284 45.68 mo
126.63 45.68 li
126.63 31.507 li
98.284 31.507 li
cp
.901642 .903157 .904266 rgb
ef
98.284 45.68 mo
126.63 45.68 li
126.63 31.507 li
98.284 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
106.9 41.59 mo
(q)sh
112.46 41.59 mo
(2)sh
126.63 45.68 mo
154.976 45.68 li
154.976 31.507 li
126.63 31.507 li
cp
.901642 .903157 .904266 rgb
ef
126.63 45.68 mo
154.976 45.68 li
154.976 31.507 li
126.63 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
135.24 41.59 mo
(q)sh
140.8 41.59 mo
(3)sh
154.98 45.68 mo
183.326 45.68 li
183.326 31.507 li
154.98 31.507 li
cp
.901642 .903157 .904266 rgb
ef
154.98 45.68 mo
183.326 45.68 li
183.326 31.507 li
154.98 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
163.59 41.59 mo
(q)sh
169.15 41.59 mo
(4)sh
183.32 45.68 mo
211.666 45.68 li
211.666 31.507 li
183.32 31.507 li
cp
.901642 .903157 .904266 rgb
ef
183.32 45.68 mo
211.666 45.68 li
211.666 31.507 li
183.32 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
191.94 41.59 mo
(q)sh
197.5 41.59 mo
(5)sh
211.67 45.68 mo
240.016 45.68 li
240.016 31.507 li
211.67 31.507 li
cp
.901642 .903157 .904266 rgb
ef
211.67 45.68 mo
240.016 45.68 li
240.016 31.507 li
211.67 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
220.28 41.59 mo
(q)sh
225.84 41.59 mo
(6)sh
240.02 45.68 mo
268.366 45.68 li
268.366 31.507 li
240.02 31.507 li
cp
.901642 .903157 .904266 rgb
ef
240.02 45.68 mo
268.366 45.68 li
268.366 31.507 li
240.02 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
248.63 41.59 mo
(q)sh
254.19 41.59 mo
(7)sh
268.36 45.68 mo
296.706 45.68 li
296.706 31.507 li
268.36 31.507 li
cp
.901642 .903157 .904266 rgb
ef
268.36 45.68 mo
296.706 45.68 li
296.706 31.507 li
268.36 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 3684 27 <00030053ffe7041905c00017002300300200b10202435458b40c001b1e2e
b8ffc04017131302552e2e12211e0605281e120d1e090c0c0c025509b8ff
f4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b02550fb8ffe8
b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503b8fff440
190d0d02550324150c0b0b0255150c0c0c0255150c0d0d0255152f2b2b2b
cd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed393931301b
b10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0fb8ffe4b4
0f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8fffc4022
0d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12211e0605
281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b2bcd2f2b
2bcd31301b4037351601291649164926e60ce930050930017d007d017c04
7408710b720c750d7a178b008a018c048608810b840c860d8d17cc11c613
1222b8ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0401e2920
0c001e18000c1b1e2ea02e012e12211e0605281e120d1e73bf090109b802
6740102b730f40202334300f01000f100f020fb80191b6321873b0030103
b80267b2247315b8ffc0400e2123342015401502159031c78b182b10f65d
2bedf45ded10f45d712bedf45ded003fed3fed12395d2fed393901111239
393130013838383838383838015d72710071595901262635343633321615
140607161615140023220035343613141633323635342623220603141616
333236353426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef6916286
6b6885896667883a49905381a8ad827fa7031b29986aa0dadfa06697292c
c488bcff000101c08fc101546884835f638784fcff4d904fa68082aaa800
>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/eight 27 def
end
PBAAAA+ARIAL /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight 55{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
276.97 41.59 mo
(q)sh
282.54 41.59 mo
(8)sh
296.71 45.68 mo
325.056 45.68 li
325.056 31.507 li
296.71 31.507 li
cp
.901642 .903157 .904266 rgb
ef
296.71 45.68 mo
325.056 45.68 li
325.056 31.507 li
296.71 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 4344 28 <00020055ffe7041905c0001e002a01aeb10602435458b70b1f1801002511
18b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c06551811
0c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e030e0e1400
50010101b8ffc0400d1011065501041e1c0d221e1405003fed3fedc42b5d
3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc531301bb1
0202435458b70b1f180100251118b8ffeab40f0f025518b8ffea402a0d0d
025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e14005001
0101041e1c0d221e1405003fed3fedc45d3212392f5ded3201111239392f
2b2f2b2b10cdd4cd10ddc531301b40343a1a4c1640235b16572366036c16
6d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e16ad
16033a2964060227baffe00023ffe0401821200620281e4f0e5f0e020e0e
1c221e140501d350000100b80268b4041e1c0d1fba0139000b0138401118
40212334301801001810180218902c01b80138b400b5257311b8ffc0400e
212334201140110211902bc78b182b10f65d2bedf4ed10f65d712beded00
3fedfd5de43fed12392f5ded31300138383838005d71015d595913371616
33323e023534270606232202353400333216121110020623222601342623
220615141633323670ad167c61537d50360136bb6db6fc0107c68fed7b7a
f1a2acda02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108d8
df01109afee3fef2fee7feb3aebf03349bb6c49c8cafaf00>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/nine 28 def
end
PBAAAA+ARIAL /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 54{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
305.32 41.59 mo
(q)sh
310.88 41.59 mo
(9)sh
325.06 45.68 mo
353.406 45.68 li
353.406 31.507 li
325.06 31.507 li
cp
.901642 .903157 .904266 rgb
ef
325.06 45.68 mo
353.406 45.68 li
353.406 31.507 li
325.06 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
330.89 41.59 mo
(q)sh
336.45 41.59 mo
(1)sh
342.012 41.59 mo
(0)sh
353.4 45.68 mo
381.746 45.68 li
381.746 31.507 li
353.4 31.507 li
cp
.901642 .903157 .904266 rgb
ef
353.4 45.68 mo
381.746 45.68 li
381.746 31.507 li
353.4 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
359.23 41.59 mo
(q)sh
364.79 41.59 mo
(1)sh
370.352 41.59 mo
(1)sh
381.75 45.68 mo
410.096 45.68 li
410.096 31.507 li
381.75 31.507 li
cp
.901642 .903157 .904266 rgb
ef
381.75 45.68 mo
410.096 45.68 li
410.096 31.507 li
381.75 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
387.58 41.59 mo
(q)sh
393.14 41.59 mo
(1)sh
398.702 41.59 mo
(2)sh
410.1 45.68 mo
438.446 45.68 li
438.446 31.507 li
410.1 31.507 li
cp
.901642 .903157 .904266 rgb
ef
410.1 45.68 mo
438.446 45.68 li
438.446 31.507 li
410.1 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
415.93 41.59 mo
(q)sh
421.49 41.59 mo
(1)sh
427.052 41.59 mo
(3)sh
438.44 45.68 mo
466.786 45.68 li
466.786 31.507 li
438.44 31.507 li
cp
.901642 .903157 .904266 rgb
ef
438.44 45.68 mo
466.786 45.68 li
466.786 31.507 li
438.44 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
444.27 41.59 mo
(q)sh
449.83 41.59 mo
(1)sh
455.392 41.59 mo
(4)sh
268.36 17.33 mo
296.706 17.33 li
296.706 3.157 li
268.36 3.157 li
cp
.969836 .970302 .970644 rgb
ef
268.36 17.33 mo
296.706 17.33 li
296.706 3.157 li
268.36 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
276.97 13.25 mo
(p)sh
282.54 13.25 mo
(8)sh
296.71 17.33 mo
325.056 17.33 li
325.056 3.157 li
296.71 3.157 li
cp
.969836 .970302 .970644 rgb
ef
296.71 17.33 mo
325.056 17.33 li
325.056 3.157 li
296.71 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
305.32 13.25 mo
(p)sh
310.88 13.25 mo
(9)sh
325.06 17.33 mo
353.406 17.33 li
353.406 3.157 li
325.06 3.157 li
cp
.969836 .970302 .970644 rgb
ef
325.06 17.33 mo
353.406 17.33 li
353.406 3.157 li
325.06 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
330.89 13.25 mo
(p)sh
336.45 13.25 mo
(1)sh
342.012 13.25 mo
(0)sh
353.4 17.33 mo
381.746 17.33 li
381.746 3.157 li
353.4 3.157 li
cp
.969836 .970302 .970644 rgb
ef
353.4 17.33 mo
381.746 17.33 li
381.746 3.157 li
353.4 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
359.23 13.25 mo
(p)sh
364.79 13.25 mo
(1)sh
370.352 13.25 mo
(1)sh
381.75 17.33 mo
410.096 17.33 li
410.096 3.157 li
381.75 3.157 li
cp
.969836 .970302 .970644 rgb
ef
381.75 17.33 mo
410.096 17.33 li
410.096 3.157 li
381.75 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
387.58 13.25 mo
(p)sh
393.14 13.25 mo
(1)sh
398.702 13.25 mo
(2)sh
410.1 17.33 mo
438.446 17.33 li
438.446 3.157 li
410.1 3.157 li
cp
.969836 .970302 .970644 rgb
ef
410.1 17.33 mo
438.446 17.33 li
438.446 3.157 li
410.1 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
415.93 13.25 mo
(p)sh
421.49 13.25 mo
(1)sh
427.052 13.25 mo
(3)sh
438.44 17.33 mo
466.786 17.33 li
466.786 3.157 li
438.44 3.157 li
cp
.969836 .970302 .970644 rgb
ef
438.44 17.33 mo
466.786 17.33 li
466.786 3.157 li
438.44 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
444.27 13.25 mo
(p)sh
449.83 13.25 mo
(1)sh
455.392 13.25 mo
(4)sh
466.79 17.33 mo
495.136 17.33 li
495.136 3.157 li
466.79 3.157 li
cp
.969836 .970302 .970644 rgb
ef
466.79 17.33 mo
495.136 17.33 li
495.136 3.157 li
466.79 3.157 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
472.62 13.25 mo
(p)sh
478.18 13.25 mo
(1)sh
483.742 13.25 mo
(5)sh
69.938 88.2 mo
84.111 88.2 li
84.111 74.027 li
69.938 74.027 li
cp
gsave
grestore
/228637692.0 
<<
/ID /228637692.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO<j\7+ccV[EY5-5c67_pX)\aQ>q_R=Ag`?GX;';)
+i1Jh_aJDqAshai$$)0a5FG35L*:e!5gXWk-4GQb=;q!!0-i;.&S45RPfi*pRj>jb2E4HEEr#)#EC$;G
B_GSZTZ9d)e7JnQQ!*[j?WQ6AQNK^p/@o+<i1NN=Gs23J):Tc4&-57r@SiD;F[DoY8_'(Ned_t=#r&b@
p,l%s(8)MiZ1IKQ5:MoBCHr@<jl\i\,UVfuOm<BKq(O[KH`_D>'KFb!jjr8Eg>eO1lUQ\&`d2%Ri<*"+
egDJ'fB)TNI-,ssASfF7)B4$hB'>WMB5^]?!cpb9R&r%TE17A2e<dFM6epo+%\TJ.^5g+tZC[-#I$b"h
l\8`5c8i[V^sG%@`IJM(AcMi9PTnnjU4CDS^M.\-%0<1oHt9V'8A]740KU%D"n-f8a;>LfY8/i=A7#3n
huOAt#9[]c58d0ME_r71ldWn.&e#WB%gJP)m%rnO~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228637692.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.938 88.2 mo
84.111 88.2 li
84.111 74.027 li
69.938 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
84.111 88.2 mo
98.284 88.2 li
98.284 74.027 li
84.111 74.027 li
cp
1 1 1 rgb
ef
84.111 88.2 mo
98.284 88.2 li
98.284 74.027 li
84.111 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 8728 53 <000200a1000005ad05ba0018002201fc4021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17b8ffc040190b0b06551717
0021221e0201020018180f0f0e081e260e9c06b8ffe8b40f0f025506b8ff
f6b40d0d025506b8ffe040220c0c025506060d0d0655065d202470248024
03242218200120000100201010025500b8fff6b40f0f025500b8fff6b40d
0d025500b8fffa400b0c0c025500060b0b065500b8fff7b40c0c065500b8
fff8400a0d0d0655005d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd3c
105df62b2b2b2b19e418ed003f3c103c103c3f3cfd3c12392f2bfd3c103c
392f12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b
2b2b2b2b002b2b2b5d435c58400a08400f390f103a11123a2b2b2b590171
435c58b9000effde401a193911221939122219390e401c39102214391022
1f39102215392b2b2b2b2b2b2b5933112132161615140607161716171323
032e02272623231111213236363534262321a1028ac4cc7acad34d28554c
fff4c2556e572d214be101a185964e97a3fe3005ba4fc8799cd61d25244e
75fe710131848c380b07fd750333377947688600>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/R 53 def
end
PBAAAA+ARIAL /Encoding get
dup 82 /R put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 24{/.notdef}rp /R 29{/.notdef}rp /p /q 
142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
21.026 41.59 mo
(R)sh
28.248 41.59 mo
(1)sh
49.373 84.11 mo
(R)sh
56.594 84.11 mo
(2)sh
219.45 112.46 mo
(R)sh
226.67 112.46 mo
(3)sh
21.026 140.805 mo
(R)sh
28.248 140.805 mo
(4)sh
27.418 45.68 mo
27.418 59.18 li
55.764 59.18 li
55.764 65.12 li
@
59.004 64.31 mo
55.764 74.03 li
52.524 64.31 li
59.004 64.31 li
cp
ef
5.391 65.18 mo
54.84 65.18 li
54.84 53.18 li
5.391 53.18 li
cp
1 1 1 rgb
ef
.137531 .0973373 .0856268 rgb
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 5334 37 <00030096000004e905ba0011001d002a0113b90004fff440470b0b065504
044623562366237309840906691a75057009730b8305830b062716090318
272a1e161d090913121e2a2a2929001c1d1e0201021f1e1e110008182606
0c1010025506b8ffe640330f0f025506120d0d025506060c0c025506080b
0b0655060c0c0c065506140d0d0655065425260c1c101002550c0a0d0d02
550cb8fff440150b0b06550c1a2c1d1e200120000100201010025500b8ff
f6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8fffab40c
0c065500b8fff0400a0d0d0655005d2b3b5c182b10f62b2b2b2b2b2b5d3c
fd3c4e10f62b2b2b4dedf42b2b2b2b2b2b2bed003f3cfd3c3f3cfd3c1239
2f3c10fd3c392f1139111239011217393130015d005d2b33112132161615
140607161615140e0223012132373636353426262321112132373e023534
26262321960226a8cb736667858f5780c18cfe93013d81384a4b46829efe
db016d5e26435a3a54958cfead05ba59b9655ea63327bc8067b160310352
1116664d496f29fba0070c386b4652793100>PBAAAA+ARIAL AddT42Char 
1 5742 38 <00010066ffe7057605d3001d00d3b563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc0402d2839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f1726200801080c0b0b06
5508191e635c182b4e10f42b5d4ded4e10f65d4dedf4ed003fed3fed1117
393130012b2b5d5d71005d2b2b0172011706042322240235341224333204
17072626232206021514121633323604b4c23dfec3e5edfed79baf0143c2
dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155b1e0
cb2da092a2feef91bbfee98abc00>PBAAAA+ARIAL AddT42Char 
1 6384 42 <0001006dffe705b905d300250113401a1b141b15026027015e0813011203
2424002112170225001e0201b8ffc040200c0c0655010106171e0e03211e
06090101262725242003032002202760020302b8ffe4b40f0f025502b8ff
f2b40d0d025502b8ffdab40c0c025502b8fff4401b0c0c06550272802701
271d26200a010a100c0c06550a1926635b182b4e10f42b5d4ded4d105df6
2b2b2b2b5d3c4d10fd3c1112392f003fed3fed12392f2b3cfd3c11123911
123901111239123931304379404404231b1c1a1c191c03060c2610251526
1f26082504262325180d1d2100160f1321011112141320071d2100220525
21011c0b17210114111721011e092121002403212100002b2b2b2b012b2b
103c103c2b2b2b2b2b2b2b2b2b2a81015d005d0135251106042322240235
3412243332041617072e02232206060706151412043332363711034c026d
8ffed0a0d8fe9fb4b30150db9f01019226af2162b66f85c2772138870102
917ef03e023fac01fde07273b9015ed8d60173b467b8943070804d51844f
889fc4fef88061370111>PBAAAA+ARIAL AddT42Char 
1 6922 48 <000100980000060f05ba001002e4b10202435458b90008fff6400b0c0c02
55080e0d11025502b8ffeeb40d11025505b8ffee40280d1102550c120c0c
0255050f0c030900010208090b0e000809020a0b06101002550b100d0d02
550bb8fffab60c0c02550b1000b8ffe6b41010025500b8fff8b40f0f0255
00b8fffcb40d0d0255002f2b2b2bcd2f2b2b2bcd003f3fc0c010d0d0c011
1217392b2b3130012b2b2b001bb10602435458401f07200b0b065506200b
0b065503200b0b065504200b0b065505200b0b065508b8fff240230b0b06
55020c0b0b065503060c0c0655020e0c0c0655090c0c0c06550a0c0c0c06
5507b8fff8b40d0d065508b8fff8401f0d0d06552605010c200a12340f20
0a12340f050c0300010e0b00080801020ab8ffeeb40b0b06550ab8ffeeb4
0c0c06550abb0256001200100256400d000c0b0b065500060c0c065500b8
fff8b40d0d065500012f2b2b2bf42ff42b2b003f3c3f3c3c111217392b2b
5d3130012b2b2b2b2b2b2b2b002b2b2b2b2b1b407f00020f0814021b0804
760c860cc80c03090c490c490f032904250d2c0e58035b04760d780e870d
080b020508390d360e4f024b03440740084d0d420e0a9802990396079608
a803a7070612020f0e0e30050214050502080c0d0d300508140505080c52
0f5201400102020808090a0b0b0d0d0e0e1000080902601280120212ba02
a8000d0131b2052008b80131400a0c090a20400c7f0b010bba0256000e01
0bb2052002b8010b40090f0100200f70100110b80256b720056005800503
05b802a8b3113b59182b1910f45df45d3c18fd3c10ed1a1910edf45d3c1a
18fd3c10ed1a1910ede45d00183f3f3c3c103c103c103c103c103c103c1a
10eded87052e2b877dc4872e182b877dc43130004bb00b534bb01e515a58
bd000cfffb0008ffd60002ffd638383859014bb00c534bb028515a58b900
0dfff8b10e0a38385901435c58b9000dffd4b621390e2c21390db8ffd4b6
37390e3237390db8ffd4b52d390e2c2d392b2b2b2b2b2b5972715d00715d
015d59593311210116173637012111231101230111980124015b30161935
015f0105bbfe56affe5805bafbf29148509b03fcfa4604cbfb3504e0fb20
>PBAAAA+ARIAL AddT42Char 
1 8466 51 <0002009e000004fd05ba000d001800b2402c65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e02010200081226080a0d0d025508100b0b06
5508b8fff4401b0c0c0655081a201a01201a011a180d2001200001002010
10025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c02
55000c0b0b065500b8fffab40c0c065500b8fff0400a0d0d0655005d193b
5c182b10f62b2b2b2b2b2b2b5d3cfd3c4e10715df62b2b2b4ded003f3f3c
fd3c12392f3cfd3c3130015d005d33112132171e02151402212111112132
36353426272623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe
8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>PBAAAA+ARIAL AddT42Char 
1 9348 55 <00010030000004ba05ba00070089400d05021e04030200080706050409b8
0273b320040104b80101b7062001022f030103b80101b5010120000100b8
ffe8400b1010025500080f0f025500b8fff2b40c0c025500b8ffe2b40d0d
025500b8fffcb40c0c065500b8fffeb40d0d065500b80273b308b699182b
10f62b2b2b2b2b2b5d3c10f45d3c10fde45de6103c103c003f3f3cfd3c31
3021112135211521110213fe1d048afe1b050dadadfaf300>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/B 37 def
/C 38 def
/G 42 def
/M 48 def
/P 51 def
/T 55 def
end
PBAAAA+ARIAL /Encoding get
dup 66 /B put
dup 67 /C put
dup 71 /G put
dup 77 /M put
dup 80 /P put
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 8{/.notdef}rp /B /C 3{/.notdef}rp /G 
5{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R /.notdef /T 
27{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
5.391 62.18 mo
(P)sh
12.0611 62.18 mo
(C)sh
19.2827 62.18 mo
(M)sh
27.6131 62.18 mo
(P)sh
34.2832 62.18 mo
(G)sh
42.0613 62.18 mo
(T)sh
48.1697 62.18 mo
(B)sh
21.026 13.25 mo
(R)sh
28.248 13.25 mo
(0)sh
466.79 45.68 mo
495.136 45.68 li
495.136 31.507 li
466.79 31.507 li
cp
.901642 .903157 .904266 rgb
ef
466.79 45.68 mo
495.136 45.68 li
495.136 31.507 li
466.79 31.507 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
472.62 41.59 mo
(q)sh
478.18 41.59 mo
(1)sh
483.742 41.59 mo
(5)sh
509.31 10.25 mo
509.31 166.151 li
504.04 166.151 li
@
504.85 169.391 mo
495.13 166.151 li
504.85 162.911 li
504.85 169.391 li
cp
ef
485.69 101.29 mo
532.922 101.29 li
532.922 89.29 li
485.69 89.29 li
cp
1 1 1 rgb
ef
.137531 .0973373 .0856268 rgb
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 6784 47 <000100960000042a05ba0005006d400c010204031e05000820040104b802
a7400f070203200120000100201010025500b8fff6b40f0f025500b8fff6
b40d0d025500b8fffab40c0c025500b8fff6b40c0c065500b8fff8400a0d
0d0655005d063b5c182b10f62b2b2b2b2b2b5d3cfd3c10e65d003f3cfd3c
3f313033113311211596c202d205bafaf3ad>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/L 47 def
end
PBAAAA+ARIAL /Encoding get
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 8{/.notdef}rp /B /C 3{/.notdef}rp /G 
4{/.notdef}rp /L /M 2{/.notdef}rp /P /.notdef /R /.notdef 
/T 27{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
485.69 98.29 mo
(P)sh
492.36 98.29 mo
(C)sh
499.582 98.29 mo
(M)sh
507.912 98.29 mo
(P)sh
514.582 98.29 mo
(L)sh
520.144 98.29 mo
(T)sh
526.252 98.29 mo
(B)sh
98.284 88.2 mo
112.457 88.2 li
112.457 74.027 li
98.284 74.027 li
cp
gsave
grestore
/228637888.0 
<<
/ID /228637888.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9>S+O@VV@5QT451^Ps<EYBV\h]r1E#P%VSMISH3
81([2[-i3'Sk'#o\IB%'N',;I1(l%#7V$]PjA#g0W#@osLd@h/a>@U:**5Xqd\V&j>pNKCQ-tA.kiMm`
B7u#!8p`N0OXY>o;d;dSV9Pd`)?o"#3h0"91pI+t#;jEYYk*4u7X,OhQ836<fS4Y+!1<hN`PXQ,%E!oc
"FqV&bV'1'$K`?sK*O\')+k,)OjK8/gmj>C'-5.l!"N]*3aFojN-"3)H<i_48rQ2@&.BgORF48l=:0q7
!Vo-j=BL-irIP'#Lfj_&#@99CQd2i>K#k!JqZGXK499Ne*B_Y5"p)Duqr1^C:B5YAQ68^2rP,Q4N=3W8
aQj7g@MlU+(Fb.C?'\k(J.DW4nE)9PAUllhMLZ:H#t>!GB+I,dci?jl5nF$W7:6*r3Y#O'<WJ/!i)]/1
ne<bX#bt&'.*?Ro\iRudS>e*__kag16P<(H,`[uAPq^Ff9WotF_kMl"(sP%f3.[nok]BRN6'"$%?t^]E
";@Fs3Y`=l8NJ*3K-m&ghuI^+#..Y]OJ!]~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228637888.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
98.284 88.2 mo
112.457 88.2 li
112.457 74.027 li
98.284 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
112.46 88.2 mo
126.633 88.2 li
126.633 74.027 li
112.46 74.027 li
cp
gsave
grestore
/228638084.0 
<<
/ID /228638084.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOt\dO!$_fm?tnO3p,@LJ;RoU8R3[/,*$BbT5"R)c
9-o4IGVpliO9[,\=ZiR(.Q1(4dKLnVM)h>]'GRM@!SL5<;5ikRm)EYMXAN^T!'rM75EI`R2$u>6bRL`W
&!T-"N8\]OJ-hQ8'h(]4\;`/-ajX_VBE0b@FfE_CSU!h:lsRYEY2M,=))>2)#$-.;!%1#Zb8uoCo1fBj
K2>r40EB^YAS2bC7##]1SVUYo/?!9e!!=NTVn,ZB\_Z^>"TSOq!)qRc;`oKZo6Sbi-p^Q25eJ"J$GB1#
60s^."aC%`"UQHY=G\Y_;ZI+Hi>%$2!)c?SQa`3F/hd''DDM:O17<b"EA.TY!fR!X!!QaWO=XjK5ZnMJ
i5AXsUkC&p)A)g(%Kd8])[I`d$rI'QE&)$C+0\j,rl"=no+V0,JuVp&VP3F,JOQA/*&/#+/i!P7JCXl7
%0:Fp8MXD9+iP"W.&b#0_>%mTnE`@NU_;Io5!>%0+X5)B2un&d^grmq8arP."s&i%E>:eP?kF1U"Fsbf
$5'!6~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228638084.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
112.46 88.2 mo
126.633 88.2 li
126.633 74.027 li
112.46 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
126.63 88.2 mo
140.803 88.2 li
140.803 74.027 li
126.63 74.027 li
cp
gsave
grestore
/228638280.0 
<<
/ID /228638280.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOdmoo2jGFOOD=:+.L)OH04T5.>q_O'$o3Ip;47iQ
8-&p/6#oaMQ-3bPn:?I22Om:^j9aa%q*1-;.!"l)(`P?%c;!cF4J6q1PZ2<r1W<P&8WXAj&r,L7K2\*e
/C]R(@b(u`>H1a0"jXGH86s-!$3fjp'J\#(ncP`D3Wa\*g`TK;(>o0(+Om(>]YH`b!6`:s!=ch5E";&R
60j&5L4CAi!rr<:F=D/=>QhY.pmPLrCP^#]WH^4EWn:nTZJ`V0`X(&b3P^WGL>YCbTK;mg6[^p'!U>1Q
C*-nljHt4C"><8PCG#t;_05lJ=Wm*D!gj\N`P17O50q"YGX%8[VDpgoa\`,Dar*bRJO@?mZ)D9Q+DaA\
\/</8YIj?r6S!_T]>ME]OKO/<ll)RW.7?c271iKIQj/[h3roQuN!uD>&[Y.Y7o<Gr:.NYC0d+JMH(cFs
,=IX:J:gg,!>#lii#G?d]CKo5b*^j5`2/-uTp-24!W~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228638280.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
126.63 88.2 mo
140.803 88.2 li
140.803 74.027 li
126.63 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
140.8 88.2 mo
154.973 88.2 li
154.973 74.027 li
140.8 74.027 li
cp
1 1 1 rgb
ef
140.8 88.2 mo
154.973 88.2 li
154.973 74.027 li
140.8 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
154.98 88.2 mo
169.153 88.2 li
169.153 74.027 li
154.98 74.027 li
cp
1 1 1 rgb
ef
154.98 88.2 mo
169.153 88.2 li
169.153 74.027 li
154.98 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
169.15 88.2 mo
183.323 88.2 li
183.323 74.027 li
169.15 74.027 li
cp
gsave
grestore
/228638476.0 
<<
/ID /228638476.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.NE3!RBq"b_[3?ji;%W.@pJ5;/Bsh[,&D,%EQm
[jHWUiaurd!K7&X_-FQk2bF<cF+ReNA7T^?QGCDW-igcX<,-=XBJto1RE]O=):[5a2-^229?QX^@#U:R
V=GKDQBs$)Q700,P^:5*^47c@am^GR#,)>,/O1G?>=PfN$\OOU^l/FPc4662C4W&C1153-3HtmkJ02gn
$i,.4pR]`G2HUtVj&)i-8&g/&<l7;2i)fWYICKA\01'S5\c)O5SM9$HGeA:u;jG)[p1+%=LJMt4@V7"^
4#e@5H:n?GS?3MQQT(ejcirBQ2QJ((8H+*<@(RN]!fupIR(^X(i\CReU[%`VlEh3#OUi*,\39-PaT4#N
,2r[#7t`.K+<U~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228638476.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
169.15 88.2 mo
183.323 88.2 li
183.323 74.027 li
169.15 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
183.32 88.2 mo
197.493 88.2 li
197.493 74.027 li
183.32 74.027 li
cp
1 1 1 rgb
ef
183.32 88.2 mo
197.493 88.2 li
197.493 74.027 li
183.32 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
197.5 88.2 mo
211.673 88.2 li
211.673 74.027 li
197.5 74.027 li
cp
gsave
grestore
/228638672.0 
<<
/ID /228638672.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@PIbdB&'f9Frb6KL8A%)L.DF(D@Zs\?PTF
"(]ljqr'6f"A^D)anQu<R@lP^;j->R-j-0'PgcWHGVB+[85B5PZ+bH^Gtr#%"9[A!>HZ9a((b;B8k=9]
l]p_go%8m1a\N]jIEm*,[TL?V$g",I-5&H-<)eSfrAuQ>J[^Id"!)*HUG>pr#%%la?t?Qn#0(t6o[-u1
!/i`/0d[T0!Os9W[gbGPCp[se[Q[BHh.hfdh0ap5ZF9f=*)-9]nZot\1t/j_qK&E*F!luC[a'c$!5/@i
=Yh0a?.k'i4mE1>)';ZZ-Sre4[R'AC00WB-gY_.S^An:2Hp?jL0`O@f"9K9&O@hbT5nCOj/g$0)66nlO
!^8_5Y];o]6R_R.8jfT9nIWN-pk]3QL?JV>4GbbbEYEt:=F#VYBW(n6"pe$b)hJY7+IZaHGRd"N)KPnu
128uR,OZO6.4@X$-:NJO$"+X.5^IUTWoCB48"AQMX9TUE%&fa1J-)mP,KL,~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228638672.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
197.5 88.2 mo
211.673 88.2 li
211.673 74.027 li
197.5 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
211.67 88.2 mo
225.843 88.2 li
225.843 74.027 li
211.67 74.027 li
cp
1 1 1 rgb
ef
211.67 88.2 mo
225.843 88.2 li
225.843 74.027 li
211.67 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
225.84 88.2 mo
240.013 88.2 li
240.013 74.027 li
225.84 74.027 li
cp
1 1 1 rgb
ef
225.84 88.2 mo
240.013 88.2 li
240.013 74.027 li
225.84 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
240.02 88.2 mo
254.193 88.2 li
254.193 74.027 li
240.02 74.027 li
cp
1 1 1 rgb
ef
240.02 88.2 mo
254.193 88.2 li
254.193 74.027 li
240.02 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
254.19 88.2 mo
268.363 88.2 li
268.363 74.027 li
254.19 74.027 li
cp
gsave
grestore
/228638868.0 
<<
/ID /228638868.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@VV:)#99-Rg,E'Y+m0p1-#QF)03hEMJY;B
:1R2#eFlBS@S,Z:ZQPnu0UYW_e@K1FGtjc&5QX:UU/``[#3cdW,tak<S5\bdqN;Jl6^AN:o,?_:a)@#@
Xn=%fSuuTr<iqUeL%GCdZ.+Sa)RU./X&RsA\*NG`_,=0>/I"XqaDm*H@k&>\rC@3'_TN4BiI58oDpD<3
7SO(\J?@8JEI)s9VOLImCMrOaJ2RH~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228638868.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
254.19 88.2 mo
268.363 88.2 li
268.363 74.027 li
254.19 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
268.36 88.2 mo
282.533 88.2 li
282.533 74.027 li
268.36 74.027 li
cp
gsave
grestore
/228639064.0 
<<
/ID /228639064.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228639064.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
268.36 88.2 mo
282.533 88.2 li
282.533 74.027 li
268.36 74.027 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
282.54 88.2 mo
296.713 88.2 li
296.713 74.027 li
282.54 74.027 li
cp
1 1 1 rgb
ef
282.54 88.2 mo
296.713 88.2 li
296.713 74.027 li
282.54 74.027 li
cp
.137531 .0973373 .0856268 rgb
@
240.02 116.55 mo
254.193 116.55 li
254.193 102.377 li
240.02 102.377 li
cp
gsave
grestore
/228639260.0 
<<
/ID /228639260.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOG!TN!(^Wu3@'8+K78E7K`T7PpaI7T>NR&C0fF^i
Pm/E$BEh'/";6A$d,<JH*fs1^5RBQM="PI#VB?28eo*R>cY)<r'l$B4V:)?KWF.RY;OL6+dtuTFI3h9_
D=i)OL4<^2K3+@rV5g_9Y=TTJ.K+kc,eR8eQccG5Z#61c$$88!Nt$l,@VPtUSi6UOb/fDW3TqdUDp)F-
)4<pV>("V!C=^W4r=Ph*d;G2>>r,]1?>OPl4FRK(aP:3H>MR`?Kq@"/,bTa$;ba3QAbCGui3PLokjc#c
=sY+d]^>1SVp>"Z*IuMX;'%t.\M=Wcmpt:SC@g0<^$VglA3PQSmejgpC&%_>%P-P3$*9i/:d5H5QLq0"
.!QN>mN^Yl_C=\U"/JHn~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228639260.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
240.02 116.55 mo
254.193 116.55 li
254.193 102.377 li
240.02 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
254.19 116.55 mo
268.363 116.55 li
268.363 102.377 li
254.19 102.377 li
cp
gsave
grestore
/228639456.0 
<<
/ID /228639456.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOPi)U!'D5g+D[*'T*Bfl;Rp>F!#1L;V.@CDaN/H;
VSTHdgk%[3S5+\D#t2pq0::.aP@-aq8N`V=BsL>o<fnN$9h^/T<9g+VT7AGUUZA"F<gHE0'.R.HT\?<i
C_Ib8ORSj9g*LpB4gZ?i\C>%*q&qMMB>%=6[AHCpGB0qJA;CXX-<5Gpc&`DT%F.8/OtAH"CrN]e30E7j
<XhVd6[?W7A_,FbQTJX0aU&`![OX+D<&jUC*Xn.A")7goN5,u^G^WTp;@E_B1]pcl0,,P+iaj]S5S*.Y
"oPbnTcs*j6bir2W4>$Y5mf2o!<=<?@K6W9+`J@d]4/T5n"ief`q#se449CTO(\Of^*5r.rBB\m=EG/c
qu?m1"Pa:[4A%]Vo0!U\!+$u0'Hf00d&Ze*&hqeA"W`]r_%=Si6<==Y_<:l6!$i\ur14!HnhLHrbY4c3
,,cggJ7?#0!/h>k!^$Hn5R%5k!+5j7!^N+q#_E&$+q]?5(^LY*!;JYf!'h)c1QYOc-kK,R3'%G"U:<6o
K:j=u$\JGhYR?j!\-N4f5WB-)J709[#_5/_!YGK!pb%)I~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228639456.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
254.19 116.55 mo
268.363 116.55 li
268.363 102.377 li
254.19 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
268.36 116.55 mo
282.533 116.55 li
282.533 102.377 li
268.36 102.377 li
cp
gsave
grestore
/228477828.0 
<<
/ID /228477828.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNPG$-k#(Rss3@'gh'FkR_dP>3]A7Qr6'k#Y/DH&T[
J0m'+`-t'(TLpM0$#I7>Ssdi8o9qedE+b8/-o7;;\B(Uj&ckt)"QEE`XTp<hqNR;";PKQq$5uUl]/d:C
acl$ARa5!#\.j,?>cRHQ]%!nR]1E#^I(.8&dl/G9UOeQ5!NmPG6:PWbN;s%\IS_G%:P2<51VacV\/CS5
TGsg:7PJHuCm?,4e.<2H"9][K!<[^75]BO"*ZtRh`rQ3$5Y\]EF1gAupfp!9,Ep=5mWVm[rr[t@n9B=e
5:;fBkOa(K?GC-^h=($P5Q~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228477828.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
268.36 116.55 mo
282.533 116.55 li
282.533 102.377 li
268.36 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
282.54 116.55 mo
296.713 116.55 li
296.713 102.377 li
282.54 102.377 li
cp
gsave
grestore
/228478024.0 
<<
/ID /228478024.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3<I,)(mc0TT[mP_Q7rAm!'gm]KFq8g"=lb="a!!pYRh?]1]Ra(!<H@h5YGJtZ!"3\
X7dJYQHs<RgMQVfKEM~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228478024.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
282.54 116.55 mo
296.713 116.55 li
296.713 102.377 li
282.54 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
296.71 116.55 mo
310.883 116.55 li
310.883 102.377 li
296.71 102.377 li
cp
gsave
grestore
/228478220.0 
<<
/ID /228478220.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNPU\fu!(]?\LM.A?+]o/q5ku,&'R]rj-*oV-KNL/;
"(e0V"RlX?DjuBt,pL0%6CQ-O!"_C8P9MiCK[`UK#QmY\1`)#\;BXXQKaC!S!&Z%knI5S8omd&drnh*$
N5K*2`;7$?9hBl/!&^ECS:`D\4(NgM+H]5@dYUr/Bnsc<Orsm]@$ijBiA4WLk'&t\cr*8^'>OU(\NH9c
!))[egts5K:`B$-g!6G*h=!-e@gG7-=tk0q/Ieof,.2q]0WAq>:FVRR<#SIhTZRrLlXX2tN72EX?jZpn
?-VAlK\p.H5i*k(PK/dUH$G/V3uQG7#67q55,GboZS'tgm\Xmui!fl<,Kei>AE2*]4`>,kRQ_3[OHDP^
8kS9OWMqTM\uePC=?n;C\Cicql)]4tC.W+2JIbF#$)Ol,P(8&~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228478220.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
296.71 116.55 mo
310.883 116.55 li
310.883 102.377 li
296.71 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
310.88 116.55 mo
325.053 116.55 li
325.053 102.377 li
310.88 102.377 li
cp
gsave
grestore
/228478416.0 
<<
/ID /228478416.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNPL'^W#(Rss3@'gh'FkR_dP>3]A7Pfk_r0.^DH&T[
J0m',5TW3ATLn<'$#I;+17Cpf'8]^1AmCs!BJO9iWei>`*YaeuXPS#%RA;;i3i*<f75>8c[E;K'!G\%-
/9XT2<eG(->3Rp/<T[nX"AeHK41/C$TMo&JJ.+kekC]I.XS%4`UlYqddd-^:;1esKaC0+0njBH2RC?mN
huHdc6Y;Nc!tN"-[WAduM_k/8(5l[)/1L*lWE0:9r8$g#dT\t&;8]kaVIKU$]*HNB=rA=Wh[fhCR@-+I
%_fiK=?n?^';%tC1#q,$DY8RtX4K<-"'M6+=.?Ls*Y6FjSA6S@\cJ.J)Lspel'gfS$3?M6Oq.Oalo1jJ
_EJ1,_P:9=_Q^V%(+Li=fal"T_H&?YWQ>G\6IA\!J:I~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228478416.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
310.88 116.55 mo
325.053 116.55 li
325.053 102.377 li
310.88 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
325.06 116.55 mo
339.233 116.55 li
339.233 102.377 li
325.06 102.377 li
cp
gsave
grestore
/228478612.0 
<<
/ID /228478612.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOl3TK#,hb^!@,QC%?eindKpVN9dl@Nj>&`KSl-#c
94kN@bgLDgT$+"[)#V[54JL-!oLWTi?U1F9W,ent*hc</;^g,+]l'09XB-oOWdTo'%2]*WJ76@Ce7>&!
/ls_-!pOpA?>ioL!s2f!BFXCqL',rH!PW#_=!U/M:O52V0ZAln!3Sls1^:b2DBeT>,,[`&&JE=/Oj]X=
)No?+9Wltb"[Yp=@q]CpD;F4m1AGFX1CZ1[@BQ#;-/nD'M8;*;^*1r=7/CIZ9ZZ5W)'?`_1?;f>3K,f4
*T<.Lc,5Dq`?.s>6gXo3FN.[MOc/lB$FIild?1O0Kn3H%5sRd\\H7NE@n[R@bq\kqN.t_XdhMo$9K`V4
0cCq>@FIm\#RrIG+N-S\6m8qSk]YDZ_;e2o#H]ct\V"?99I)]P+lj0@`X#bs%e8Ju6@^HA#e^`M\6oN\
Ebq9oaqBZ0.E[gTXMgbS~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228478612.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
325.06 116.55 mo
339.233 116.55 li
339.233 102.377 li
325.06 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
339.23 116.55 mo
353.403 116.55 li
353.403 102.377 li
339.23 102.377 li
cp
gsave
grestore
/228478808.0 
<<
/ID /228478808.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9?j)!r!ltP&eSm?14V*3r1Wj8eSPQ1`C/m<jH3+~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228478808.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
339.23 116.55 mo
353.403 116.55 li
353.403 102.377 li
339.23 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
353.4 116.55 mo
367.573 116.55 li
367.573 102.377 li
353.4 102.377 li
cp
gsave
grestore
/228479004.0 
<<
/ID /228479004.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOFUju)%23%EN"EAD[(fI"i5l!XslB",pP^Ki*7rQ
N[)sY'Tu0=PtNF!M1iqa1`D>8nbLsp7jXAAATH1L<f8CENCP2O\C*N3(Cd:m)@]N,<s9#PdMcN9_.'?>
"TT/;cjBcc?>fnaC:G/_]jPan.MZ"21E28VdIEcVQ#NAS.[2*J*,d"'j)*HG*Qndjb73uO9\$m>P*VFB
QuTp]\YR8JFS8jO6WmWSN-72h,u8<3*0%"O3S&+[ERYCFP8TnN?_u%g2M2<c16+%,B^=Gjk'F"-lO=%:
/^Eft^).M8*\G1VFklTI8D^V2._G/uFM/PfV[LZB5>3QPn>@j_AFi&9UX\df9N1B_1+nrconH/Xh$>s@
/#o?i!NS]f3\ZK=jhlY='T\!q_n;;J&Ls$b78?Mm'#W+M!>.#[Mq7DTDCb;u.Y:WD)MYEMIgiVsCF\WU
,*7s1M1HWb.Z)#5L*qe//>O*hU6o+0N.WP63Xm=,neR&_!6d9Z_][/^b[CL[d0DJ+Es%-t"S*>RL^3~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228479004.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
353.4 116.55 mo
367.573 116.55 li
367.573 102.377 li
353.4 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
367.58 116.55 mo
381.753 116.55 li
381.753 102.377 li
367.58 102.377 li
cp
gsave
grestore
/228479200.0 
<<
/ID /228479200.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Gi6,!'gqm)M$GE^-JJM
#\DEbWJ5U<%M0J-H(<GN9H-csit[--JfLYuC'I)sR:]th;F.#g!e:c:SBp6EctEVY'LBK"8A]o<)B]Y'
-0Kmt2#&McTFR;m1l9!nQ@M_g0[t]b0pR8@(9;#V_/[$ADYKXVQ:;u0i)^H_"rIAsQ/_1Sct\1U5e:7)
!8H&p7UXHn9-=7AHU0./@mRU$QD5b,f&`]"%>Y-ga4k'C<h18C0tl)topK%NKu(agm:5p?<p*&Yk\p$\
kn&A>Jb.O+R%Eu_M;d!0pehb1VlRr5F#RBSLJ*6rUZDUEOhGT>o[5kJl[\7GB*8F$5cqs7`rsafjT$OA
!)C>FN;L3n['6STpptAgkmb@E8ce~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228479200.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
367.58 116.55 mo
381.753 116.55 li
381.753 102.377 li
367.58 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
381.75 116.55 mo
395.923 116.55 li
395.923 102.377 li
381.75 102.377 li
cp
gsave
grestore
/228479396.0 
<<
/ID /228479396.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOAJ%f#-SiC&6"*@+=]385gmTL)G$2.-,g11U0MN$
(F@'-EKXRKEr_/l$7-II8"uXmi$]MkSuW'p&?c`n,)A]lUW?l-O][?181-rB!^Vp'7L9&;<($`cX\$!+
kbX(I!j$p`5M,t6\kIk1;3m#G.^D=2.U]e3nei8n@>e;^QP/CJ\QLOe9:6FTA@Zt<?qZlNq@*qrDl$AT
7`L-KV,Xp`Q"`Q'ONLQHKAW\,)`;):ZdEVJYQ_L3`m]GFJ,oZTn&l7r:+t,Arr[nS*#sZ%#r"RdO\$(N
YbOfk)"Rhq*ft$1+mB\e7@oV(Ud=5XH>"!8!<MrtRXf,=2lO^R<Z$CbpgR>6L'TdD*3a\/:DCd8aDaE&
BL2\<!'(m$Q,%(3?4:4VMu^C=@cGm+CQO^+RHq/?5Xjg\J.J$Ci.aaX6HcU/#(kJA@$ZiM(m5FC0^/.i
%nP(>NK6WgoT9YU)"`lM8HACEO4-`9`bJZ]DAk*IVQ-Z8\>2hLC?UCXKr%,UZFDA.dRG&#;i_]rlc`n7
Y6Y_j4d(KiXMHTJ6O^m?!<^-WK9U<nC-<o]dUYKfA(#$R-UZ=*4XT4;E'5Qo]`(S31K&deL6Tp7.`%6B
:!K^-CdAdlR`r,j8,W"i3=S+K]:^8~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228479396.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
381.75 116.55 mo
395.923 116.55 li
395.923 102.377 li
381.75 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
395.92 116.55 mo
410.093 116.55 li
410.093 102.377 li
395.92 102.377 li
cp
gsave
grestore
/228479592.0 
<<
/ID /228479592.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO<>@t+mFe$A:'][W^JAUaWQZr:Zu7)#c`q/
,+9s$),]+m+\2Z"#rHo-5F>+moU8?J!$EE5&/=(*"k_3kONe4KaTr&D3&q>)&0R&7%:1\e+J`DLE".7Y
+5jp:`ocd$"!3eq`T/1c"pH[\9E6:;%)<l'^`tEe*?UCDLiQn`i`.Or@u6pPaUic[+Z%?A@N1/CVP(un
FAN,o+0NY7#qpII!i<59YS0TmE=JcS9@p.q6J*`=*)\A>QCD"h6cr/1<#:dQjXGIK?<.l-V<(9o<*iRk
S5qFUNl[AobtPLI>;)j7KW)a,[+^Wc4+IX3)f.?3[4(WI#,o[3?NW21_?AUB,Qng2Qj%HS81R<mKVXb4
GZ8(:Ktq$%/O31\%frB`nfTS/K(9g5+i<du0-[.]+tk-,ng6JX>8m+LW>M.h&VnO^pT_\Np-ud"\:dtA
`7t.g^`Wab!k'\5*s]W><$#EW-0ZW]X/c(P%2^>n8EKq>6#R:'LO/*%9u(2231?%fYrJ<gM<R!iPDR[H
SWeuT*QO!D7Of\#+n["b.U\3=On)07,n^@IT)^93,RDu;$C*Zm9+$ol"Wl`p_$d+ObVff&E<=]T<MSX7
5Y`PX"ZVPVM'4jAPDTD~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228479592.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
395.92 116.55 mo
410.093 116.55 li
410.093 102.377 li
395.92 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
410.1 116.55 mo
424.273 116.55 li
424.273 102.377 li
410.1 102.377 li
cp
gsave
grestore
<<
/ID /221430844.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOFU/4#)OS_d%lUT,7[8aOtjn6;'QiI`Y()&Qipt#
:1mM9jQQZZ!=9.le"b,t%8n?U-;!RcBV&Fi?;KZC"g[hf&;0!skmDSHSfe:1g%CBI3[t+4"<)"VdNDqh
S7-FN,_FJfJ>oGTiIuks++jTp`Ti*j1r.K>W.8UB((E*1c'\*W58fDLA'^P7#!E9RRa(3mH2[#K/:(1X
1qOuhYg'.I#UWM#,.1[Z:95,@(6<g;!*eiSgNBKIOT5[T[sQBfqS?u'<B*)h.7qql[5%'-HQsTUa0[Sh
N-hlPgrHoZmS*i<EPUR1+78V$P>b#K;^nC?S!.<]ScG/ugT.@N_QteQqaTNrX*K:r"/0e%]JRaipqI;n
;l7Dc_?;\"L4F=^*(3&*;%eSF-t*aF&La%[LQO!9&r;Z#6MJ2'iddR5LT=DPXG+G&!shMfWWWBV`!G.r
.f_I3V_D$'">'%PM$Ft,lmCkmYdo>k)0"?1DF<K\8k_XK6qTp:UkD?>7&=Ed:.1o]8lA.)FE4V+Bum6"
8*scSB8"'ZMV/Vr&N_;Sc/bh_;<hu!YeeA)F=,1E#Q~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
410.1 116.55 mo
424.273 116.55 li
424.273 102.377 li
410.1 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
424.27 116.55 mo
438.443 116.55 li
438.443 102.377 li
424.27 102.377 li
cp
gsave
grestore
<<
/ID /221431040.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMPgmcj9^)$BPl)l&]\Sn1p_0e,tlL23;lS<N?,K_.p#LWn$Dn.ckmo@'*PsFkZdldr2Zt
mFFoV`mJn9frk"[Xm5(s]\@6^$I.<)C;Sl.YRg~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
424.27 116.55 mo
438.443 116.55 li
438.443 102.377 li
424.27 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
438.44 116.55 mo
452.613 116.55 li
452.613 102.377 li
438.44 102.377 li
cp
gsave
grestore
<<
/ID /221431236.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
438.44 116.55 mo
452.613 116.55 li
452.613 102.377 li
438.44 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
452.61 116.55 mo
466.783 116.55 li
466.783 102.377 li
452.61 102.377 li
cp
gsave
grestore
<<
/ID /221431432.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOC8?r#(Rss3@'n_GV'[3WWC>B(^_sL9o(`bP"8P$
bYl<'19lQmOT_IF3@Y#Y-B_6*&m+]3SP=U_i'cj]3,Sb\*b@)F>_n(Y+TQ)]^]f2"<%gpZ/6>g)]02e.
AWj"aK'QsVdOnq^]0]p]RTlR`6qkQ_4He$h!"'8=M+OJoBigaW8u#CdNp@<X%?C$lZ@HHY9`YMB@kh:$
(<dNU7>d8amdc38\sK_MV#bWTSCU4:F\GceM'g+X6_`XUGrpIVSPuPLo5[TtI_jR<=;6O1(9:THOn$(*
565.0]YMWj"i+lbM;bu7n_BU`1:tlUoI=B8^]XG0['/dfAekhJf!`5P'?LEYT\pa\2oupk>dYlahUfIm
CEAVPaYZ&S57FirWLt@~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
452.61 116.55 mo
466.783 116.55 li
466.783 102.377 li
452.61 102.377 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
.23998 lw
495.13 10.25 mo
504.48 10.25 li
@
503.79 7.49001 mo
509.31 10.25 li
503.79 13.01 li
503.79 7.49001 li
cp
ef
495.13 38.59 mo
504.48 38.59 li
@
503.79 35.83 mo
509.31 38.59 li
503.79 41.35 li
503.79 35.83 li
cp
ef
41.591 144.891 mo
55.764 144.891 li
55.764 130.718 li
41.591 130.718 li
cp
gsave
grestore
<<
/ID /221431628.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOK8G(3XXqG3@'nb-]oE[a"s6Ik95r0#\A_R%$Ui@
J,g\m>Q)At=U0U)Q-B)T.i2&2`7:5_1-%]Sk5YXm9Ed#1L<(L!!#f]8RoQAN[?/%28tV;J64kN<J/"p'
%],RYY$#t\9\82-+:2+1!"gm:!<r:2+q]i'$]FSs,Smas63/'``FK_nNb!o4W,@LN!A%8[T`-GYX'(=6
RVX[)98gfCJpF=9dSDZn]Du@TON;30h/<F*?(c%V!,?E77np@WE<"`'Q;ikE&#:6X;Os@iOCL)WmK>kG
8JZW3dMIkEh'!7U5N*#r3O`-*[UV"R9Q&`j%(>T*5-)7[Ps<A??C!i-ip6ZJch^uE^P]r0P)bWm<kCRe
nll;E&@-QW5+i6h>_$CY#$?\V6#ZjiU+"GDLlkqG1rX$j>Z_77=Ml*e&Qr]XLl#O'O2)o@!aG_UFAjFc
dK3>Y6gpZJs$TbT0UK^FS>QIb$$b\=6EkhH!)$6))N`,qgkQ*Mn>o$>QQRG'3D!U$>U#.p%%.o$'.c'E
^Q?;q2+.hZU6J$01a*8R8K(r'^sH%&2pNf'#^B+B2#.u=Pgj@J*:^[_*Jb<k#^o5VZ:=hhnGG'nJ.ugR
7a7)/7"Bd~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
41.591 144.891 mo
55.764 144.891 li
55.764 130.718 li
41.591 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
55.764 144.891 mo
69.937 144.891 li
69.937 130.718 li
55.764 130.718 li
cp
1 1 1 rgb
ef
55.764 144.891 mo
69.937 144.891 li
69.937 130.718 li
55.764 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
69.938 144.891 mo
84.111 144.891 li
84.111 130.718 li
69.938 130.718 li
cp
gsave
grestore
<<
/ID /221431824.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.938 144.891 mo
84.111 144.891 li
84.111 130.718 li
69.938 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
84.111 144.891 mo
98.284 144.891 li
98.284 130.718 li
84.111 130.718 li
cp
gsave
grestore
<<
/ID /221432020.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
84.111 144.891 mo
98.284 144.891 li
98.284 130.718 li
84.111 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
98.284 144.891 mo
112.457 144.891 li
112.457 130.718 li
98.284 130.718 li
cp
gsave
grestore
<<
/ID /221432216.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
98.284 144.891 mo
112.457 144.891 li
112.457 130.718 li
98.284 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
112.46 144.891 mo
126.633 144.891 li
126.633 130.718 li
112.46 130.718 li
cp
1 1 1 rgb
ef
112.46 144.891 mo
126.633 144.891 li
126.633 130.718 li
112.46 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
126.63 144.891 mo
140.803 144.891 li
140.803 130.718 li
126.63 130.718 li
cp
1 1 1 rgb
ef
126.63 144.891 mo
140.803 144.891 li
140.803 130.718 li
126.63 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
140.8 144.891 mo
154.973 144.891 li
154.973 130.718 li
140.8 130.718 li
cp
gsave
grestore
<<
/ID /221432412.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOYB&+1*IYf!)qf62#n*gP)0m7Ybr(c5SH/Renb<n
9'5_9oRM2OP"DJ_WC6_VN0m;:FLfViQT[)e-k]ZFVKGe"0I\iiAEod/1+OAe)QaPO@Zil)Fih<T\PP%C
/<i0F`^hLW9Pp*Lo^8@lG22B2N!,6QH)4j0QKnC!WI_'T,oHG%6P53Ej"JsdA%MnVcH-okI)O>g2lI</
q>&UAK;?r[k1'_!Y9SZ"D.J7;:$YG3^?R6W7u"<H`0(rr\=CR]CJZoOGeafJOC5*GCj8$'!AWifmn".^
^&J/)RufQM>sD;Nq;gH)Vj7I\c_pH!1-Q_^570Yr*q#NuOpdp"J?B[nE*`a!.G-%^'WaiY!!5a%0QmF`
.Va&B,?PXr*3dO]1R3u0C.JWG!#d6f-a;HrJ0FD##)EFVActE!Z2t~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
140.8 144.891 mo
154.973 144.891 li
154.973 130.718 li
140.8 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
154.98 144.891 mo
169.153 144.891 li
169.153 130.718 li
154.98 130.718 li
cp
1 1 1 rgb
ef
154.98 144.891 mo
169.153 144.891 li
169.153 130.718 li
154.98 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
169.15 144.891 mo
183.323 144.891 li
183.323 130.718 li
169.15 130.718 li
cp
gsave
grestore
<<
/ID /221432608.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO#dlL^heTs-NG@n@p)4.4E-R9()%Jb9OnSZ
8E@)@4K;OHPKY>:3FIB22f^,gPR0/)0]<.5,Rqn@+?5df4V@=tPaj-AT?7Il"d+qod=-\>'+r36!GAco
-WSgkqWTZ#d/XFZ3&L_X\l5UFHDNs3:cK^GLdZB+]7R!;0XYZ2+@*Rn"'1crmFq"qR8#?.b\Z_i<PhaT
i.V6I1;'aRW`eYbK(OS_"%jJ9^='X%R#hY2FiO"TW6&e[TuDat@7o3O2q9M`Z%-/M]/\KsNdgRS:iO7I
9o\$RWP`:>M`f-,bK%HiI5M0PmkS/LTE%m?,8`u8V8.Y6I#nQ:L&`%o!/-Yl"H#_s&kO8K~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
169.15 144.891 mo
183.323 144.891 li
183.323 130.718 li
169.15 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
183.32 144.891 mo
197.493 144.891 li
197.493 130.718 li
183.32 130.718 li
cp
1 1 1 rgb
ef
183.32 144.891 mo
197.493 144.891 li
197.493 130.718 li
183.32 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
197.5 144.891 mo
211.673 144.891 li
211.673 130.718 li
197.5 130.718 li
cp
1 1 1 rgb
ef
197.5 144.891 mo
211.673 144.891 li
211.673 130.718 li
197.5 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
211.67 144.891 mo
225.843 144.891 li
225.843 130.718 li
211.67 130.718 li
cp
1 1 1 rgb
ef
211.67 144.891 mo
225.843 144.891 li
225.843 130.718 li
211.67 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
225.84 144.891 mo
240.013 144.891 li
240.013 130.718 li
225.84 130.718 li
cp
gsave
grestore
<<
/ID /229063988.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.Qe!"bpr.0Pr2+=&p@@&$'D]FBo%5QLsTY"Sls
.36<F!+AV1Qq>m6of+focug3Oi!$Y_1da=.6_lVdm8cSt-,jCU?$8uA8^$0(L5b[q:leALLP"6cK-ksa
BXE([/WQYe<u.LH)Y$@T+c8N/lK*@%*c)a"TZ\@?!171'V?%&umg]=s(<lh+@IB$rC+7[Ud_\^0%;[4p
`qio'4:OCSF`aoTGd%WL#=b?iVS?WIPFjbKeR20r/3ZpTqT1e9LUl6-3BI\:1/(4XD:*pJfb::,V5jg6
Y2B>[hs/Y2ShP)$G5U6DAET"`i@s3n.6SXW0N57]^<aY]n2N)r-k81DU\="!VZYTG!!d$Mf"^^)3'OlK
P"]g:U:;-E[q'"rk.gBk&->3/U\L"(L\*_C(QfV0$m5!2+?Dt`.%)!kn3?tKJ0mW9O:d'=?j;1;$p6oY
B+PUa2+)Wt9ajB<!>L.mP"KcuEmd]WTBB%<!!":k80WQe"GVtl!KfJKS:HaC":U#7`06Z^.+A5>;d)@g
J8"TUP8P\k9.qOO83k(L-[=2tccH/80,Xa%J3UC(p]qrL0E;;U!N68~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
225.84 144.891 mo
240.013 144.891 li
240.013 130.718 li
225.84 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
240.02 144.891 mo
254.193 144.891 li
254.193 130.718 li
240.02 130.718 li
cp
gsave
grestore
<<
/ID /229064184.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
240.02 144.891 mo
254.193 144.891 li
254.193 130.718 li
240.02 130.718 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
254.19 144.891 mo
268.363 144.891 li
268.363 130.718 li
254.19 130.718 li
cp
1 1 1 rgb
ef
254.19 144.891 mo
268.363 144.891 li
268.363 130.718 li
254.19 130.718 li
cp
.137531 .0973373 .0856268 rgb
@
214.5 109.46 mo
171.98 109.46 li
@
.23998 lw
154.98 88.2 mo
154.98 123.13 li
@
157.74 122.44 mo
154.98 130.72 li
152.22 122.44 li
157.74 122.44 li
cp
ef
141.09 115.46 mo
168.873 115.46 li
168.873 103.46 li
141.09 103.46 li
cp
1 1 1 rgb
ef
.137531 .0973373 .0856268 rgb
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 4908 36 <0002fffd0000055905ba0007000e0167b6010e0f10025502b8fff2b40f10
025502b8fff8b40d0d065502b8fff440590c0c0655090c0c0c0655050c0c
0c06552f10301067086809601088039010c905c606c010f0100b08055901
56025010680bb010f30cf30df30e09040c040d040e030b0a090504040c0d
0e080607070c09050408060c07010000b8fff8400f0c0c02550020070c14
07070c020303b8fff840150c0c02550320040c1404040c091e0505081e06
0306b80270400900080ce94002010202ba010b0001010b40120c20006507
03525004cf04df040390040104b80101400b500cc007df0c03900c010cb8
010140100f07cf07027f0780070207930fd6d7182b10f45d7119f45d71f4
5d7118ed10ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b2b
7d10c4872e182b2b7d10c401111239391139398710c4c40ec4c4870510c4
c40ec4c43130014bb00b534bb01e515a58b4040f030807bafff00000fff8
38383838590172715d2b2b2b2b2b2b230133012303210313210326270607
030233d10258ddabfd9ba1d901f19946221c3305bafa4601bcfe44025a01
96b9778d8b00>PBAAAA+ARIAL AddT42Char 
1 6056 39 <0002009e0000055a05ba000f001d00e5402f201f0143081c1d1e02010211
101e0f000817262009011f400d0d0255092010100255090a0f0f02550918
0d0d025509b8fff440150c0c0655091a1f1d102001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d1e3b5c182b10f62b2b2b2b2b
2b5d3cfd3c10f62b2b2b2b2b5ded003f3cfd3c3f3cfd3c31304379403603
1b0708060805080408040619181a1802060b0a0c0a0d0a03061516141613
1603061b03172101120e17210118081c2101160a1121002b2b012b2b2a2a
2a2a81015d3311213217161716121514020e022325213236373636353426
272623219e01f9ab5a7e5974734e7a91cd85feb1013991a531454d976c4e
adfecc05ba151d4c62fecfc4a7fefea96132ad363145e9a6e6f72a1e>PBAAAA+ARIAL AddT42Char 
1 7732 49 <0001009c0000051f05ba0009017db1120bb8ffc0400a13153408180c1602
5503b8ffe840210c16025508020303200708140707080207030308090402
02090708040320060605b8ffecb40f0f025505b8fff2400b0d0d02550512
0c0c025505b8fff7401a0b0b0655055d200b01200b500b600b700b800b05
0b0809200100b8ffc0400d13153420000100201010025500b8fff6b40f0f
025500b8fff6b40d0d025500b8fffa400b0c0c025500040b0b065500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d0a3b59182b10f62b2b2b2b2b
2b2b5d2b3cfd3c105d71f42b2b2b2b3c10fd3c003f3c3f3c123939011139
3987042e2b877dc4b10602435458b90003ffe0b70c113408200c1134002b
2b5931302b2b012b435c58b40840463903b8ffc0b646390840323903b8ff
c0b632390722193902b8ffdeb619390722323902b8ffdeb6323907222339
02b8ffde400b2339070e1439070e133902b8fff4b61339070e1d3902b8ff
f4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b012b2b2b2b2b2b00
2b2b2b2b59331133011133112301119cc70302bac7fcfe05bafb81047ffa
460480fb8000>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/A 36 def
/D 39 def
/N 49 def
end
PBAAAA+ARIAL /Encoding get
dup 65 /A put
dup 68 /D put
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
2{/.notdef}rp /G 4{/.notdef}rp /L /M /N /.notdef /P 
/.notdef /R /.notdef /T 27{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
141.09 112.46 mo
(P)sh
147.76 112.46 mo
(A)sh
154.43 112.46 mo
(N)sh
161.652 112.46 mo
(D)sh
247.8 169.152 mo
(R)sh
255.02 169.152 mo
(5)sh
268.36 173.238 mo
282.533 173.238 li
282.533 159.065 li
268.36 159.065 li
cp
1 1 1 rgb
ef
.72 lw
268.36 173.238 mo
282.533 173.238 li
282.533 159.065 li
268.36 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
282.54 173.238 mo
296.713 173.238 li
296.713 159.065 li
282.54 159.065 li
cp
1 1 1 rgb
ef
282.54 173.238 mo
296.713 173.238 li
296.713 159.065 li
282.54 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
296.71 173.238 mo
310.883 173.238 li
310.883 159.065 li
296.71 159.065 li
cp
1 1 1 rgb
ef
296.71 173.238 mo
310.883 173.238 li
310.883 159.065 li
296.71 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
310.88 173.238 mo
325.053 173.238 li
325.053 159.065 li
310.88 159.065 li
cp
1 1 1 rgb
ef
310.88 173.238 mo
325.053 173.238 li
325.053 159.065 li
310.88 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
325.06 173.238 mo
339.233 173.238 li
339.233 159.065 li
325.06 159.065 li
cp
1 1 1 rgb
ef
325.06 173.238 mo
339.233 173.238 li
339.233 159.065 li
325.06 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
339.23 173.238 mo
353.403 173.238 li
353.403 159.065 li
339.23 159.065 li
cp
gsave
grestore
<<
/ID /229064380.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9qug(e9)Z#n]Kl#QZat6312:Dus[RKZ##/"=sUe
!1;[E\,\\oAq69_am]V(!b5(Tm'%-=PQGCE5QU.#.ZgqH#J^HR>p'+ISH&^+lQ#7u;?DB9.kr/;55uaY
5YLSH#)dT0h$<[.!C$9c^*E)sCR>AqZ8)[%<PT76!6PFGkNa5mV^"W/!#/QK!N81I'+i81+om6aU_=5n
\j6P!A=jD\`5!r+=Ym/6C(\Q>B(&QL7Vat%K@1!-`RGh:g<N`laD0:Io`_)hZ`0lNPr5+pPeB2g&dcJ9
Ed=_f+<Z<P7sP?B8+)Rf!1ps'Z18%>!0_1A:o[b$'1)\"'YhQeF9%C+j:Eb+"V_M'_#s<@5f!K^&2-<M
>S%B2!;$gF5m>mB*%mlb!!%fYUd#F/E@aj)L]G@)AO-K9&37Q-1_:;9!@/3f!$Sk&Q\6ZHOr;>K'T+*V
&g:j0LeT.b*f%Rn*q[Q>!qm1U"8oG*J-GkVB?M\#^A!:,Qp;6U;Gh$7K@=L%=bT0>gGFW#ct#(k,!Z9>
bHpsD_,(@7"T0hC!5UrpPQ\ep:^c(Z^eb4="F&3k2#m^Y'JMrgYZ1Jcoi(0>5/#G3"[=Y=oYj$i9N't,
/c\-:h^lt!iEnCBo&R6nbOb[c&MVX4PTU($J2df<@"==>Omq9N%gh1arXSup\,Zm<b4krC!['`P>Q>m\
CjU`2`R"Sc+p\e^&\nu"!!B5M+aICO.3;V6+R323P6m@pRY%1=/uaAZYW`&B+9Zd!VpT2@K]4/R!"K#H
:]_PEi"9%HL..1`.pq4\A/5::3$!YP-*TR\K81R5FG#F!=q@/(jp#US"i_0X"6Qb%O(H>(3(/D]87#P2
3WXI=>_!<7?"]fGDHqgF^ckee=n\X%O?.mn9kXY&`(ag\kVsf>j'HMnKB"T0=Weg~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
339.23 173.238 mo
353.403 173.238 li
353.403 159.065 li
339.23 159.065 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
353.4 173.238 mo
367.573 173.238 li
367.573 159.065 li
353.4 159.065 li
cp
gsave
grestore
<<
/ID /229064576.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOPi)U!&Y`'!,02j@Kq?/;Rp>F!#1L;V.@CDaN-na
(r<D+gk%[3S5,K8GtcA?0T]//P@4PCFZc9iBsX_3hGHb;b\:!S,!hPkSq&3H$M<SE\Z=:-e;D3ra?4F`
.MaIm_FS43>-2qHQ+5btYZ,-Lq9T.dBt[.+Q+=/nPC^;91"2lVit7-7h^-k6UPe/AZ0,YU!ugY3oY]'f
5f)4%(q^TB_6:dMf\\5V%SHfNVPO8!gJO2nK&AMc@5EUDVXsrpFL9qE2Y//&hi#O:Ed;JU"R%8IP]-=Q
,JrcMaQ4Ak$p6)E`RC/23o"XD/?lm[,o<-oPo'd2Q,%'h:kjK$X=6/A+K@,HU8.Dd^$7<X0*H5.#m3Hq
Go.S'TP/$E_C:S&o0/2XdMa(h+K4M:BlQE6])Vr?2jf?Z88:SSJm'9;0O`T?7*\rf*C?Tu5lRWL6#uS<
,C0'%`pu5qQCF%B9,Tl:!KO0P;:8PN9$rT0$lGtjkq8pR!mrO<BbEs/7k-4W0YX<,^g\ZWUVR4-$#kGV
8Z.,mmnF*l!W~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
353.4 173.238 mo
367.573 173.238 li
367.573 159.065 li
353.4 159.065 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
367.58 173.238 mo
381.753 173.238 li
381.753 159.065 li
367.58 159.065 li
cp
1 1 1 rgb
ef
367.58 173.238 mo
381.753 173.238 li
381.753 159.065 li
367.58 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
381.75 173.238 mo
395.923 173.238 li
395.923 159.065 li
381.75 159.065 li
cp
1 1 1 rgb
ef
381.75 173.238 mo
395.923 173.238 li
395.923 159.065 li
381.75 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
395.92 173.238 mo
410.093 173.238 li
410.093 159.065 li
395.92 159.065 li
cp
1 1 1 rgb
ef
395.92 173.238 mo
410.093 173.238 li
410.093 159.065 li
395.92 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
410.1 173.238 mo
424.273 173.238 li
424.273 159.065 li
410.1 159.065 li
cp
1 1 1 rgb
ef
410.1 173.238 mo
424.273 173.238 li
424.273 159.065 li
410.1 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
424.27 173.238 mo
438.443 173.238 li
438.443 159.065 li
424.27 159.065 li
cp
gsave
grestore
<<
/ID /229064772.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
424.27 173.238 mo
438.443 173.238 li
438.443 159.065 li
424.27 159.065 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
438.44 173.238 mo
452.613 173.238 li
452.613 159.065 li
438.44 159.065 li
cp
gsave
grestore
<<
/ID /229064968.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
438.44 173.238 mo
452.613 173.238 li
452.613 159.065 li
438.44 159.065 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
452.61 173.238 mo
466.783 173.238 li
466.783 159.065 li
452.61 159.065 li
cp
1 1 1 rgb
ef
452.61 173.238 mo
466.783 173.238 li
466.783 159.065 li
452.61 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
466.79 173.238 mo
480.963 173.238 li
480.963 159.065 li
466.79 159.065 li
cp
1 1 1 rgb
ef
466.79 173.238 mo
480.963 173.238 li
480.963 159.065 li
466.79 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
480.96 173.238 mo
495.133 173.238 li
495.133 159.065 li
480.96 159.065 li
cp
1 1 1 rgb
ef
480.96 173.238 mo
495.133 173.238 li
495.133 159.065 li
480.96 159.065 li
cp
.137531 .0973373 .0856268 rgb
@
154.98 144.891 mo
154.98 187.411 li
268.36 187.411 li
@
381.75 173.238 mo
381.75 187.411 li
268.36 187.411 li
@
296.71 187.411 mo
296.71 206.848 li
@
299.95 206.038 mo
296.71 215.758 li
293.47 206.038 li
299.95 206.038 li
cp
ef
285.87 207.585 mo
307.54 207.585 li
307.54 195.585 li
285.87 195.585 li
cp
1 1 1 rgb
ef
.137531 .0973373 .0856268 rgb
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 8158 50 <00020063ffe705dd05d4000e001b00ca40501a0f01141014141b171b1b04
041004140b170b1b04a917b60ec60e031717181b02201d40114f134f1740
1a58055809571055115f135a175f18561a571b8b17990210191e0303121e
0b09152620070107b8ffe8b41010025507b8ffeeb40d0d025507b8fff0b4
0c0c025507b8ffeab40b0b065507b8fff4b40d0d065507b8fffa40210c0c
0655071a801d011d0f2620000100060b0b065500060c0c065500191c635c
182b4e10f42b2b5d4ded4e105df62b2b2b2b2b2b5d4ded003fed3fed3130
015d71005d5d5d7113100021320412151402042322240237100033320011
3402262322006301880136cb0146abb4feb6bfcffebaa8c8011dd7db011b
79e991cefed702ca016d019dc2fea5dcdffea0b5c8015abefef7fecf0134
011bb3010b93fee5>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/O 50 def
end
PBAAAA+ARIAL /Encoding get
dup 79 /O put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
2{/.notdef}rp /G 4{/.notdef}rp /L /M /N /O /P 
/.notdef /R /.notdef /T 27{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
285.87 204.585 mo
(P)sh
292.54 204.585 mo
(O)sh
300.318 204.585 mo
(R)sh
176.93 225.844 mo
(R)sh
184.15 225.844 mo
(6)sh
197.5 229.931 mo
211.673 229.931 li
211.673 215.758 li
197.5 215.758 li
cp
gsave
grestore
<<
/ID /229065164.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO?b!M!':5p#kW^;,`g#W?jSBa;'qROAFdi9c=J`!
c6a2"FOG@sT$?G^C!@-16))^SPPQ"DO%Z9I.5]bT:9@Eq<,5J@jZ^@IYZ%V\>0V62=0:*@<kBZTcXjLW
5TkhI"Al<B"$d[,!)X:]#(UWZ4=1jNK"[9U(R0^VEJVJf',R/s<sD"7AoRRI(h)%u1>u%3r6C?`SB,Fu
NJpsu)C3hjnl\[N'/?o<Ci_W(#)c'=dr$qQXj-@fBuU,c)/YrMKmVSA?m#~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
197.5 229.931 mo
211.673 229.931 li
211.673 215.758 li
197.5 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
211.67 229.931 mo
225.843 229.931 li
225.843 215.758 li
211.67 215.758 li
cp
1 1 1 rgb
ef
211.67 229.931 mo
225.843 229.931 li
225.843 215.758 li
211.67 215.758 li
cp
.137531 .0973373 .0856268 rgb
@
225.84 229.931 mo
240.013 229.931 li
240.013 215.758 li
225.84 215.758 li
cp
gsave
grestore
<<
/ID /229065360.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOc`+C#,3@#eKg-:,B?>k$:t5\=:HNKb`_Td]h'kf
9AG^"6C(h>Qr"3U"@W>_5\*\2PQ4%=>>CPb%$^ra5tOm`<#h/'6CqCfQrjc_"@[l5?t<@ZQ2j7G>Afg5
%$q)c_+ATV>TB(16Ddt9Qs^>i"@`D`J7N%-QiKIQ>E5(]%%.5f5tR/KA/q!;6EXOaQtQns"@dr6TO_^U
RK,[[>HX?0%%@Ah_+CkAC`JoE6FL+4QuEJ("@iJa^gqC(S,bme>L&UX%%RMk5tTF6F<$hO6G?[\R!9%2
"@n#7i+.'PScD*o>OIl+%%dYm_+F-,HlSaY6H34/-4g1!!"fbC8H9V>!Qb<B"d3'p-4k^L#S@W!8I-1F
J]S/u"e&X+-4p7"&.oKT8IuaO!QblR"eo3;-4tdM(_I@28Ji<WJ]S`0"fbcK-5$=#+;#4e8K\l`!QcGb
"gV>[-5(m62$&4=!@n-_bd%T!5[:]MPQ5s-0?YQ\]EX=G0ZjTZ!H;QRb`^<j3.M4k.lE!Q!*M?YP/p`e
PQ5Cu1JS)R%mJ<p^`H5N1dnW3"$sF97a<3ba8pekV'6,i,GchZ91+666@krKQqIId*9&.]^stCE#SdK`
$5s'r)E8&^bhs$6'pW>f!MTU`!DX9Sci=34+:&@6Q7X-jc#iltJ:I~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
225.84 229.931 mo
240.013 229.931 li
240.013 215.758 li
225.84 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
240.02 229.931 mo
254.193 229.931 li
254.193 215.758 li
240.02 215.758 li
cp
gsave
grestore
<<
/ID /229065556.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOiRPF5Y&Tq.2"*uP*%Dn5u7u<%jFE_VFbKdenm@9
:1mM9jS"!dTMT5eaV.PV:luB$96_C:6q[SO_ic6dLg)&UaJJFtN//&t!!X]H8GMlV!Yi_3Q3gN<4^]=]
UZ6"R#U'9t9u>='b_WGH#tTo9,s?e;EWA$`EUec7!@X#i1%K^fI*Z3+!!.*iN-o7^4^nP]kmVuW+tH3?
):CBn>p;@]A)^,cPQ3q1%jXR?!F$/E"A#(F#n\@L2Uu7r1%m/S_cF]g5S$Kf`kd:gRNtB@&mdu3`*d*6
HNE^E,&c*O\;smB:QD,>!7CFlLkd0^@QuUI^XMP35-OSQOU'*Oq>`"L*!?6S%[(ubWfR>_"hF,)b+b\)
1'EX_juU:nX:PdWgn[En^]?/%'Ft^!n:VSi6pfm$7AN=$G$m3n"E9Je?i^9LO/WbhO,So,dZI'KpdZST
8od*8ac2b)!'3g><f``l&_<(8WR66I[`/H=eL]nYJMM`h6Nnlg&ir4,J,~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
240.02 229.931 mo
254.193 229.931 li
254.193 215.758 li
240.02 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
254.19 229.931 mo
268.363 229.931 li
268.363 215.758 li
254.19 215.758 li
cp
gsave
grestore
<<
/ID /229065752.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOMSL`#/2.8^hNi^p,@LJ;Ro[kNZSQb"(P..S1=1j
KGcNOA=?@HQ6R6q$'`kT3%Qg1$&>UFI4:g]KTnKUc>,?tZ6s&1`/[J<W)QHH3?\u$1]TCj;hY9Q4X$]S
kOfAecmkXl])krH_9gu.Y$>]85QfH67B=]9%-[k']n<m5)&,]N*8WZ'N^9@tI=hh#Qdp#<K*+"sGen$q
L!:)P/C;B=7iIkf7BdK=?F4>;iC<kg!BUSpJ21XS/2eJ%(f"VGKMsoON2@8&,i!JsS;bH$)3eAm,g-r+
q1<UZ2kW#LdRF9"n.1e7IR"GF^t<3ISiU.PZ7E4:%%mTfk,s7ZrW\nob237dODGo%(4ZF)(`7h/ehSq3
J1S>LJ9f':*>%]S$3Ce9g:ROhX=jg/!eDu:)?egOQ9L0.o)6.pF8YD4TE)bE%=eLf5S6R1GY/?oChfUK
#32$c8eQto2AI?JM(1LL=Khc*JUeG-NkuX/>R"XTSi`&j'Zi.*!ZB2f$3D3^0[93Jk;>r=N:f?[PO/64
ap87~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
254.19 229.931 mo
268.363 229.931 li
268.363 215.758 li
254.19 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
268.36 229.931 mo
282.533 229.931 li
282.533 215.758 li
268.36 215.758 li
cp
gsave
grestore
<<
/ID /228397980.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
268.36 229.931 mo
282.533 229.931 li
282.533 215.758 li
268.36 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
282.54 229.931 mo
296.713 229.931 li
296.713 215.758 li
282.54 215.758 li
cp
gsave
grestore
<<
/ID /228398176.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNPU\fq;ohh!3?uO<+-]B/;N_ju>U0:L5R*Wq!(/I@
,:907_ZFRHS-,WeBu%`C-_(sN@6)0<L)ld/W+-^_#)3YY1og/&*=OY^Ib1IuE"of<3#Pja!/\M^eSLWc
X]:4??IU'e*\BaI_TpXLS29P#)8JcJ0":l`QuE6NA0Js&J-'Opic&;F%He%fc"@k$S2]tl3P`uJ0#1/<
)L99BVlU$H$eiBqi75'%*Hcnc_@p$(S1QX_h-efQpXW:j6!u7UPQ2Wn5SlZd)l8]DoRbPE+%f`m<-5J\
-*KqU12$E\%\Ab<O4"tB"lO*6?>rI3>3?&Bc6Tpt[],A8r.IYX)#V(hOYm!JBous(JgnNnr.56kY5Grj
!TO$5M8DH^L>Y*u#c:Gn!>?13,"Al6kShVX7L8Wn)+="j9I3(l";1\B&^(h)Ti%>4)TZq%>p;i';4M8M
UD.b]-u#cY+=<fbV(3k1"KsE#/sN1]bOZ.@QP^-Ab*o`%$=%A>F&2lq+B*C?Iujp+"Zi;G!XCh_PHk*p
+&gDd3]2Qo$FLEQ<3Q@"FDSUYTHF~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
282.54 229.931 mo
296.713 229.931 li
296.713 215.758 li
282.54 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
296.71 229.931 mo
310.883 229.931 li
310.883 215.758 li
296.71 215.758 li
cp
gsave
grestore
<<
/ID /228398372.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO8o92+310T3;WVFTMU`c1+2!&GQ93G:F8sAHu][Z
'9tA1&2:I1#.,2(&5loQXI_s.P!fBM?j'k/(Q$)72#u@"e*1m,a8njX3&=&)f7F`@%@,AgL4Kd([r8c]
DGif3^];:l3m<o^,"fkf#Io=[N!Lg[&A^%6Ftj!JolH8<"p!$PRjJZ.g14bN_8sc-2NgeUUFF:.F98-^
G*?=%;.u'sjB8/[CdVD=<l;HT=F.G^Oj^$kJ,fr7'Wm-@@Tm1;9d0`u`+-S^pR?0];YKY=_[XTkh"NnG
N[AL36BNB@IYujPc>*R`mQar_Z9@jOaG=2]GmfS-XTP>COWF]t4pI+"#f6e2J2((/N+48@!#:+L\m6(?
Op'#5TE'fLUW+Eq)$-T834#8L)VQAEM:t(_K`D42+rSF!p8smDo%]BAJ7qIZXlWsI*3KH2?88Pp4Ecjt
LYs:e&4JF!3"Q*iQE@ZJ?iUB4Vm,#M"#BCCE2MVT9JHsPoZf51#oO"CblU-1?2u2MniTX'&4eh(`Ba2L
JYF=+S%QnujGsS^\`u,51f3$H%=uTHIMcTD)ZQr@W/<G@Uu@+@!N"`O5RF(`fg;Nh))WqI-jT~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
296.71 229.931 mo
310.883 229.931 li
310.883 215.758 li
296.71 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
310.88 229.931 mo
325.053 229.931 li
325.053 215.758 li
310.88 215.758 li
cp
1 1 1 rgb
ef
310.88 229.931 mo
325.053 229.931 li
325.053 215.758 li
310.88 215.758 li
cp
.137531 .0973373 .0856268 rgb
@
325.06 229.931 mo
339.233 229.931 li
339.233 215.758 li
325.06 215.758 li
cp
gsave
grestore
<<
/ID /228398568.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@WnZn9g6j-NG7om19mA#poi`KRhDXTE#i0
)C=uhXIq9s!4;j2@sijKq?DRVit[--4Jl8L,SPeUp-bj.;JOWor;MC<O9ZkLRBQ[)!#>Q3NMiJ4$!@JR
(C5=XnDp)D\f\50-,<+Q!`n@sM^6uup3qNf_s8ju"c\QT#m:oeaNPq`'F83c:o%&l2&h>tEgA6p$9+DE
Ua!(6:gYXW8L<p=i6jtP%LsaOT^]m80+n^`!oW^.=<eZ;idmbUc8-K&LSBDmBR":m4tMo%kRu4'NtWG`
KY`@+%Bb3g!Lj4>!nj!V(Q$LQK*20b&81P=_tM/M5)"T3P8o/\fDuh?Z.>m"@%k0"Q[jA""W\/9'FFmQ
Qlp1YJH0Hh]FVdp:B@1T,8)7T\>D:s6R]f0M'I"h1:"cq!(m5X@=Ba[./<jj#:ZB`$p`i&X:Tm_6pgPM
M3r6^P<`g(1QA.Xgc@nLUhDOm,8eQ'$%N$.!!.VML_MHPZ9:&F!s1Y?)K2Fu_P>.ZA.jHeJ^Ts?+96s=
PlNO9*i$jP8,sK\U$Dn-`Bgr#Sd,N(16rU0#QRM<m(Z2[J,uSKSr`Os$j\R18>h$95ns$feB,6u,S1SN
:'FS59O_$/!'lSXLXKe%+4HrH#U@:'2-V>7jb$4W5QF>*=U>Zh>bfk`!<?$^!(gap+9~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
325.06 229.931 mo
339.233 229.931 li
339.233 215.758 li
325.06 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
339.23 229.931 mo
353.403 229.931 li
353.403 215.758 li
339.23 215.758 li
cp
1 1 1 rgb
ef
339.23 229.931 mo
353.403 229.931 li
353.403 215.758 li
339.23 215.758 li
cp
.137531 .0973373 .0856268 rgb
@
353.4 229.931 mo
367.573 229.931 li
367.573 215.758 li
353.4 215.758 li
cp
gsave
grestore
<<
/ID /228398764.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeNs-)5cr)Qj3<kNHA'"7h`!n+Odf@gh`'+V1
a<T_7Pfs1J)U=!Y!6"/^7Zg7fdY$V`>;)Afk-K?X)!O2R<[8A?/KVP)Urd0*e`Aak/so>0PA.uVBiqC^
W0R5PL6`9t=fiDX>uH^T\5DRY8j1nJ4:Y"8o(/Vn`X8^"BZ!J>"<=*=<pk3(ef's5Vh9!!r/J]]FNW_:
1&N)56(YAq0mYBo6J85sXYRC;hRZ'!Yt?+-.n5S:I\T%]Tumj[]=tLg0&sb8.uUg`dDh/;n:>+\kB&ZT
Wu:N0U#U<2h9!\mjj2h#(S6&IVf-JHDBmllL;EZ]3pe0[jM*;,i7Bjfi&p<[Nl2-m#)9.*2iM-[_XTMd
j;.ARc9cV66;3U"YFm!~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
353.4 229.931 mo
367.573 229.931 li
367.573 215.758 li
353.4 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
367.58 229.931 mo
381.753 229.931 li
381.753 215.758 li
367.58 215.758 li
cp
gsave
grestore
<<
/ID /228398960.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO]fh-F;:>mB2Mga<d'b!`FjI!i`:@?Su$))=mf=<
'q_=8nQGim!>WC]E$8Hn<s+`("`RmT)HR30_PM5!>W>dpQ,CR[q-60d&XC;REB.9#<tpq=7<)a@>#uLT
`T;)j>[gbPQ,^d_\Qj)T*0nQ5ES4TA=!!XI`Gt]YJ6*nZaJEoC>`r/7(!1$-EEo):-l'lNEg^12="9KX
`H&e"Z<&Umb@P_Y>eF,kQ-9DQ$!bDM0pTtZF"pqJ=#C`<`H/Rpn5h`;cUDpF>lIei(!n7K&R>`F6P[uP
F@faP=%/D%Klh$7**5XqdNs"7>qB&MQ.#nYa^$_RP@D'^/!H^<4=cX?\OJ*6U:ErJPiB5M/!XSS==]Z2
\QgYMijiSMQ=@C</!e&_DC_%T\T03e6Fh7iQ\)bo/!o8+J1I"=\WeV4U:HdERKC$s/"2(#W[jOT\ZdTR
K"8ZIS3jd+/"D4%at'#,\^W.#K"9ScS`73</"Rrqj=?g2\`bQ8U:KV@T-Ci</"^:]qCDUJ^^)IkU;.6i
!<U%L/-/)Q(+]Lg^`k<26GOp!!eS3;/-<](/h@)+^bdSE@_arS"/<Rn/-FnI5V*%I^dp!ZU;0MT"TlJ;
/-SAU<\+E+^fi8m_SBJ/"p2SL/-\GVAh4.\^hbP,!l/h-#GT"a/-nSXL+EU^^ksZK_SD0_#m.o*/.$pD
ROec^^n*(a!l1N]$:;P*/..!EW[nM%BX)uD6GU)^$_kGL/.;Tq_CQ+I^s"><ikWnl%3iU=/.I3Hg+3]M
^u-aR,/E7j%V!6;/.SDimOSkm_"9/g@_hai&&Q-]/._m!!\=nW_$hk+ikZ0W&L,%*/.mKM)CuK;_&b-?
!l637&q[qR//'5D1b9;L_*BOcU;9MS']Qr*//:Lf<\+u[_-AN+ik]"R(*^S*//D^2BIjpn_/(Y=!l8n.
(Lk4*//P%sIOl<;_1F3T6G\C-(kTS]//[B_O=V7n_3?Jg@_nKa)8a4]//gjkW[o(*_6,=.6G^)])kt0_
/0#kM`%2m;_9+;L!l<A;*MUC*/04l/i[c-;_<*9iK#-e)*ob$*/0?(Pr%*A-a:p1X,02SlKL3aN/;4/H
?n@%!aCZuY!m$$GLr.6-/;h<cYUk]AaN?&n_T;9`6f;)XTk$LoOVAR!OBE3)A4qW=0G[(W=VN#i<!AC^
(.D>.(-uJ8"d*a>7G(`ZiFHF%Od$VNE*4)&A8DF3\e[dI=WE!'F+ob'(.XHh*arT+"d/3g8(^uF_.Wq)
TF_lh86Q$[BF"d7+r5]j=p"e=%L&Lf(4d<+"JKKD"e\s5JT+ct+_Vo#TR%B)n6-)@BHi/'OqrXo=pdQ/
.Bh+*(dcSY$UM!K#10^s!ml#s6/4$s^pG59d"Mio+>!l'Zm.oaOUFKH/I=\L,sotK+<U~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
367.58 229.931 mo
381.753 229.931 li
381.753 215.758 li
367.58 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
381.75 229.931 mo
395.923 229.931 li
395.923 215.758 li
381.75 215.758 li
cp
gsave
grestore
<<
/ID /228399156.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNO9.QeO@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GPk!<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
381.75 229.931 mo
395.923 229.931 li
395.923 215.758 li
381.75 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
395.92 229.931 mo
410.093 229.931 li
410.093 215.758 li
395.92 215.758 li
cp
gsave
grestore
<<
/ID /228399352.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOl2<1#.4PC:][(9of'G^7R1\7[Nc!L!A@r-!c9lc
*!jt!'Tu0=9KYlHTqQL817Crc$;'$-7jX@g_#OdPifQ*p9q)jMm6XWGJ!e'U8i4P#=KK+BdfL_HBE2f^
V$oaaZl517ea##$@kBc;T2]/-qA@Sk8$h'f!CBKNT0G9=*Rm!C^<K6_SI##W%&#ogQ5)&4S(g5J@KsFG
=jqYH8gK_do+dN[DZO0'TG"9/Bi?U0]so<aI"Hnq]F&*<p52[6LL%t:&pqTL0usJ[>/@Os_C3,-(am.-
dD@DH8lg,?=J2=-8W"i#(.LX.>/^36N]k/gXbk+PV@Ql(p:]eHiq\?6bO5;CE(\&03D^?p!^1K^a9W^R
>"JT;OM\qR684RB$9eu^a:93/!#kc&Dqn2)#nR3J&LR#n%20TjbZ=uoOikU]4].qiA-&S>'d4pA6JMPF
!.9_p#DiF0)+b6@pCb2Q6)b:n&E!R@/49KS!6Gj!N@N%CI%)?5Mm3",8J/87$O.7!G8@!<Wl,061)/dL
+<U~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
395.92 229.931 mo
410.093 229.931 li
410.093 215.758 li
395.92 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
410.1 229.931 mo
424.273 229.931 li
424.273 215.758 li
410.1 215.758 li
cp
1 1 1 rgb
ef
410.1 229.931 mo
424.273 229.931 li
424.273 215.758 li
410.1 215.758 li
cp
.137531 .0973373 .0856268 rgb
@
27.418 229.931 mo
41.591 229.931 li
41.591 215.758 li
27.418 215.758 li
cp
gsave
grestore
<<
/ID /228399548.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOQ8[:!k9"S+LpJJ5n=!%5Qi@2!!3-6^obraIV1;8
]"kJa/$o9b!k0La<qQ:i0;*gq+BQ&fn-+2i!MEMM($#ODe:=T-.a_c1'sS#f3p6UDAXEgTWW3$\$EO4:
/`6\\'g;UO?%<.fcklaJ!j5R4:se8]5m79f5QUWp49/Oc<F?'78,rbm$o(j<aQ-bP;CmR`!QbHi"]te'
ZL@jq$Dc3f29DDJ_d&S_lZGHlK#e-Hc[eu0+K0*s\UV+K9/)0#4WmD!_AqPZp^3@a!"U2P<@bQ_9.YT[
Z<7;HhuFPk#/<D3!1WT\?gRhC;.^=EN^hl5.a,+b5HaN]h>e(->Z/%jn5bUZKpZ`tUWENZ=bHehScY'$
PG[BN0Yq?*Ja"k?%036*ZLpW.>Mr6VV!<C1Oanl!!g1V]c:tpi3!rUbV+S*kJ>Eea;6!.^J-(g$QqeBO
+=Mi7&5LD!."EEB&ip!p-jqR+5Ub%^M'\6G&?t**]Dr>G44lB?"5M0jbhslL'*+de!$-TbBE0@)1<f"`
'!qMs^^LC6((,gAfldFV:@RNMM@UC:O:*A%A/diX.'ctXT`B+>J>6ZufhqeuPm',kq.'^p2$.SI!#(Q$
R0lBE#SiPG!2KT0?nHPh"99k$=bIqM1LYl#[5'KQ6#^ApJ?mOm"VB0h@4KnRof*Ug!`04NdQkZ8E!A\a
8fRi+E!eOS!,r:Z%Nk`m!*o\G!8:bu:!s#K6\@%@?/PcMHR8jVp,ZS;L$VN@GLc(@-<IKiHTd_"a+1Jr
IJ+3/D0>5.?J*=+,CfqO$8aW!!012b/L[%hMP)B!!fHMmNKJac6Au"Y%`enWLs=M&f*\/T&Yd)[/ECC*
VRD!T-X&%VNG,G;LRuh\/(L;r3\9*[f=M65"G!6Q$8DOU)RT/FJ1/".!!(XY/V"40kpGhM7d#9&iWHJ1
!28[\^jlQc#kqFF)i2e++=MI9KP1V~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
27.418 229.931 mo
41.591 229.931 li
41.591 215.758 li
27.418 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
69.938 229.931 mo
84.111 229.931 li
84.111 215.758 li
69.938 215.758 li
cp
1 1 1 rgb
ef
69.938 229.931 mo
84.111 229.931 li
84.111 215.758 li
69.938 215.758 li
cp
.137531 .0973373 .0856268 rgb
@
112.46 229.931 mo
126.633 229.931 li
126.633 215.758 li
112.46 215.758 li
cp
gsave
grestore
<<
/ID /228399744.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 231.75 ]ct
[32 0 0 -32 0 231.75 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3VsfoL'H(#D0bLOGIEs)%D/7i=P4;)CZCh7H1SNOMCk+!!iQS5Qm3[!0`DX&u#@-=ucRV#TsG@8-(UM
J0uiI"S-Uo8q8<4!!'Y67%t%('WM"rSN0\I^^@jd.9lmIJ1EF@L]dh\(f`g9FMIt$3EjptTGiNiF9"j:
,o86P!p`IT8!EZ2b"MhbPKC\7$lEd]L6tXN+:MKP!KM+!1,G4-"_IbXKKpEJTE@80:B4o<,e*qLQck$^
)Q`6a!^m$)(VgKN2bU!A&unnua9-c`<<,!?Rr`WF!)%>bEdI\5n,Od,-Clhm"04G$DSQFih7_/921ReF
T)I7+8,t"84l?bjO,h7;!$<\*:]^:>!!3,$htI``#1*ILF#`LnODKFm0ED>)-gILG!$u[*\!N-'l?=dO
\OlihC!8&jQcg#+&-)_,h$UnG;H3[n!:rU?J1HN:r5=^?6i]^@JY(nb+9[#n2+Er7Ql+`h*+Z1e^]aRd
TEL_^^M/3l!2aIt1]U/5BkdW@C*XAY*C(%A'*(WaQ2nTgJ-&IG'4RD*J.mNj+1UB>!BVa+BE:6rTJCOX
)2*$l,6/ig#]n6$>)<M!hut&`V^4S:<$spLE`@Q'_MBcD,mXNI.A[Re;(_%S7K?EQ+Jg;;huS?1(_iuj
5l_XnAcjgI3!^1s?o!uHWNrH&"sq%oBj+0F$0n3d^]:,bJ.Bp+"TSZr!]g;s_pC/h(?1g"$NLj0;LejD
bAmn3"k*PU^]iF'J/<hH6\$;h!IH1<o"Ln-TEY1^N8PAdFoXHYbk)ER"quLe6s'JF@>\jI'*&lDRPTI2
_pBES(uguBJ/JI9kdi4ao6lN>&orMQ~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
112.46 229.931 mo
126.633 229.931 li
126.633 215.758 li
112.46 215.758 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 382 14 <0001007200ed043a04b6000b0038401f006e0902f908036e050706096e0a
040af905016e3f024f020202190c575a182b4e10f45d4df43ced3c10e43c
3c002ff43cfd3cf431302511213521113311211521110201fe71018faa01
8ffe71ed0192a8018ffe71a8fe6e>PBAAAA+ARIAL AddT42Char 
1 486 16 <0001004101b8026a026d0003002c401970027003024d014d020201230002
1a05700001001904708d182b4e10e45d10e6002f4ded31300071015d1335
211541022901b8b5b500>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/plus 14 def
/hyphen 16 def
end
PBAAAA+ARIAL /Encoding get
dup 43 /plus put
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFQ+ARIAL*1 
[43{/.notdef}rp /plus /.notdef /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight /nine 7{/.notdef}rp 
/A /B /C /D 2{/.notdef}rp /G 4{/.notdef}rp /L 
/M /N /O /P /.notdef /R /.notdef /T 
27{/.notdef}rp /p /q 142{/.notdef}rp]
LEHNFQ+ARIAL nf
LEHNFQ+ARIAL*1 [12.0002 0 0 -12.0002 0 0 ]msf
47.595 226.444 mo
(-)sh
51.591 226.444 mo
(1)sh
92.112 226.444 mo
(0)sh
133.02 226.444 mo
(+)sh
140.03 226.444 mo
(1)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
[/Pattern [/228637692.0 /228637888.0 /228638084.0 /228638280.0 /228638476.0 
/228638672.0 /228638868.0 /228639064.0 /228639260.0 /228639456.0 
/228477828.0 /228478024.0 /228478220.0 /228478416.0 /228478612.0 
/228478808.0 /228479004.0 /228479200.0 /228479396.0 /228479592.0 ]]
] del_res
/LEHNFQ+ARIAL*1 uf
/LEHNFQ+ARIAL uf
/PBAAAA+ARIAL uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
