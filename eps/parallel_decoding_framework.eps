%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Fig.13.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: memorize
%%CreationDate: 2015/4/2, 14:14:25
%%BoundingBox: 0 0 385 356
%%HiResBoundingBox: 0 0 384.7500 355.5000
%%CropBox: 0 0 384.7500 355.5000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1244 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/"
   pdf:Producer="Microsoft® Office Visio® 2007"
   pdf:Keywords=""
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Office Visio® 2007"
   xmp:CreateDate="2015-04-02T14:13:52+08:00"
   xmp:ModifyDate="2015-04-02T14:13:52+08:00"
   xmpMM:DocumentID="uuid:19521AFC-45BE-484E-93BF-6C99664D7CF8"
   xmpMM:InstanceID="uuid:19521AFC-45BE-484E-93BF-6C99664D7CF8"
   pdfaid:part="1"
   pdfaid:conformance="B">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>memorize</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 1 
/Lookup <~
iSibdo'u~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -355.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 355.5 li
384.75 355.5 li
384.75 0 li
cp
clp
[1 0 0 1 0 0 ]ct
99.933 297.878 mo
184.972 297.878 li
184.972 99.448 li
99.933 99.448 li
cp
false sop
/1 
[/DeviceRGB] /CSA add_res
.901642 .903157 .904266 rgb
ef
.72 lw
1 lc
1 lj
10 ml
[5.04 3.6 ] 0 dsh
true sadj
99.933 297.878 mo
184.972 297.878 li
184.972 99.448 li
99.933 99.448 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ARIAL
Type42DictBegin
[<00010000000c000c000c000c4f532f32103163b7000000cc000000606376
7420a11cd7eb0000012c000006546670676dcc79599a000007800000066e
676c7966e3a4e9b9000062b80000391a68656164e43a05f100000df00000
00366868656112330d3400000e2800000024686d7478bae50dcc00000e4c
0000238c6c6f6361db9aecb3000031d800001ab86d61787012710c270000
4c90000000206e616d65564def3a00004cb000000a487072657025d64dbf
000056f800000bbe67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
064005d3fe510133073e01b2400001ffffff0000042605bb000000200004
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
4043555441403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
00000005333349f03bbf5f0f3cf5081b080000000000a2e3272a00000000
cf756123faaffd671000080c00000009000100000000000000010000073e
fe4e00431000faaffa7a100000010000000000000000000000000000046b
06000100000000000239000002390000023900b002d7005e000000000000
000000000000000000000000000000000000000000000000000000000000
0000000002aa004100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000556fffd0556
009605c700660000000000000000000000000000000005c700a4023900bf
00000000000000000000000006aa009800000000063900630556009e0000
0000000000000556005c04e3003000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000473004a0473008604000050047300460473004b0239001304730042
0473008701c70088000000000400008801c7008306aa0087047300870473
0044047300870000000002aa00850400003f023900240473008300000000
000000000400000f04000021000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000023900c60000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000001a8ffba000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
051bffba0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000100ffba0800ffba1000ffba00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000015001500150015006b00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00e200e200e200e200e200e200e200e2
00e200e200e200e200e200e200e200e200e200e200e200e201b702830320
032003200320032003a3041504150415041505aa05aa064406c706c706c7
081c087308730873087308730873087308730873087308730873087309dc
0acb0ba50c7f0d5e0e080f000fd2104c104c11981216132e141114f215d4
15d41657182b18bd198c198c198c1a9e1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca1bca
1bca1bca1bca1bca1bca1bca1bca1bca1bca1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b
1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c0b1c251c251c251c251c251c251c25
1c251c251c251c251c251c251c251c251c251c251c251c251c251c251c25
1c251c251c251c251c251c251c251c251c251c251c251c251c251c251c25
1c251c251c251c251c251c251c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f
1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c3f1c591c731c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d000100000d5b003800030000000000020010002f
0056000004ac0bbe000000000000003a02be0000000300000000006a0000
0000000300000001000a006a0000000300000002000e00ea000000030000
0003005e00cc0000000300000004000a006a00000003000000050018012a
0000000300000006000e014200000003000000070062006a000000030000
00080030000e0000000300000009008a0150000000030000000d02aa01da
0001000000000000003504840001000000000001000504b9000100000000
0002000704f90001000000000003002f04ea0001000000000004000504b9
0001000000000005000c0519000100000000000600070525000100000000
0007003104b900010000000000080018048b00010000000000090045052c
000100000000000d015505710003000104030002000c06c6000300010405
0002001006d60003000104060002000c06e60003000104070002001006f2
0003000104080002001007020003000104090000006a0000000300010409
0001000a006a0003000104090002000e00ea0003000104090003005e00cc
0003000104090004000a006a00030001040900050018012a000300010409
0006000e014200030001040900070062006a00030001040900080030000e
0003000104090009008a0150000300010409000d02aa01da00030001040a
0002000c06c600030001040b00020010071200030001040c0002000c06c6
00030001040e0002000c07220003000104100002000e0732000300010413
0002001207400003000104140002000c06c60003000104150002001006c6
0003000104160002000c06c60003000104190002000e075200030001041b
00020010072200030001041d0002000c06c600030001041f0002000c06c6
0003000104240002000e076000030001042a0002000e076e00030001042d
0002000e077c00030001080a0002000c06c60003000108160002000c06c6
000300010c0a0002000c06c6000300010c0c0002000c06c600a900200032
00300031003400200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e0041007200690061006c00200069007300200061
002000740072006100640065006d00610072006b0020006f006600200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e002e004d006f006e006f00740079
00700065003a0041007200690061006c00200052006500670075006c0061
0072003a00560065007200730069006f006e00200035002e003100360020
0028004d006900630072006f0073006f0066007400290056006500720073
0069006f006e00200035002e003200300041007200690061006c004d0054
004d006f006e006f00740079007000650020005400790070006500200044
0072006100770069006e00670020004f006600660069006300650020002d
00200052006f00620069006e0020004e006900630068006f006c00610073
002c0020005000610074007200690063006900610020005300610075006e
0064006500720073002000310039003800320059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
00200074006f00200064006900730070006c0061007900200061006e0064
0020007000720069006e007400200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
00200074006800650020006c006900630065006e00730065002000740065
0072006d007300200066006f00720020007400680065002000700072006f
006400750063007400200069006e00200077006800690063006800200074
00680069007300200066006f006e007400200069007300200069006e0063
006c0075006400650064002e00200059006f00750020006d006100790020
006f006e006c0079002000280069002900200065006d0062006500640020
007400680069007300200066006f006e007400200069006e00200063006f
006e00740065006e00740020006100730020007000650072006d00690074
007400650064002000620079002000740068006500200065006d00620065
006400640069006e00670020007200650073007400720069006300740069
006f006e007300200069006e0063006c007500640065006400200069006e
0020007400680069007300200066006f006e0074003b00200061006e0064
00200028006900690029002000740065006d0070006f0072006100720069
006c007900200064006f0077006e006c006f006100640020007400680069
007300200066006f006e007400200074006f002000610020007000720069
006e0074006500720020006f00720020006f00740068006500720020006f
00750074007000750074002000640065007600690063006500200074006f
002000680065006c00700020007000720069006e007400200063006f006e
00740065006e0074002ea9203230313420546865204d6f6e6f7479706520
436f72706f726174696f6e2e20416c6c2052696768747320526573657276
65642e417269616c20697320612074726164656d61726b206f6620546865
204d6f6e6f7479706520436f72706f726174696f6e2e4d6f6e6f74797065
3a417269616c20526567756c61723a56657273696f6e20352e313620284d
6963726f736f66742956657273696f6e20352e3230417269616c4d544d6f
6e6f7479706520547970652044726177696e67204f6666696365202d2052
6f62696e204e6963686f6c61732c205061747269636961205361756e6465
72732031393832596f75206d617920757365207468697320666f6e742074
6f20646973706c617920616e64207072696e7420636f6e74656e74206173
207065726d697474656420627920746865206c6963656e7365207465726d
7320666f72207468652070726f6475637420696e20776869636820746869
7320666f6e7420697320696e636c756465642e20596f75206d6179206f6e
6c792028692920656d626564207468697320666f6e7420696e20636f6e74
656e74206173207065726d69747465642062792074686520656d62656464
696e67207265737472696374696f6e7320696e636c7564656420696e2074
68697320666f6e743b20616e6420286969292074656d706f726172696c79
20646f776e6c6f6164207468697320666f6e7420746f2061207072696e74
6572206f72206f74686572206f75747075742064657669636520746f2068
656c70207072696e7420636f6e74656e742e004e006f0072006d0061006c
006e0079006f00620079010d0065006a006e00e9006e006f0072006d0061
006c005300740061006e0064006100720064039a03b103bd03bf03bd03b9
03ba03ac004e006f0072006d00610061006c0069004e006f0072006d00e1
006c006e0065004e006f0072006d0061006c0065005300740061006e0064
0061006100720064041e0431044b0447043d044b0439004e006100760061
0064006e006f0074006801b001a10300006e00670041007200720075006e
00740061b900540328b326181fd0bc032900e0032900020329b22b1d1fb9
0327031db23b1f40b80323b31215320f412d03200001002f032000010020
0320006f032000af032000bf03200004005f031e00010010031e007f031e
0080031e00af031e00bf031e00d0031e00060000031e0010031e0020031e
006f031e009f031e00e0031e0006031d031cb2201f1041270319007f0319
0002000f031700ef031700ff03170003001f0317002f0317004f0317005f
0317008f0317009f03170006000f0317005f0317006f0317007f031700bf
031700f00317000600400317b2923340b80317b28b3340b80317b36a6c32
40b80317b2613340b80317b35c5d3240b80317b357593240b80317b34d51
3240b80317b344493240b80317b23a3340b80317b331343240b80317b32e
423240b80317b3272c3240b80317b312253280b80317b30a0d32c0411603
1600d00316000200700316000102c4000f0101001f00a0031500b0031500
020306000f0101001f00400312b32426329fbf0304000103020301006400
1fffc00301b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002
edb30e11329f414a02e200af02e200bf02e2000302e202e202e102e1007f
02e00001001002e0003f02e0009f02e000bf02e000cf02e000ef02e00006
02e002e002df02df02de02de000f02dd002f02dd003f02dd005f02dd009f
02dd00bf02dd00ef02dd000702dd02dd001002dc0001000002dc00010010
02dc003f02dc000202dc02dc001002db000102db02db000f02da000102da
02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ff
c002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b
1f40bb0322003e00330322b225311fb80318b23c691fb802e3b3202b1fa0
413002d400b002d40002000002d4001002d4002002d4005002d4006002d4
007002d40006006002d6007002d6008002d6009002d600a002d600b002d6
0006000002d6001002d6002002ca002002cc002002d6003002d6004002d6
005002d6000802d0b2202b1fb802cfb226421f411602ce02c70017001f02
cd02c80017001f02cc02c60017001f02cb02c50017001f02c902c5001e00
1f02ca02c6b21e1f00410b02c6000002c7001002c6001002c7002f02c500
0502c1b324121fff411102bf0001001f02bf002f02bf003f02bf004f02bf
005f02bf008f02bf000602bf0222b2641f12410b02bb00ca0800001f02b2
00e90800001f02a600a20800406a1f4026434932402043493240263a3d32
40203a3d329f209f26024026969932402096993240268e923240208e9232
4026848c324020848c3240267a813240207a813240266c763240206c7632
4026646a324020646a3240265a5f3240205a5f3240264f543240204f5432
b8029eb724271f374f6b0120410f02770030027700400277005002770004
02770277027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180
bc0180520180a201806501807e01808101803c01805e01802b01801c0180
1e0180400180bb0138000100800140b40180400180bb0138000100800139
40180180ca0180ad018073018026018025018024018020013740b80221b2
493340b80221b2453340b80221b341423240b80221b33d3e320f410f0221
003f0221007f0221000300bf022100cf022100ff0221000300400221b320
223240b80221b3191e3240b80222b32a3f3240b80221b32e3a326f414802
c3007f02c3008f02c300df02c30004002f02c3006002c300cf02c3000300
0f02c3003f02c3005f02c300c002c300ef02c300ff02c3000600df022200
01008f02220001000f0222002f0222003f0222005f0222007f022200ef02
22000600bf022100ef02210002006f0221007f022100af02210003002f02
21003f0221004f0221000302c302c30222022202210221401d101c102b10
48038f1c010f1e014f1eff1e023700161600000012110811b8010db6f70d
f8f70d00094109028e028f001d001f0290028f001d001f028fb2f91d1fb8
0198b226bb1f41150197001e0401001f013900260125001f013800730401
001f0135001c0801001f0134001c02ab001f0132b21c561fb8010fb2262c
1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401
b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b8
0201b61fb91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d
1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f48
1c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401
b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b2
1f5537b80168402c07960758074f07360732072c0721071f071d071b0714
08120810080e080c080a080808060804080208000814b8ffe0402b000001
001406100000010006040000010004100000010010020000010002000000
01000002010802004a00b013034b024b5342014bb0c063004b6220b0f653
23b8010a515ab005234201b0124b004b5442b0382b4bb807ff52b0372b4b
b007505b58b101018e59b0382bb00288b801005458b801ffb101018e851b
b0124358b900010111858d1bb900010128858d5959001816763f183f123e
113946443e113946443e113946443e113946443e11394660443e11394660
442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b
5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b901f201f04544b9
01f101f045445958b9033e01f2455258b901f2033e4459594bb801565320
5c58b9002001f14544b9002601f145445958b9081e0020455258b9002008
1e4459594bb8019a53205c58b9002501f24544b9002401f245445958b909
090025455258b9002509094459594bb8040153205c58b173244544b12424
45445958b917200073455258b9007317204459594bb8040153205c58b1ca
254544b1252545445958b9168000ca455258b900ca16804459594bb03e53
205c58b11c1c4544b11e1c45445958b9011a001c455258b9001c011a4459
594bb05653205c58b11c1c4544b12f1c45445958b90189001c455258b900
1c01894459594bb8030153205c58b11c1c4544b11c1c45445958b90de000
1c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b
59635c456523456023456560234560b08b766818b080622020b163594565
234520b003266062636820b003266165b059236544b063234420b13b5c45
65234520b003266062636820b003266165b05c236544b03b2344b1005c45
5458b15c406544b23b403b4523614459b347503437456523456023456560
234560b089766818b080622020b134504565234520b003266062636820b0
03266165b050236544b034234420b147374565234520b003266062636820
b003266165b037236544b0472344b10037455458b137406544b247404745
23614459004b5342014b5058b108004259435c58b108004259b3020b0a12
4358601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59
b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e23
42b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b011
2342002b7475737500184569444569444569447373737374757374752b2b
2b2b74752b2b2b2b2b737373737373737373737373737373737373737373
737373732b2b2b45b0406144737400004bb02a534bb03f515a58b1070745
b040604459004bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e
534bb03a515a58b1030345b040604459004bb02e534bb03c515a58b10909
45b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b
2b2b2b435c58b9008002bbb301401e017400735903b01e4b5402b0124b54
5ab012435c5a58ba009f02220001007359002b7473012b01732b2b2b2b2b
2b2b2b737373732b2b2b2b2b002b2b2b2b2b2b0045694473456944734569
44737475456944734569444569444569447374456944456944732b2b2b2b
2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b7374
757374752b2b2b742b2b000000>
[14619 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> PBAAAA+ARIAL AddT42Char 
1 4152 55 <00010030000004ba05ba00070089400d05021e04030200080706050409b8
0273b320040104b80101b7062001022f030103b80101b5010120000100b8
ffe8400b1010025500080f0f025500b8fff2b40c0c025500b8ffe2b40d0d
025500b8fffcb40c0c065500b8fffeb40d0d065500b80273b308b699182b
10f62b2b2b2b2b2b5d3c10f45d3c10fde45de6103c103c003f3f3cfd3c31
3021112135211521110213fe1d048afe1b050dadadfaf300>PBAAAA+ARIAL AddT42Char 
1 4326 68 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>PBAAAA+ARIAL AddT42Char 
1 5526 70 <00010050ffe803ed043e001a015ab1020243545840340e7f0f010f0b0140
0050007000030004121c0b07181c040b010e1507080e0e0255070c0d0d02
55070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10c45d
3210c45d3231301b4047090c011f1c4313431753135317601360179b029b
039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509b60a
b50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa407930004000
5000600070009000a000e000f00009000f0f0b000004121c0b07181c040b
1c0f010f240e080d0d06550e221b000100240b2b1f010100010101400b0b
065501401010065501480c0c0655011a0d0d065501491c1524cf07011f07
3f0702070e0b0b0655070a1010065507120c0c065507311b34c4182b10f6
2b2b2b5d71ed10f62b2b2b2b5d724b53234b515a58b90001ffc03859ed72
f42bed72003fed3fed12392f11392f105de4105de43130005d71015d7159
011706062322001134123633321617072626232206151416333236033cb1
1defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf011d01
0aac010281afa11b6b6cc3d3d6c28200>PBAAAA+ARIAL AddT42Char 
1 5962 71 <00020046ffe803df05ba0011001d015540a40a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b1833010025110f2510
10d011011011401160118011041f400b0b02551f400d0d02551112101002
5511b8fff440110f0f025511060e0e025511180d0d025511b8fff2400b0b
0b0655110e1010065511b8ffeeb40c0c065511b8fff840420d0d06551174
1224bf07cf07df07ff07041f073f074f0703071e0b0b025507180c0c0255
071e0d0d0255070c0b0b0655070c0d0d0655071a0c0c065507191e345018
2b4e10f42b2b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d713c10ed
10fd3ce4003fed3f3c3fed3f3c11391112393130005d01715d0071213506
232226263534123633321617113311011416333236353426232206033865
c47fd5756ad48360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a
5141020efa460212cccac1c6daccc400>PBAAAA+ARIAL AddT42Char 
1 6398 72 <0002004bffe8041e043e0015001d015340171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc04010101006551001010195131c040b17400db8ffdcb40d0d02550d
b8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d
1a1fb8ffc0b32526341fb8ffc040411e2334301f011f163310240740242a
341f073f074f070307200b0b025507180c0c0255071c0d0d0255070e0b0b
0655071c0c0c065507160d0d065507191e3437182b4e10f42b2b2b2b2b2b
5d2b4dfde44e10712b2bf6712b2b2b2b4ded003fedfd5d2b2be43fed1239
2f5d3cfd713c011112393912393130015d005d2b2b2b0171720117060623
22001110003332001114072116163332360121262726232206035eba2cee
b9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897ca90156
17a3b4011f0103010c0128fedefef91020afba680195864368a6>PBAAAA+ARIAL AddT42Char 
1 7680 75 <00010087000003e805ba00140161b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe0403a1719341708110c1114030501
000f1c0507140b0a0c250940333634ff0901c0090116400b0b0255164010
10025509281010025509140e0e025509b8ffec40110d0d025509040c0c02
55091a0b0b025509b8fff6400b0b0b065509141010065509b8fff8400b0d
0d0655090a0f0f065509b8fff6b60c0c0655094e16b8ffc04017343634b0
16f016027016a016b016ff1604160214250100b8ffc04010333634f00001
00002000d000e0000400b8fffab41010025500b8fffa40170e0e02550004
0c0c025500080b0b025500040b0b065500b8fffa40160f0f065500020c0c
065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b5d712b3cfd
3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed003f3c3fed3f1139
113901123931304379400e060e07250e060c1b010d080f1b01002b012b2b
81002b5d2b012b33113311363332161615112311342623220606151187b4
7ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1877b538e7dfdbb
>PBAAAA+ARIAL AddT42Char 
1 9820 81 <00010087000003e6043e0016017d40130503061302a810b810e303e713f0
03f6130604b8fff0403c0b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e2418401010025518400b0b02550b2810
1002550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02
550bb8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f
0f06550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0
401a343634b018f018027018a018b018c01804180302331516250100b8ff
f6b41111025500b8fffab41010025500b8fffa40170e0e025500040c0c02
55000a0b0b025500040b0b065500b8fffa40110f0f065500020c0c065500
040d0d065500b8ffc04012333634f0000100002000d000e00004004e1710
f65d712b2b2b2b2b2b2b2b2b2b3cfd3cf43c105d712bf65d712b2b2b2b2b
2b2b2b2b2b2b2b2bed3c103c003f3c3f3fed113901123931304379401606
11090a080a070a0306102611060e1b010f0a121b01002b012b2b2a81015d
71002b5d71331133153633321616171615112311342626232206151187a2
75dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e6d4192
ccfdbc00>PBAAAA+ARIAL AddT42Char 
1 10274 82 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>PBAAAA+ARIAL AddT42Char 
1 11176 85 <00010085000002c6043e001100c9403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04010333634f0000100002000
d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c0255
00060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c06
5500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfde4
105df472e4003f3f3fed11393911393901111239390010c9870e7dc43130
005d72015d33113315363633321707262322060706151185a23e693f5b5e
3e42423b5e141e0426a171483aa727473f6072fdd400>PBAAAA+ARIAL AddT42Char 
1 12374 87 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>PBAAAA+ARIAL AddT42Char 
1 13080 91 <0001000f000003f10426001001dcb1020243545840150f010b0604020906
02060d0a000a0f180f0f02550f2f2b003f3f3f3f11173931301bb70f1201
0f22193906b8ffde405019395a0f96049608990e9a0fc005c006c007cb0f
090f4016391a031309150d1a1035013a0b81018e0b082f1257045907590b
580e9701980a980bb702b80cc80bca0ecc10da03d509d10ddb10e50a1212
b10602435458400b0c0012110f180d10065506b8ffe8400e0d1006550f06
00020d000a0a0206003f3c3f3c111239392b2b01111239391b4066060603
0708090901060609050403030b0f0f100e0d0d010f0f0d100b010009020d
0b030c100a060f020f0a10c600c60902102500091400000903020dc60d01
0d250c03140c0c030a090903030206100d0d0c0c000a4f120112490d7e0c
220a0f6106097e400ab8011bb74006500680060306b80243400e20037e02
224f00010049117cc4182b10f65df4ed1a19fd5dfd1a18ed10e510f4ede6
5d003f3c103c103c3f3c103c103c87052e2b5d877dc4872e182b5d7d10c4
00111239390f0f8708c4870e10c408c4870e10c4c408c4070e103c3c083c
59313001435c58b40e181d390bb8ffde400b1d390c221739032217390bb8
ffdeb2213910b8ffc0400a15390122213909401c392b2b2b2b2b2b2b2b59
5d71002b5d2b2b015d5933010133171617363737330101230327010f0184
fe99e1a32e1c2c25b3d7fe91018bddda3afee9022801fef947304233fbfe
0cfdce014a59fe5d>PBAAAA+ARIAL AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/space 3 def
/T 55 def
/a 68 def
/c 70 def
/d 71 def
/e 72 def
/h 75 def
/n 81 def
/o 82 def
/r 85 def
/t 87 def
/x 91 def
end
PBAAAA+ARIAL /Encoding get
dup 32 /space put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 120 /x put
pop
end
%ADOEndSubsetFont
/LEHNFW+ARIAL /PBAAAA+ARIAL findfont ct_VMDictPut
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 51{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c 
/d /e 2{/.notdef}rp /h 5{/.notdef}rp /n /o 2{/.notdef}rp 
/r /.notdef /t 3{/.notdef}rp /x 135{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
109.1 112.45 mo
(T)sh
115.208 112.45 mo
(h)sh
120.77 112.45 mo
(r)sh
124.1 112.45 mo
(e)sh
129.661 112.45 mo
(a)sh
135.223 112.45 mo
(d)sh
140.785 112.45 mo
( )sh
143.563 112.45 mo
(c)sh
148.563 112.45 mo
(o)sh
154.125 112.45 mo
(n)sh
159.686 112.45 mo
(t)sh
162.465 112.45 mo
(e)sh
168.026 112.45 mo
(x)sh
173.027 112.45 mo
(t)sh
114.11 156.15 mo
170.803 156.15 li
170.803 127.804 li
114.11 127.804 li
cp
1 1 1 rgb
ef
.24 lw
[] 0 dsh
114.11 156.15 mo
170.803 156.15 li
170.803 127.804 li
114.11 127.804 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 1600 43 <000100a40000052205ba000b00d8b9000dffc0401a13153404031e090aa0
0ad00a020a0502020b0808050820070706b8ffeeb40f0f025506b8fff240
0b0d0d025506100c0c025506b8ffe040180b0b065506010c0c0655065d80
0d010d020b200120000100b8ffc0400a13153400201010025500b8fff6b4
0f0f025500b8fff6b40d0d025500b8fffa400b0c0c025500080b0b065500
b8fff7b40c0c065500b8fff840160d0d0655005d0c200d01200d500d600d
700d043b59182b5d7110f62b2b2b2b2b2b2b2b5d3cfd3c105df62b2b2b2b
2b3c10fd3c003f3c3f3c395d2f3cfd3c3130012b33113311211133112311
2111a4c202fac2c2fd0605bafda6025afa4602b3fd4d>PBAAAA+ARIAL AddT42Char 
1 3470 54 <0001005cffe704eb05d30030021540276303630473037404042527350339
1c430349074c1d451f44244627530359075c1d572889130e23b8fff2b410
10025524b8fff2b41010025525b8fff2b41010025526b8fff2b410100255
27b8fff2b41010025523b8fff6b40d10025524b8fff6b40d10025525b8ff
f6b40d10025526b8fff6b40d10025527b8fff640460d100255280d262402
24032725360f34234425452f5a20562355256c0b6a0d6b0e66146518790b
7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f9615
1eb10602435458402d2126121b261a09262901260000291a120432312600
650002000d2d791b891b021b25160d2d1e27250125051605b8fff4400c0c
0c0655051e2d091e1e1603003fed3fed2b1112395d1112391112395d1112
395d01111217392fed2fed2fed2fed1b402d25240e0d0b05211c1d1e1b08
070604030206012524220e0d0b06051e1b2d1a400c0c02558f1a011aed16
002d01b8ffc040120c0c02551001200150016001700190010601b801b040
132d1e1e1603051e2d091b261a4a092600290129b8ffeab40e0e025529b8
fff4400d0c0c0255291a32212612012612b8ffecb40e0e025512b8fff6b4
0d0d025512b8fff8400f0c0c02551254200001001931635b182b4e10f45d
4de42b2b2bed10ed4e10f62b2b5d4dedf4ed003fed3fed10fd5d2be410fd
5d2bf4111217391117391112393901121739593130005d712b2b2b2b2b2b
2b2b2b2b015d7113371e0233323636353426272624272626353436363332
161617072626232206151417160417161615140606232224265cb70d5fc8
7d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958
807a86fb9dc7fef39901d7106e8d5742734445672317612b37a3656fc164
69cc810e8b8e815b4f33336b283bb57675cf7374e900>PBAAAA+ARIAL AddT42Char 
1 8100 76 <000200880000013c05ba0003000700cd405e09360b0b02554f099009a009
b009c009df09f0090700091f09700980099f09b009c009df09e009ff090a
1f09010001070402030906037e0100060506040a0607250500049f04a004
b004c004e00406c004f0040200042004d004e0040404b8fff8b410100255
04b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8
ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e0847
50182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed0111123939
111239393130015d72712b133533150311331188b4b4b404ebcfcffb1504
26fbda00>PBAAAA+ARIAL AddT42Char 
1 9008 79 <000100830000013705ba000300e3b605360b0b025505b8ffc0b337383405
b8ffc0b334353405b8ffc0b330313405b8ffc0b322253405b8ffc0402515
17340f051f059f05df05044f05df05f005031f0570058005ff0504010000
0a0203250100b8ffc0b337383400b8ffc040153335349f0001c000f00002
00002000d000e0000400b8fff8b41010025500b8fffa401d0e0e02550004
0c0c0255000a0b0b025500140b0b065500081010065500b8fffeb40d0d06
5500b8ffffb40c0c065500b8fffc400a0c0c0655004e044750182b10f62b
2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130015d71722b2b2b2b2b
2b3311331183b405bafa4600>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/H 43 def
/S 54 def
/i 76 def
/l 79 def
end
PBAAAA+ARIAL /Encoding get
dup 72 /H put
dup 83 /S put
dup 105 /i put
dup 108 /l put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 10{/.notdef}rp /S /T 12{/.notdef}rp 
/a /.notdef /c /d /e 2{/.notdef}rp /h /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /.notdef 
/t 3{/.notdef}rp /x 135{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
131.61 138.97 mo
(S)sh
138.28 138.97 mo
(l)sh
140.502 138.97 mo
(i)sh
142.723 138.97 mo
(c)sh
147.724 138.97 mo
(e)sh
126.05 150.97 mo
(H)sh
133.272 150.97 mo
(e)sh
138.833 150.97 mo
(a)sh
144.395 150.97 mo
(d)sh
149.956 150.97 mo
(e)sh
155.518 150.97 mo
(r)sh
114.11 198.67 mo
170.803 198.67 li
170.803 156.15 li
114.11 156.15 li
cp
gsave
grestore
/228399548.0 
<<
/ID /228399548.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
"9Kg0"0`q2SPLW_$/G6'!2.`<PU\gCLIe/gl."FH;OL1S<%@R@btbNAWn6OdgC82>>H_22G'bO0bA"Ij
mT/YM[d@nD>45KBjf82t]&%B"42((\LVR>;GT8Uh"c1$*n^uWW;]1M4A2<t^bp3>r!We@6e3GhkVZ8.X
iim)$;6ST&"(DgUi3ZSjW!>DDQIC2gg[98nh>[Fk\D;']Hqn#jL!&:oGW_R17qp96EI(lM+)A(/mdg/0
%Yn,:h"(7=*bYf~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228399548.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
114.11 198.67 mo
170.803 198.67 li
170.803 156.15 li
114.11 156.15 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 452 36 <0002fffd0000055905ba0007000e0167b6010e0f10025502b8fff2b40f10
025502b8fff8b40d0d065502b8fff440590c0c0655090c0c0c0655050c0c
0c06552f10301067086809601088039010c905c606c010f0100b08055901
56025010680bb010f30cf30df30e09040c040d040e030b0a090504040c0d
0e080607070c09050408060c07010000b8fff8400f0c0c02550020070c14
07070c020303b8fff840150c0c02550320040c1404040c091e0505081e06
0306b80270400900080ce94002010202ba010b0001010b40120c20006507
03525004cf04df040390040104b80101400b500cc007df0c03900c010cb8
010140100f07cf07027f0780070207930fd6d7182b10f45d7119f45d71f4
5d7118ed10ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b2b
7d10c4872e182b2b7d10c401111239391139398710c4c40ec4c4870510c4
c40ec4c43130014bb00b534bb01e515a58b4040f030807bafff00000fff8
38383838590172715d2b2b2b2b2b2b230133012303210313210326270607
030233d10258ddabfd9ba1d901f19946221c3305bafa4601bcfe44025a01
96b9778d8b00>PBAAAA+ARIAL AddT42Char 
1 878 37 <00030096000004e905ba0011001d002a0113b90004fff440470b0b065504
044623562366237309840906691a75057009730b8305830b062716090318
272a1e161d090913121e2a2a2929001c1d1e0201021f1e1e110008182606
0c1010025506b8ffe640330f0f025506120d0d025506060c0c025506080b
0b0655060c0c0c065506140d0d0655065425260c1c101002550c0a0d0d02
550cb8fff440150b0b06550c1a2c1d1e200120000100201010025500b8ff
f6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8fffab40c
0c065500b8fff0400a0d0d0655005d2b3b5c182b10f62b2b2b2b2b2b5d3c
fd3c4e10f62b2b2b4dedf42b2b2b2b2b2b2bed003f3cfd3c3f3cfd3c1239
2f3c10fd3c392f1139111239011217393130015d005d2b33112132161615
140607161615140e0223012132373636353426262321112132373e023534
26262321960226a8cb736667858f5780c18cfe93013d81384a4b46829efe
db016d5e26435a3a54958cfead05ba59b9655ea63327bc8067b160310352
1116664d496f29fba0070c386b4652793100>PBAAAA+ARIAL AddT42Char 
1 1286 38 <00010066ffe7057605d3001d00d3b563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc0402d2839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f1726200801080c0b0b06
5508191e635c182b4e10f42b5d4ded4e10f65d4dedf4ed003fed3fed1117
393130012b2b5d5d71005d2b2b0172011706042322240235341224333204
17072626232206021514121633323604b4c23dfec3e5edfed79baf0143c2
dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155b1e0
cb2da092a2feef91bbfee98abc00>PBAAAA+ARIAL AddT42Char 
1 11438 86 <0001003fffe803b1043e00300317407b042214223a094a09442456226522
7c098e098424a613ab2cc2030d09171a1817304b2cd617051b0255020210
32010a185c085c095c0a5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426
b4270f27262427242936245a0a590b64266428742374248024930a9c0c92
28972c9530a40aa90ca327a428b326c5261628b8fff4b40d0d065522b8ff
f4b40d0d065523b8fff4b40d0d065524b8fff4b40d0d065528b8fff4b40c
0c065522b8fff4b40c0c065523b8fff4b40c0c065524b8fff4b40c0c0655
1db8ffde40121e395a0827250c0a041a202615040b2e1d1ab802aa402219
2c0b0b02551f193f194f195f19af19cf19060f191f196f19df19041f198f
190219bd02550015000002aa0001ffc040140b0b025510014001021001d0
0102000110010201b8ffc0b314163401b8ffc040100e113401012e5c1d6c
1d021d1c150704b8fff4b40b0b025504b8ffe6b41010065504b8ffe64013
0f0f0655041c2e0b1f1a011a24194013183432b8ffc0402f0f0f02551918
0f0f025519180d0d025519160c0c025519201010065519200f0f06551910
0c0c065519160d0d065519b8025bb207242ab8ffc0b51c39d02a012ab8ff
e6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06552ab8ffeab60d
0d06552a1a32b8ffc04021272a346032c032023f32803202321001010124
00180d0d025500100d0d06550020b8fff4b40d0d025520b8fff4b4101006
5520b8fff440190f0f065520240f100b0b02550f160c0c02550f200d0d02
550fb8fffa40200f0f02550f0e0c0c06550f0c0d0d06550f22df00013f00
4f00020019313437182b4e10f45d714df42b2b2b2b2b2bed2b2b2b102b2b
ed724e105d712bf62b2b2b2b712b4dedf42b2b2b2b2b2b2b2b2bed72003f
ed2b2b2b3fed7112392f2b2b5d71722be410fd5d71722be4111239111239
0111121739313043794040272d1e2305142c261110121013100306220d20
1b000928071b01052d071b011e14201b00210e231b0022230d0c08290a1b
012827090a062b041b001f101d1b01002b2b103c103c2b103c103c2b012b
2b2b2b2a2b818181002b2b2b2b2b2b2b2b2b5d71015d72715d1337161633
323635342726272e02353436373636333216161707262623220615141716
1716171e02151406062322263fb20f897b7c78352593c6994f41382a9153
7dbd5a11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b726544
3d2318253249814e4779281f2b487b6718525c5237231c1d130a2433417c
5c5a9f57ac00>PBAAAA+ARIAL AddT42Char 
1 12666 88 <00010083ffe803e004260018014fb9001affc0400915173402201316340f
b8fff040331214342b1301240813160c0113160b06000a111c030b003316
251817403336341a401010025517281010025517120e0e025517b8ffec40
0b0d0d025517040c0c025517b8fff4400b0b0b065517141010065517b8ff
f8400b0d0d0655170c0f0f065517b8fff6400d0c0c0655ff1701c0170117
4e1ab8ffc04015343634b01af01a02701aa01ab01aff1a041a0c2509b8ff
c04010333634f0090100092009d009e0090409b8fff8b41010025509b8ff
f840110e0e025509040c0c0255090a0b0b065509b8fff640160f0f065509
020c0c065509020d0d0655094e194750182b10f62b2b2b2b2b2b2b5d712b
ed105d712bf65d712b2b2b2b2b2b2b2b2b2b2b3cfde4003fed3f3f3c3939
0111123931304379401a04100e0d0f0d0206070806080508030610040c1b
000d08111b00002b012b2a2a81005d012b2b2b2135062322262627263511
3311141716163332363635113311033f7cd55ea34f100bb40b116e51518e
3bb49cb4486d4f35730292fdb38d314751538f880239fbda>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/A 36 def
/B 37 def
/C 38 def
/s 86 def
/u 88 def
end
PBAAAA+ARIAL /Encoding get
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 115 /s put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /B /C 4{/.notdef}rp /H 
10{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /d 
/e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n 
/o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x 
135{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
125.23 174.41 mo
(C)sh
132.452 174.41 mo
(A)sh
139.122 174.41 mo
(B)sh
145.792 174.41 mo
(A)sh
152.462 174.41 mo
(C)sh
129.11 186.41 mo
(s)sh
134.11 186.41 mo
(t)sh
136.889 186.41 mo
(a)sh
142.45 186.41 mo
(t)sh
145.229 186.41 mo
(u)sh
150.79 186.41 mo
(s)sh
114.11 255.36 mo
170.803 255.36 li
170.803 198.667 li
114.11 198.667 li
cp
gsave
grestore
/228399744.0 
<<
/ID /228399744.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
!%1#3AF34g*!9hq0E>PM6(uV;6AbpRM)lJNl-lY/!4_s&;nrNnPpU[!XAnD<$LI2\Pd&_h#E(03G!r4]
S"Kq=WpEQ&-NTs^R(O>:!!jDcK7e,rM'01H2PB/(ImL*jZ<(EJliWQqXqGEP:k`:5.0Jm+MC8J,4"_c5
j<CfgO?q(NP+#2f$j\Zi,9'EG+qiq'SJN?3J0a>>"==-VL[r]GJB/<)Fu2]3PXZ*Y%SHfN6V<!eTUlNs
^<^`6h!Y>m?;B+I^ZkFb4hcD1a33oKID10&YE.c95ECHpqnA.*f`42($jQ[H02r_j5;7HRrkS#n%0+2k
<%A$f:rG@!6Z<Gq!^olg4VGM+KIISNYtQqe7$2:3&&lqlB,!i*PX?H[OGnB*8$Q</+@pMe)#PL!~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228399744.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
114.11 255.36 mo
170.803 255.36 li
170.803 198.667 li
114.11 198.667 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 3208 51 <0002009e000004fd05ba000d001800b2402c65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e02010200081226080a0d0d025508100b0b06
5508b8fff4401b0c0c0655081a201a01201a011a180d2001200001002010
10025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c02
55000c0b0b065500b8fffab40c0c065500b8fff0400a0d0d0655005d193b
5c182b10f62b2b2b2b2b2b2b5d3cfd3c4e10715df62b2b2b4ded003f3f3c
fd3c12392f3cfd3c3130015d005d33112132171e02151402212111112132
36353426272623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe
8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>PBAAAA+ARIAL AddT42Char 
1 6844 73 <000100130000028005d30017010d401e1409010f192f193019401970199b
0c9c0da90d081a0d280db019c0190419b8ffc040281a1f341d080d030c0f
1c0a0115022b1413040306000a9f140114ff134004172504000302920101
00b8ffc0b331383400b8ffc0402b1c1f3490000119400f0f025519400d0e
025500141010025500280f0f025500220e0e0255002c0d0d025500b8fff2
400b0c0c025500140b0b065500b8ffeab41010065500b8ffe6b40f0f0655
00b8fffab70c0c065500a31819bc01ba002100f6010a00182b2bf62b2b2b
2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced10eded5d003f3f3c3c3cfd3c
3fed391139313043794014101106090706080602061009121b0011060f1b
012b012b2a8181012b715d00723311233533353437363633321707262322
06151533152311b29f9f131a83764c5c1b38325244cfcf039a8c716b3446
57129d0a4660628cfc66>PBAAAA+ARIAL AddT42Char 
1 7184 74 <00020042fe5103ea043e001e002a016f40600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d403205
1c1c0f0a45221c0c0a16153325330a251818d01701101740176017801704
2c400b0c02552c400d0d025517121010025517b8fff440110f0f02551706
0e0e025517160d0d025517b8ffea400b0b0b065517121010065517b8ffee
b40c0c065517b8fffc404a0d0d065517740f012500221f24bf0fcf0fdf0f
ff0f041f0f3f0f4f0f030f200b0b02550f1a0c0c02550f220d0d02550f1c
0b0b06550f0c0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b
2b2b2b2b2b5d714dedf4ed10fd2b2b2b2b2b2b2b2b2b2b5d713c10fde4f6
3c003fede43fedfd5de43fede43f3c3130015d71005d7117171617163332
363736270623220235341236333217353311140606232226131416333236
35342623220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0
beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880
fc6af8cf78ab032ad1c0bfccc3c6c300>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/P 51 def
/f 73 def
/g 74 def
end
PBAAAA+ARIAL /Encoding get
dup 80 /P put
dup 102 /f put
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /B /C 4{/.notdef}rp /H 
7{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l /.notdef /n /o 2{/.notdef}rp /r /s /t 
/u 2{/.notdef}rp /x 135{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
131.61 212.01 mo
(P)sh
138.28 212.01 mo
(i)sh
140.502 212.01 mo
(x)sh
145.502 212.01 mo
(e)sh
151.064 212.01 mo
(l)sh
153.285 212.01 mo
( )sh
119.11 224.01 mo
(r)sh
122.44 224.01 mo
(e)sh
128.001 224.01 mo
(c)sh
133.002 224.01 mo
(o)sh
138.563 224.01 mo
(n)sh
144.125 224.01 mo
(s)sh
149.125 224.01 mo
(t)sh
151.903 224.01 mo
(r)sh
155.233 224.01 mo
(u)sh
160.795 224.01 mo
(c)sh
124.66 236.01 mo
(t)sh
127.438 236.01 mo
(i)sh
129.66 236.01 mo
(o)sh
135.222 236.01 mo
(n)sh
140.783 236.01 mo
( )sh
143.562 236.01 mo
(a)sh
149.123 236.01 mo
(n)sh
154.685 236.01 mo
(d)sh
160.246 236.01 mo
( )sh
126.33 248.01 mo
(f)sh
129.108 248.01 mo
(i)sh
131.33 248.01 mo
(l)sh
133.552 248.01 mo
(t)sh
136.33 248.01 mo
(e)sh
141.892 248.01 mo
(r)sh
145.222 248.01 mo
(i)sh
147.443 248.01 mo
(n)sh
153.005 248.01 mo
(g)sh
114.11 283.705 mo
170.803 283.705 li
170.803 255.359 li
114.11 255.359 li
cp
ef
114.11 283.705 mo
170.803 283.705 li
170.803 255.359 li
114.11 255.359 li
cp
@
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+ARIAL,Bold Initial
ct_T42Dict begin
-0.625 -0.375 2 1.016
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+ARIAL,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32115d64e3000000cc000000606376
7420fb3ea3da0000012c0000075a6670676d08e8ba2800000888000005d7
676c7966a32030a900006b8000001cc068656164e4841a9600000e600000
003668686561127e0d3400000e9800000024686d74788dc9079900000ebc
0000238c6c6f6361ab1fb28f0000324800001ab86d617870150012340000
4d00000000206e616d65b7affccc00004d2000000c8a70726570f14ae516
000059ac000011d267646972000000000000000000000000000303d402bc
00050008059a05330000011b059a0533000003d1006602120805020b0704
020202020204e0002affc00078430000000900000000544d432000200021
064005d3fe510133073e01b2400001ffffff0000042605ba000000200004
05ba001c05ba001c05a7001c0426001c0000ffe40000ffe40000ffe4fe69
ffe405ba001cfe69ffe402ea0000011d0000011d000000000000000000b2
00ac00d70128012000b301fa001700f8011901310049000400f7000300af
00fd00950014005400960112002400160055004901040119012b008c019b
ff76ffe9003d009200a2ffb70182ffaa0016008f00c600f8001c00de0401
0037004e00550055006500e903e50059ff9a00080087000b003b00520116
006100d600d600f500000093009400be017cfff80004001400820092003c
00410041ffc1fffc002a008c049005d809b5009100bb0106ff63ff69001e
0022008a022bffd6ffdf0026005900a300ac0104012b01c004480021006b
00850098011903c6006b009500a400fe010c025d034305bf000000490056
006e0077008a00aa00ca0112015005d805f0ff7bffe70006001300280061
006900e90135014d02a5040cff3effda005b00b900c801190119011901c0
045b04a7055bfe3fff9dffc2001500b7010a01bc01c10532058efd81ffa1
ffae000c00260031003d004e00560062008300c100c900f100f2027fff7f
00480053007700c5011d01200126012801d60219027e027e03d3002e0041
005d006b0075009f00b000b200ba00bb00bd00d600db00e000e50114011b
014a0162019101f2020c026402cf039b03b403d4040104a9001600230025
002a007400a500b600cc00cd00cf0105012001300150016a016f0197019d
01e002b002ec02f70408048304fb04fd0526fee0fefbff4efff50018001a
004c007a007f009100a300b300b400ce00d500f200f300f6011001380168
01a101b001e001ec02090222024f0270029602a502ad034e039103c10435
0442046b04cd04da0586058b076107fefca6fe93feadfed1ffb7ffd10003
000e00180026004600690081008f00a500bf00d300d500d900dd00e20119
012b0138013b015a015e016801730188019401ad01c501d101ea01f20200
020002000222023b0244024f026f0272027e02820293029402a502cf02cf
02d002da02dd02eb02f5030503220336037103a103b003b803d003e60410
0426042e0431044f045a04ff053205320547055305a805ab05c205f0063c
0664067006e80782078408ccfd2afddefe00fe68feb0feb3ffaa00080059
007a0091009e00a200af00b400bb00ca00cc00ce00d900e000f40114011a
01210127012b01390146014b014d0157015c01650182018701920198019b
01a201ae01c501c501d102070222022b024102530261026502840287028d
02b402b402ba02c902d602d802ed02f503170323032b03310349035a035b
036e03710374037e03840391039103aa03cf03d303e703e803ed04080417
041e0475047a049904a704b404d1054c056d056d05a205bf05c005d105fc
05fc0602061a061c062f066a06a806e2070607360750078907d407f30870
011c012a011a01200000000000000000000000000219000b001e02aa0214
047f01ed0000001d0104000f0091002b01880153011201f3003f03fe0168
010e047f01ed036e03150219041300000000064004b00000027401bb0035
01c5007f06020301000004e000b201dc02e004c3023d00d50160011904a7
036e05ca022100ab0426009002bc02bb014200b4023c0256029c030001e5
01a800e5006b00780094016b017300ab01ed013a017d0137017f00d40216
03530184003cffa202040109014901f0006e031500810464005e00000000
0000000000000000000000000000000000000000000000000000013900dc
00e9fe9e040d047c012b00b80096005900ac00df01a900fa0105ffec0017
0003005500610004008c00a3008500280120005d00d6007f012601190104
016c06cf00b4010600000737063e047a00f000f900e905ba042604420000
ffe7fe69049e04e3ff37ff2d01200105012000a800740068004700f200e5
00d900bd00a800680047005c0048000a0028003200410050005a0064007d
00870091ffb0ff9cff83ff79ff6f00cb012000fa012c01fa01a000d500b8
005c003c00c800c8008f00d9018b00b30047000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000fe6400c000ea01180125013203b003ed0576
059005aa05b405be05cd063100780084009b00cc00e200f4010a01200163
00d100ea00f7010801420019002c00340041003800480058006c025903bd
0043011a007000d30028003700420050005a0064007300780082008c009c
00a500bd00ce00f00110015c00be00d801020117012c016300ea01080041
004b0055005f007300a60109018301b300410064001e002a00eb00fa010e
01380274002c00400082009600b600c000cc00dc00e600f000ff010a0120
012c013b01440156016300f70057006401100136005001b10000ffb60039
004e004403cc00e5002401100042012201a400f0006000e0000e001d0039
05e30102002cfe4eff38026903bd011600ff000e00a00054001b003d0171
0041000f005000fd0015014f0035fe52002c00d3010304b001d200b600c0
00990265ff870377fe6c00cb00a9005c0040047607440000404154403f3e
3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b09051582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845
441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d
2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062
602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c
45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a
45186920b01723448a8a8720b0c05158b0112bb0172344b0177ae41b21b0
177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b0
02855958b00185592d2c20b0032545b019234445b01a23444565234520b0
0325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ff
e0001a45208a54582321b03f1b235961441cb114008a5279b31940201945
208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f432343
0b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b
2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349
b04060b0206320b000525823b002253823b002256538008a63381b212121
212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005
251023208af500b0016023edec2d2c01b005251023208af500b0016123ed
ec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161
0110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a
2d2c352d2c76b8023623701020b802364520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826
b00826b00826b008260f10161345683ab001162d2cb4000100000015b008
26b00826b00826b008260f1016134568653ab001162d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b0035158b00425b00425012046b0106048
2046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b8fff060482046b8fff060
48590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b5323
4b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b212159
2d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c
462346608a8a462320468a608a61b8ff8062232010238ab902a702a78a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b202020243604259b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b2021002436042595959592d00000100000005333371d4
b9945f0f3cf50819080000000000a2e33c1d00000000cf756127fafafcfd
1000082400010009000100000000000000010000073efe4e00431000fafa
fa7a100000010000000000000000000000000000046b0600010000000000
023900000000000002aa00b803cb00700000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000239fffd04730056047300a2047300330473004d000000000000
000004730057000000000473005300000000000000000000000000000000
0000000000000000000000000000000005c700000000000005c700610000
000000000000000000000000000000000000000000000000000000000000
0000000006aa00910000000000000000055600950000000005c700960000
00000000000005c700930000000000000000055600000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000473005504e300540000000000000000000000000000000000000000
0000000000000000000000000000000004e3009100000000000000000000
0000031d0087047300300000000000000000000000000000000000000000
0473000e0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0196ffba0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000004e6ffba00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0100ffba0800ffba1000ffbb000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000036003600360036008d00dd00dd00dd00dd00dd00dd00dd00dd
00dd00dd00dd00dd00dd0108018a01cb029e034a034a034a03e403e404b3
04b304b304b304b304b304b304b304b305700570060d060d060d060d060d
060d060d060d060d060d073707370737079f079f08510851085108c108c1
08c1097f097f097f097f097f097f097f097f097f097f097f0a1d0a950a95
0a950a950a950a950a950a950a950a950b0a0b0a0b0a0b0a0b7c0d1f0d1f
0d1f0d1f0d1f0d1f0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde0dde
0dde0dde0dde0dde0df80df80df80df80df80df80df80df80df80df80df8
0df80df80df80df80df80df80df80df80df80df80df80df80df80df80df8
0df80df80df80df80df80df80df80df80df80df80df80df80df80df80df8
0df80df80e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e120e120e120e120e120e120e120e120e120e120e12
0e120e120e120e120e2c0e460e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e600e600e600e600e600e600e600e600e600e600e600e600e600e600e60
0e60000100000d5b003100030000000000020010002f00550000073c11d2
000000000000005303ea0000000300000000006a00000000000300000001
000a006a0000000300000002000800ea0000000300000003005800cc0000
000300000004001400de0000000300000005001801240000000300000006
0018013c00000003000000070062006a00000003000000080030000e0000
000300000009008a0154000000030000000d02aa01de0001000000000000
003504880001000000000001000504bd0001000000000002000404fd0001
000000000003002c04ee0001000000000004000a04f70001000000000005
000c051a0001000000000006000c05260001000000000007003104bd0001
0000000000080018048f000100000000000900450532000100000000000d
015505770003000104030002000e06d80003000104030004001a06cc0003
000104050002000a06f20003000104050004001606e60003000104060002
000607080003000104060004001206fc00030001040700020008071a0003
0001040700040014070e0003000104080002000c072e0003000104080004
001807220003000104090000006a00000003000104090001000a006a0003
000104090002000800ea0003000104090003005800cc0003000104090004
001400de00030001040900050018012400030001040900060018013c0003
0001040900070062006a00030001040900080030000e0003000104090009
008a0154000300010409000d02aa01de00030001040a0002000e07460003
0001040a0004001a073a00030001040b00020012076000030001040b0004
001e075400030001040c00020008077e00030001040c0004001407720003
0001040e00020010079c00030001040e0004001c07900003000104100002
0012077e0003000104100004001e07720003000104130002000607b80003
000104130004001207ac0003000104140002000e07ca0003000104140004
001a07be0003000104150002001407e40003000104150004002007d80003
000104160002000e08040003000104160004001a07f80003000104190002
0014081e00030001041900040020081200030001041b0002000a083e0003
0001041b00040016083200030001041d00020006071a00030001041d0004
0012070e00030001041f0002000a085400030001041f0004001608480003
000104240002000c086a00030001042400040018085e00030001042a0002
0008088200030001042a00040014087600030001042d0002000a08960003
0001042d00040016088a00030001080a0002000e074600030001080a0004
001a073a0003000108160002000e08040003000108160004001a07f80003
00010c0a0002000e0746000300010c0a0004001a073a000300010c0c0002
0008077e000300010c0c00040014077200a9002000320030003100340020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e0041007200690061006c002000690073002000610020007400720061
00640065006d00610072006b0020006f006600200054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e002e004d006f006e006f0074007900700065003a0041
007200690061006c00200042006f006c0064003a00560065007200730069
006f006e00200035002e0031003600200028004d006900630072006f0073
006f00660074002900560065007200730069006f006e00200035002e0032
00300041007200690061006c002d0042006f006c0064004d0054004d006f
006e006f0074007900700065002000540079007000650020004400720061
00770069006e00670020004f006600660069006300650020002d00200052
006f00620069006e0020004e006900630068006f006c00610073002c0020
005000610074007200690063006900610020005300610075006e00640065
00720073002000310039003800320059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f00200064006900730070006c0061007900200061006e006400200070
00720069006e007400200063006f006e00740065006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
006800650020006c006900630065006e007300650020007400650072006d
007300200066006f00720020007400680065002000700072006f00640075
0063007400200069006e0020007700680069006300680020007400680069
007300200066006f006e007400200069007300200069006e0063006c0075
006400650064002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002ea9203230313420546865204d6f6e6f7479706520436f7270
6f726174696f6e2e20416c6c205269676874732052657365727665642e41
7269616c20697320612074726164656d61726b206f6620546865204d6f6e
6f7479706520436f72706f726174696f6e2e4d6f6e6f747970653a417269
616c20426f6c643a56657273696f6e20352e313620284d6963726f736f66
742956657273696f6e20352e3230417269616c2d426f6c644d544d6f6e6f
7479706520547970652044726177696e67204f6666696365202d20526f62
696e204e6963686f6c61732c205061747269636961205361756e64657273
2031393832596f75206d617920757365207468697320666f6e7420746f20
646973706c617920616e64207072696e7420636f6e74656e742061732070
65726d697474656420627920746865206c6963656e7365207465726d7320
666f72207468652070726f6475637420696e207768696368207468697320
666f6e7420697320696e636c756465642e20596f75206d6179206f6e6c79
2028692920656d626564207468697320666f6e7420696e20636f6e74656e
74206173207065726d69747465642062792074686520656d62656464696e
67207265737472696374696f6e7320696e636c7564656420696e20746869
7320666f6e743b20616e6420286969292074656d706f726172696c792064
6f776e6c6f6164207468697320666f6e7420746f2061207072696e746572
206f72206f74686572206f75747075742064657669636520746f2068656c
70207072696e7420636f6e74656e742e0041007200690061006c0020004e
0065006700720065007400610041007200690061006c002000740075010d
006e00e90041007200690061006c00200066006500640041007200690061
006c002000460065007400740041007200690061006c0020038803bd03c4
03bf03bd03b10041007200690061006c0020004e00650067007200690074
00610041007200690061006c0020004c0069006800610076006f00690074
00750041007200690061006c002000470072006100730073006500740074
006f0041007200690061006c0020004600e9006c006b00f6007600e90072
0041007200690061006c00200056006500740041007200690061006c0020
00480061006c00760066006500740041007200690061006c00200050006f
00670072007500620069006f006e00790041007200690061006c0020004e
00650067007200690074006f0041007200690061006c0020041f043e043b
0443043604380440043d044b04390041007200690061006c002000540075
010d006e00e90041007200690061006c0020004b0061006c0131006e0041
007200690061006c0020004b007200650070006b006f0041007200690061
006c0020011100e20323006d0041007200690061006c0020004c006f0064
006900610000b15480410d03ac00af03ac0002001003ac002003ac00a003
ac0003004003acb3070d3240b803acb312143240b803acb2162b32b9ffc0
03acb23a3340b803acb32d943280bc03ab005f0033ffc003abb2553340b8
03abb340443240b803abb3333b3240b803abb32f313240b803abb2083340
b803abb30714321f411a03ab002f03ab0002000f03ab002f03ab004f03ab
008f03ab009f03ab00bf03ab0006001003ab00df03ab00ff03ab000303a8
03a2b2461f40b803a5b208330f411403a50001004003a500cf03a500ff03
a50003002003a500af03a500ef03a500ff03a50004ffc003a3b3090c3240
b803a3b208330f411b03a30001000f03a3001003a3008003a300af03a300
cf03a30005006f03a3009f03a300ff03a30003009f03a200af03a2000203
a203a1b2101f10410a039e007f039e0002039a000f0101001fffc00398b3
10143240b80399b30f1332404110039500500395000200b0034d00c0034d
0002006f0391007f03910002ffc0034bb22d3132b9ffc0034bb30a0e3210
4110038b0020038b0080038b000300a0038b00010020038b0040038b0002
ffc0038bb313163240b80383b20f1132b9ffc0037bb2303432b9ffc0037b
b3101832504114037800010365036e0023001f037e036e001e001f036303
6e001d001f03620364000d001fffc00340b30f1032804110033f0001033f
03150029001f034103160032001f0344031a001b001fffc00375b20e1132
b9ffc00375b2282a32410a034303180032001f030f030d0034001f030803
07b2321f20bb0340000100400388b3090b3240b80388b2101532bd038503
070014001f03800307b2171f0fbd030a002f030a0002ffc00354b3090d32
90410c035400a003540002001f036e0001009f036e00010040036eb2090b
3241110345031c0016001f036b031d0015001f0346031e0015001f03a703
a10046001f039db3261c1fc0bb0393000100400392b3090d3240b8033eb2
083340b8033eb30d0e32c04109033e000100b0038e00c0038e0002ffc003
90b326383200412603280030032800020020037f0030037f00020010038a
0030038a0050038a006f038a007f038a009f038a00060000038900300389
0002002f037a0070037700900377009f037a0004ffc00315b20f1032b9ff
c00315b2242832b903190318b2321f10bb031a0001ffc0031ab3090e3240
b80318b2121332b9ffc00318b30c0e323fbd0373004f0373000200400374
b31718326fbb032a00010040032cb3181b3240b80370b2090c32bd031703
160032001fffc00316b20e1132bd031c031e0016001f031d031eb2151fb0
411f031e0001000f031f000102ca02d00015001f02d302d5000d001f02cf
02d0000d001f02cb02d0000d001f02cd02d0000d001f02ce02d0000d001f
ffc002d0b3090c3240b802d2b3090c32e0411c02e50001005f02dd009f02
e5000202bb02c30030001f02da02b80032001f02d902b9003f001f02d802
b80064001f02b902b80033001f02bab221c81fb802b8b321c81f40b8039b
b20d1632b9ffc002c3b22b2f32b9ffc002c3b21f2532b9ffc002c3b2171b
32b9ffc002c3b2121632412502c202c1001c001f02d702c10024001f02c1
02c00022001f02bf02c00018001f02c0027400c8001f02b50235003b001f
02b40235003b001f02c402bc001e001f02b702b60038001f02b3b20ec81f
b802b0b207c81fb802afb206c81fb802aeb200c81fb802afb2502f1fbc02
ae02ab001a001f02adb2261a1fb802a8b326241f0fbb0235000102a50274
b21d1f12410a02a1015801f4001f02a000d801f4001f001202a2b237c81f
b80290b2bc201fb9029002904018374025402d40a6033025302d30a60320
25202d203720a6204110028e0005009f028b0001028b028b003700200289
003002890040028900900289b20437b041fd027400c00274000200800274
00a002740002006002740070027400020000027400100274000200800274
00f002740002003f0285004f028500020090027e0090027f009002800090
028100040090027a0090027b0090027c0090027d00040090027400900275
0090027700030070027e0070027f007002800070028100040070027a0070
027b0070027c0070027d000400700274007002750070027700030060027e
0060027f006002800060028100040060027a0060027b0060027c0060027d
000400600274006002750060027700030050027e0050027f005002800050
028100040050027a0050027b0050027c0050027d00040050027400500275
0050027700030040027e0040027f004002800040028100040040027a0040
027b0040027c0040027d000400400274004002750040027700030030027e
0030027f003002800030028100040030027a0030027b0030027c0030027d
000400300274003002750030027700030020027e0020027f002002800020
028100040020027a0020027b0020027c0020027d00040020027400200275
0020027700030010027e0010027f001002800010028100040010027a0010
027b0010027c0010027d0004001002740010027500100277000300e0027e
00e0027f00e0028000e00281000400e0027a00e0027b00e0027c00e0027d
000400e0027400e0027500e00277b103d041c5027e00d0027f00d0028000
d00281000400d0027a00d0027b00d0027c00d0027d000400d0027400d002
7500d0027700030030027400400274000200c0027e00c0027f00c0028000
c00281000400c0027a00c0027b00c0027c00c0027d000400c0027400c002
7500c00277000300b0027e00b0027f00b0028000b00281000400b0027a00
b0027b00b0027c00b0027d000400b0027400b0027500b00277000300a002
7e00a0027f00a0028000a00281000400a0027a00a0027b00a0027c00a002
7d000400a0027400a0027500a0027700030090027e0090027f0090028000
90028100040090027a0090027b0090027c0090027d000400900274009002
750090027700030020027e0020027f002002800020028100040020027a00
20027b0020027c0020027d00040020027400200275002002770003028101
580801001f028001290801001f027f00ec0801001f027e00d80801001f02
7d00b10801001f027c00a60801001f027b00820801001f027a0037080100
1f027700260801001f027500200801001f0274001f0801b21f370f411602
35004f0235005f0235006f0235009f023500af023500bf0235000700af02
3500cf023500df023500ff02354022040f074f079f07af07bf0705af07e0
07020f064f069f06af06bf0605af06e0060220411b020d0001005f023500
01008f02350001007f023500ef02350002002f0235003f02350002003f02
34004f0234000202350235023402344011ed20ef2a01cf2a01bf2a01af2a
018f2a01410902470104001e001f022000370201001f0158400c263e1fd8
263e1f3726273e1fb8028eb6ec171fb226361fb801bcb226361fb8012940
2b26361fec26361fb126361fa626361f8226361f3726361f3226361f2d26
361f2526361f1f26361f37262a1fb801584022263e1fd8263e1fbc263e1f
27263e1f21263e1f20263e1f3700161600000012110840b9020d01a6b3c5
0d0009b801bcb227281fb801bbb227301fb801b8b2274f1fb801b7b22762
1f410901b600270101001f01b5002002ab001f01afb21fe41fb801adb21f
e41fb801acb21fbb1fb801a8b21f341fb8015db2272e1fb8015bb227cd1f
410d0155001f0401001f0154001f0401001f0153001f0201001f0152b21f
561fb80151b21f291fb8012bb227261f410d012a00270125001f01290158
00e4001f0125001f0401001f0124b21fe41fb80123b21f3b1fb80122b21f
391f410d010800270801001f0106002d0101001f0105001f0101001f0103
b31fbb1fefb901580401400b1fed1f931fec1fe41feb1fb80201b21fd920
b80401b21fcf25b80156400a1fbc2d9e1fbb1f411fb2410a01580401001f
00b101580401001f00b001580401b51fa625891f9bb901580125b61f991f
2e1f8e2db80801b51f8d1f291f89b901580401b21f8220b802ab40131f80
1f301f742de41f731f4a1f611f521f5d25b802abb21f5c1fbc0801001f00
59015802abb61f5025891f491fb80125b21f4725b80401400b1f461f791f
401f271f3920bc02ab001f003801580401b21f372dbc0125001f00320158
0125b61f2c1f341f2a25b80801b21f5537b80111402a07f00790075b0742
073b07230722071e071d071408120810080e080c080a0808080608040802
08000814b8ffe0402b000001001406100000010006040000010004100000
01001002000001000200000001000002010802004a00b013034b024b5342
014bb0c063004b6220b0f65323b8010a515ab005234201b0124b004b5442
b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b801
005458b801ffb101018e851bb0124358b10100858d1bb900010119858d59
59001816763f183f123e113946443e113946443e113946443e113946443e
11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b
2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb08153205c
58b9020f020d4544b9020e020d45445958b90470020f455258b9020f0470
4459594bb0e453205c58b90020020e4544b90027020e45445958b9084200
20455258b9002008424459594bb8012553205c58b90026020f4544b90021
020f45445958b90a0d0026455258b900260a0d4459594bb8040153205c58
b1d8204544b1202045445958b9250000d8455258b900d825004459594bb8
040153205c58b9015800264544b1262645445958b923200158455258b901
5823204459594bb02953205c58b11f1f4544b12d1f45445958b9010d001f
455258b9001f010d4459594bb02f53205c58b11f1f4544b1251f45445958
b90135001f455258b9001f01354459594bb8030153205c58b11f1f4544b1
1f1f45445958b91428001f455258b9001f14284459592b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b01
b331757ec3456523456023456560234560b08b766818b080622020b17e75
4565234520b003266062636820b003266165b075236544b07e234420b131
c34565234520b003266062636820b003266165b0c3236544b0312344b100
c3455458b1c3406544b23140314523614459b33f3c584145652345602345
6560234560b089766818b080622020b1583c4565234520b0032660626368
20b003266165b03c236544b058234420b13f414565234520b00326606263
6820b003266165b041236544b03f2344b10041455458b141406544b23f40
3f452361445945695342014b5058b108004259435c58b108004259b3020b
0a124358601b2159421610703eb0124358b93b21187e1bba040001a8000b
2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59b0
0e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342
b0112342002b2b2b2b2b2b2b2b00b01243584bb035514bb021535a58b126
2645b040614459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b737373
737345b040614418004569444569447373737473737374737473742b2b2b
2b2b2b2b2b2b2b2b2b007373737373737373737373737373737373737373
737374747474747474747474747474747474747474747475757573747575
75752b7300004bb02a534bb036515a58b1070745b040604459004bb02e53
4bb036515a58b1030345b0406044b1090945b8ffc06044592b4569440174
007373732b4569442b012b435c58400a0006000702a006a00702b9ffc002
74b31a1d326fbd0277007f02770002ffc00277b22f3132b9ffc00277b322
253240b80274b32f353240b80274b3282a3240b80274b21a2132b8ffc0b3
371a1d32b8ffc0b3251a1d32b8ffc040112d1a1d329025902d9037a025a0
2da03706b8ffc0b6a61a1d321fa61fb8028eb22fa60300742b732b2b2b2b
2b2b2b2b742b737459002b2b435c58b9ffc002a1b21c1d32b9ffc002a0b2
1c1d322b2b592b73012b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b73742b2b2b2b2b2b2b2b73732b2b2b2b2b2b732b
732b2b2b742b2b2b73737373732b73732b2b2b732b2b002b2b2b2b737473
2b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b7374752b
2b7373732b2b2b732b737374752b2b7374752b2b7374752b2b2b2b2b2b2b
2b2b2b2b2b74752b000000>
[7361 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 442 18 <0001fffdffe7023b05d300030038401d0001014902031402020302010003
000a01eb021a0503eb001904936c182b4e10f44ded4e10f64ded003f3c3f
3c87052e2b7d10c431300701330103016bd3fe911905ecfa1400>HIBBAA+ARIAL,Bold AddT42Char 
1 788 20 <000100a20000032605c00009005640096b027b028b02030204b80129b35f
050105b8025eb708090501000c0900bb015800020001025d400d0500041f
042004b0040404190aba01a701a000182b4e10f45d3c4df63cfd3c003f3c
3f3cf45ded393130005d212111060735362437330326fee79ad16e010230
e404239045ff24c98600>HIBBAA+ARIAL,Bold AddT42Char 
1 1684 25 <00020057ffe7042a05c00017002300bd403b6a0b750887089719a705a708
a90eaa13b90eb611bd13c011cf130d1505361144107a16b502d210d01407
bb00cf0002000401071812101b201b021bb8ffc0401e1216341ba60f0d1f
212f2102214012163421a63f09014009d009ff090309b8014fb3af010101
b8012140221f042f0402044012163404a6150501d800771ed84f0c010c1a
2518d8121924d3c2182b4e10f44ded4e10f6714dedf4ed003ffd2b71f45d
f65d71ed2b713fed2b7101111239001112395d3130015d005d0105262623
220607363332121514002322001110003332160114163332363534262322
06040ffef00a5443597b10699cb0fbfef8cfdefee2012aeea7dbfda17e51
4e687054517004531e5450a0fd7cfef4d4e1fef00159018901930164bbfc
e989957a8b8f857f>HIBBAA+ARIAL,Bold AddT42Char 
1 1992 27 <00030053ffe6041705c0001800240030010db530081d1f3426b8fff8406c
1d1f34c711c713d705d707047510761484100326002a0c36003b0c46004c
0c6e0463086711681577278727970d9818a40da918a91aa61ea727a62ca9
30b91ab71e17771386138614872704970c010c970001001c2e980c010c2b
099700010025032e401216343f2e4f2e022eba028e001cffc04010161834
701c801c02a01c011c1c061228b8ffc04009121634302840280228b8028e
400d120d3f224f2202224012163422b8028e401a06051fd809772bd84f0f
010f1a3219d8037725d8161931d3c2182b4e10f44dedf4ed4e10f6714ded
f4ed003fed2b5d3ffd5d2b1011392f5d712bed5d2b011112395d1112395d
001112395d395d313001715d00715d2b2b01262635343633321615140607
161615140423222726353436131416333236353426232206031416333236
35342623220601486d63e5d3d1e76a607a7ffefdd7c8859d76b95f4f5060
5f4e51601a775957727459676503172ea160a4d6d6a4669f2a31bc7bcbfe
697cd877c70151545e5f544f5f60fd3d74827d76677d8e00>HIBBAA+ARIAL,Bold AddT42Char 
1 2406 36 <00020000000005bf05ba0007000a0141b90007ffd8400937393406283739
3407b8ffc04009283534064028353407b8ffd84050212734062821273429
002a042a05280a2f0c380037053f0c6a006a02650366056808670ae8030f
4a060102080901030a090904070901012000071400000706090404200506
14050506080a401a1d3e0ab8ffc0400b1a1d340a25020303060409b801bc
400e0607020504040100080c17171a00b80261400b1f0101200130018001
0301b8022440091f0901300980090209ba02240004026140092005010519
0b5e63182b4e10f45d4dfd19f65d71f45d7118fd4e456544e6003f3c3c10
3c3f3c4ded1112392f3cfd2b2b3c87052e2b877dc4872e182b877dc40710
3c3c87c4c4b10602435458b40934090d34002b593130014bb00b534bb01e
515a58b90003fffeb208040abafffe0007fffcb106043838383838590171
5d2b2b2b2b2b2b212103210321012113030305bffebe80fdb679fec6023b
01392acac6014dfeb305bafc8a0220fde000>HIBBAA+ARIAL,Bold AddT42Char 
1 2784 38 <00010061ffe7055e05d3001a00d6404e8609891489169f009806c709d403
d40bf503092509280c280d29142916750575098605080713071717131717
29022a03250507280599059709c903c50b053f014f01020152100001e000
f0000200b8ffc0b311183400b8ffc0b30a0d3400b8015a4017182d04080e
400e12340e4b5f0f014f0f010f401518340fb801284022122d0a030fef0e
5600ef00014f0102011a301c011c1527a007010f071f0730070307b8028c
b31b7e53182b4e10f45d714ded4e105df65d4dedf4ed003ffdf42b5d71e4
2b3ffdf42b2b5d71e45d3130005d015d5d5d010506042320001110002120
171617052626232206111016333236043f011f42fecdecfedcfe88017a01
34010da86432fedb1aa576a3cbc8a076aa021b5bf0e9018f015a016e0195
9f5eb0467284eafefafeeaec9600>HIBBAA+ARIAL,Bold AddT42Char 
1 3098 48 <000100910000061905ba000c0218400b0b032608260b0304030103b8ff80
40091c3a340a203a3b3409b8ffe0b33a3b3409b8ffe040a41c2e340a201c
2e340609080ae309ec0a0404090a0a13021c0410091f0a23022c0420092f
0a6702680465096a0a77027804a409aa0ab509ba0af609fa0a169f049009
9f0ac609c90ad702d804d609d90ae702e804e509ea0a0d7709780a83028c
0483098c0a900207580b65026a046709680a760279040744024b0444094b
0a57085709580a07180a2f0e34023a0434093b0a3f0e0703020c04060909
0a15021a04170907b10602435458401f0204030a09050c070732060e0c32
0000031003020850080d340b50080d3403b8ff80400e0b0d3408400e2734
0b400e273403b8ff9c40100e2734030b08030100040102070a0008003f3c
3c3f3c111217392b2b2b2b2b2b5d012fed10d4ed111217391bb8ff3b402d
030a09200408090932030414030304020b0a0a320302140303020b080303
0c0402020c0a0a090907081f0e010eb8010db307060504ba02380005ffc0
b35b5d3405b8ffc0401753543405320740077f080108bd7f030103bd0b20
0b0c02b802384012010000405b5d34004053543400321f0c010cb8010db3
0d3175182b10f471ed2b2b103cee103c1a1910fd71fd713c1a1810fd2b2b
ee103c10e471003f3c103c103c3f3c12173987052e2b877dc4872e182b87
7dc42b593130014bb0135358b90008ffe0b10b20383859015d5d5d5d5d5d
71722b2b2b2b002b715d331121010121112111012101119101bb010a0107
01bcfeedfeddfee3fede05bafc1803e8fa460482fb7e0482fb7e>HIBBAA+ARIAL,Bold AddT42Char 
1 3694 51 <00020095000004f805ba000f001b007740250605b914b918034705016705
d605021211250d0e0e001b10250201020f00081627af070107b8ffc0b309
0b3407b8028c40161f1d301d601d701d801d051d100f2001200030000200
b8028bb31c3153182b4e10f45d3c4dfd3c4d1071f62b714ded003f3c3f3c
fd3c12392f3cfd3c3130005d71015d331121201716161514060607062323
1902333236363534262726239501db010e527eaa62974e6ac9c1a2af7643
5e4835a005ba1621ddaf87b8691115fdd704c2fe602e624150680d0a>HIBBAA+ARIAL,Bold AddT42Char 
1 3902 53 <00020096000005bc05ba0015002100f84082390f490f57076a0b6a0caa09
a70ea023b60ed8090a0608060a1708160a360e460e460f0708100911140e
140f1410360e360f470f750e7910d30a0b78097819761d88098819861d06
091614090c0f0e530e750e840e940ea30e050e200d0c140d0d0c0f0c150d
171625131014016014a014021414002021250201020d0e0e1500080eb801
bc4027000d100d020dd41b27a006b006c006d00604068770230120233023
022321152001200030000200b8028bb3223163182b4e10f45d3c4dfd3c10
5d71f65dedf45ded003f3c3c103c3f3cfd3c12392f5d713cfd3c01111239
39872e2b5d0e7d10c4011139001112393130005d01715d5d331121321616
151406071616171321032e0223231111333236363534262726232396026f
ebd580c2c1607d6ab3fe9ed672545e663cdbd56a3c4f4824b4e705ba4fca
82a5d71c3886abfee2013fab5921fd9c034e2458424a5b0c0500>HIBBAA+ARIAL,Bold AddT42Char 
1 4258 56 <00010093ffe7052405ba0019008a40380708070907101708160947084709
07570956109610971198159b16a710b716d715e506f6060b0d0c0c010002
072513090c0b200dcf0e010eb8028b4022401b501b601b03701b801b0220
1b301ba01bc01b041b0102200020193019c0190319b8028bb31a3175182b
4e10f45d3c4dfd3c4d105d7172f65d3c4dfd3c003fed3f3c3c103c313001
5d71132111141716163332363635112111100e0223222626272635930128
0b138f7c7e801a01283081d8aed2d97e141d05bafce6bd385a6d6796ae03
2bfcfefef8da9659619b557ef600>HIBBAA+ARIAL,Bold AddT42Char 
1 4482 59 <000100000000055305ba000b013b40a111041b0a51045a0a04ab05a607ab
09a40bdb01d40706850b980194039a0597079a09940ba801a403091a0115
07280126075901560785038a058a090934013b0702190a20042f0a44044c
0a5b0a84048c0a91049f0aa004d404de0a0d3704380a93049b0ac704c90a
d004070a0209060b070308060b0403080500010209050009080303200209
1402020905060b0b200005140000050605050302020809090b0005b801bc
b70640131534064b09b801bcb3081a0d03ba01bc0002ffc0b5131534024b
0bb801bc400b200030000200190c5e63182b194e10f45d184dedf42bed19
4e10f6184dedf42bed002f3c3c103c3f3c3c103c87052e2b877dc4872e18
2b877dc40f0f0f0fb10602435458b50a2012273404b8ffe0b312273404b8
ffcab70911340a36091134002b2b2b2b593130005d71015d717171007231
010121010121010121010101f5fe3a015a012601200157fe3801f5fe9bfe
bbfeba02fd02bdfe2901d7fd38fd0e01fbfe0500>HIBBAA+ARIAL,Bold AddT42Char 
1 0 0 <00020100000005000500000300070042b40201fe0607b8023f4013000504
fe03000a0704fe010019080605fe0203bc0126000901b0011800182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>HIBBAA+ARIAL,Bold AddT42Char 
HIBBAA+ARIAL,Bold /CharStrings get begin
/slash 18 def
/one 20 def
/six 25 def
/eight 27 def
/A 36 def
/C 38 def
/M 48 def
/P 51 def
/R 53 def
/U 56 def
/X 59 def
end
HIBBAA+ARIAL,Bold /Encoding get
dup 47 /slash put
dup 49 /one put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 85 /U put
dup 88 /X put
pop
end
%ADOEndSubsetFont
/LEHNFX+ARIAL,Bold /HIBBAA+ARIAL,Bold findfont ct_VMDictPut
/LEHNFX+ARIAL,Bold*1 
[47{/.notdef}rp /slash /.notdef /one 4{/.notdef}rp /six /.notdef /eight 
8{/.notdef}rp /A /.notdef /C 9{/.notdef}rp /M 2{/.notdef}rp /P 
/.notdef /R 2{/.notdef}rp /U 2{/.notdef}rp /X 167{/.notdef}rp]
LEHNFX+ARIAL,Bold nf
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
120.78 266.03 mo
(X)sh
127.45 266.03 mo
(8)sh
133.012 266.03 mo
(6)sh
138.57 266.03 mo
(/)sh
141.35 266.03 mo
(A)sh
148.572 266.03 mo
(R)sh
155.793 266.03 mo
(M)sh
129.11 278.782 mo
(C)sh
136.332 278.782 mo
(P)sh
143.002 278.782 mo
(U)sh
150.23 278.782 mo
(1)sh
199.15 297.878 mo
284.189 297.878 li
284.189 99.448 li
199.15 99.448 li
cp
.901642 .903157 .904266 rgb
ef
.72 lw
[5.04 3.6 ] 0 dsh
199.15 297.878 mo
284.189 297.878 li
284.189 99.448 li
199.15 99.448 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
208.31 112.45 mo
(T)sh
214.418 112.45 mo
(h)sh
219.98 112.45 mo
(r)sh
223.31 112.45 mo
(e)sh
228.871 112.45 mo
(a)sh
234.433 112.45 mo
(d)sh
239.995 112.45 mo
( )sh
242.773 112.45 mo
(c)sh
247.773 112.45 mo
(o)sh
253.335 112.45 mo
(n)sh
258.896 112.45 mo
(t)sh
261.675 112.45 mo
(e)sh
267.236 112.45 mo
(x)sh
272.236 112.45 mo
(t)sh
213.32 156.15 mo
270.013 156.15 li
270.013 127.804 li
213.32 127.804 li
cp
1 1 1 rgb
ef
.24 lw
[] 0 dsh
213.32 156.15 mo
270.013 156.15 li
270.013 127.804 li
213.32 127.804 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
230.83 138.97 mo
(S)sh
237.5 138.97 mo
(l)sh
239.722 138.97 mo
(i)sh
241.943 138.97 mo
(c)sh
246.944 138.97 mo
(e)sh
225.27 150.97 mo
(H)sh
232.492 150.97 mo
(e)sh
238.053 150.97 mo
(a)sh
243.615 150.97 mo
(d)sh
249.176 150.97 mo
(e)sh
254.738 150.97 mo
(r)sh
213.32 198.67 mo
270.013 198.67 li
270.013 156.15 li
213.32 156.15 li
cp
gsave
grestore
/228231524.0 
<<
/ID /228231524.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
%N"+IC#H@##,hb`$.SO(4eL)7@+mabI6aK'-ZmM%5*]$@<G=</V.P!RY#B+9$=/P(>I)cCer%FiO^toS
mM>,R?Kkt3=fqFf<T:oEZeY"M$VbsAJ&>\I2s`-.'mIIN0fI71*uf@@A$VIah?,?faQ@O]HtJ!qQ,i&A
=m\tj4-S4]10L`>dq>H)CN`l5/u)d^hIq#$/^FB9^=r,M>CGrnK;YK[5Q~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228231524.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
213.32 198.67 mo
270.013 198.67 li
270.013 156.15 li
213.32 156.15 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
224.44 174.41 mo
(C)sh
231.662 174.41 mo
(A)sh
238.332 174.41 mo
(B)sh
245.002 174.41 mo
(A)sh
251.672 174.41 mo
(C)sh
228.32 186.41 mo
(s)sh
233.32 186.41 mo
(t)sh
236.099 186.41 mo
(a)sh
241.66 186.41 mo
(t)sh
244.439 186.41 mo
(u)sh
250 186.41 mo
(s)sh
213.32 255.36 mo
270.013 255.36 li
270.013 198.667 li
213.32 198.667 li
cp
gsave
grestore
/228231720.0 
<<
/ID /228231720.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
5NbtUjS"!dTMT<$3[F5D!2@nU<4ZX!SPQ1_#ZVe><ioH)<BrBuc$$d-YZ$;fgC9InB<VB:QA]=_JH5~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228231720.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
213.32 255.36 mo
270.013 255.36 li
270.013 198.667 li
213.32 198.667 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
230.83 212.01 mo
(P)sh
237.5 212.01 mo
(i)sh
239.722 212.01 mo
(x)sh
244.722 212.01 mo
(e)sh
250.284 212.01 mo
(l)sh
252.505 212.01 mo
( )sh
218.32 224.01 mo
(r)sh
221.65 224.01 mo
(e)sh
227.212 224.01 mo
(c)sh
232.212 224.01 mo
(o)sh
237.773 224.01 mo
(n)sh
243.335 224.01 mo
(s)sh
248.335 224.01 mo
(t)sh
251.113 224.01 mo
(r)sh
254.443 224.01 mo
(u)sh
260.005 224.01 mo
(c)sh
223.87 236.01 mo
(t)sh
226.648 236.01 mo
(i)sh
228.87 236.01 mo
(o)sh
234.432 236.01 mo
(n)sh
239.993 236.01 mo
( )sh
242.772 236.01 mo
(a)sh
248.333 236.01 mo
(n)sh
253.895 236.01 mo
(d)sh
259.456 236.01 mo
( )sh
225.55 248.01 mo
(f)sh
228.328 248.01 mo
(i)sh
230.55 248.01 mo
(l)sh
232.772 248.01 mo
(t)sh
235.55 248.01 mo
(e)sh
241.112 248.01 mo
(r)sh
244.442 248.01 mo
(i)sh
246.663 248.01 mo
(n)sh
252.225 248.01 mo
(g)sh
213.32 283.705 mo
270.013 283.705 li
270.013 255.359 li
213.32 255.359 li
cp
ef
213.32 283.705 mo
270.013 283.705 li
270.013 255.359 li
213.32 255.359 li
cp
@
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+ARIAL,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+ARIAL,Bold gcheck setglobal} if
1 918 21 <000100330000040c05c0001d013f405fb518b61ab91bca04c718d018d019
d01a08431b431c431d56199b049518aa04a61c08061a20002806371a4804
43184319431a0824182419241a03162604560488189c1b9c1c9c1daa1caa
1d0812001d101d201d311d761d841d901dd61d081db8ffc040161415341d
02100c0f1d10002000022000300040000300b8ffc0b312163400b802a1b3
02010c0fb8015640231f0c2f0c020c401216340ca6130509d81616014f00
01001a1f0fd8107702191ed3c2182b4e10f44df4ed4e10f6713c3c4d10ed
003ffd2b71e43f3cfd2b5d713c1112390111332b5d435c58b9001dffc0b2
11391db8ffc0b20f391db8ffc0400e10390408103905081139040811392b
2b2b2b2b2b59b10602435458400b091b191b021b13010413000011123911
12395d593130015d4b5158bd001bffe0001cffe0001dffe0383838590171
5d5d5d011121361237363736353426232206072536243332161514060706
040607040cfc2710a0ecbe2b3a6559586808fee8190108c6d9f8474d33fe
f647160105fefb940109dbb13f57555e656a7b1ce8caeaae63b36241f450
2600>HIBBAA+ARIAL,Bold AddT42Char 
HIBBAA+ARIAL,Bold /CharStrings get begin
/two 21 def
end
HIBBAA+ARIAL,Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFX+ARIAL,Bold*1 
[47{/.notdef}rp /slash /.notdef /one /two 3{/.notdef}rp /six /.notdef 
/eight 8{/.notdef}rp /A /.notdef /C 9{/.notdef}rp /M 2{/.notdef}rp 
/P /.notdef /R 2{/.notdef}rp /U 2{/.notdef}rp /X 167{/.notdef}rp]
LEHNFX+ARIAL,Bold nf
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
219.99 266.03 mo
(X)sh
226.66 266.03 mo
(8)sh
232.222 266.03 mo
(6)sh
237.79 266.03 mo
(/)sh
240.56 266.03 mo
(A)sh
247.782 266.03 mo
(R)sh
255.003 266.03 mo
(M)sh
228.33 278.782 mo
(C)sh
235.552 278.782 mo
(P)sh
242.222 278.782 mo
(U)sh
249.44 278.782 mo
(2)sh
298.36 297.878 mo
383.399 297.878 li
383.399 99.448 li
298.36 99.448 li
cp
.901642 .903157 .904266 rgb
ef
.72 lw
[5.04 3.6 ] 0 dsh
298.36 297.878 mo
383.399 297.878 li
383.399 99.448 li
298.36 99.448 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
307.53 112.45 mo
(T)sh
313.638 112.45 mo
(h)sh
319.2 112.45 mo
(r)sh
322.53 112.45 mo
(e)sh
328.091 112.45 mo
(a)sh
333.653 112.45 mo
(d)sh
339.215 112.45 mo
( )sh
341.993 112.45 mo
(c)sh
346.993 112.45 mo
(o)sh
352.555 112.45 mo
(n)sh
358.116 112.45 mo
(t)sh
360.895 112.45 mo
(e)sh
366.456 112.45 mo
(x)sh
371.456 112.45 mo
(t)sh
312.53 156.15 mo
369.223 156.15 li
369.223 127.804 li
312.53 127.804 li
cp
1 1 1 rgb
ef
.24 lw
[] 0 dsh
312.53 156.15 mo
369.223 156.15 li
369.223 127.804 li
312.53 127.804 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
330.04 138.97 mo
(S)sh
336.71 138.97 mo
(l)sh
338.932 138.97 mo
(i)sh
341.154 138.97 mo
(c)sh
346.154 138.97 mo
(e)sh
324.48 150.97 mo
(H)sh
331.702 150.97 mo
(e)sh
337.263 150.97 mo
(a)sh
342.825 150.97 mo
(d)sh
348.386 150.97 mo
(e)sh
353.948 150.97 mo
(r)sh
312.53 198.67 mo
369.223 198.67 li
369.223 156.15 li
312.53 156.15 li
cp
gsave
grestore
/228231916.0 
<<
/ID /228231916.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
0qZ6(!R:OgIkP0XWT<o+]RMYKF4pHeOMn!CT?F_:6AnQD5F?R3_tf!kTIt$2#PEq+A6_@#om-\qr4oUB
QhEkSqWD[E/RQ]e-0g2/>#9%&)F`Ut:9lFNGaJ)8n?L!d()C/=qU9[jjfFl>Fl?U)cI40KfCd_bUqL(L
Q^]2$rIMUs[MgOaWVqUbD6[/r9D`q?<'RZ)NXehRVgi]pMJ)Wpn]^05'X-m%j/8]c.3IB*U5f,P]Q^d8
KbO@([.<Uf$6?725lTWs4o?89IJrfl-_K1Pa6T,*';tI$g-@9Zn4k(P1MBLTcI24e43PGsImP`\14MEe
`%La:"Mt$H2N[Oe]FsE"7bSKqoBa+Y0@K>^T@%^n8fuCenJXmATdG7T$cI5n0*IF9+?"n0r<]Y?1bQER
#P=>9&a/dK]LjrKBLa/l.e,&Y/&<-R9<Fm)Imsga`u6T6=oC08P>l_<&P)KMg(>_)KY1'c1@R[Re'htt
T@.KE5Y<QC%"D*R@KH~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228231916.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
312.53 198.67 mo
369.223 198.67 li
369.223 156.15 li
312.53 156.15 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
323.65 174.41 mo
(C)sh
330.872 174.41 mo
(A)sh
337.542 174.41 mo
(B)sh
344.212 174.41 mo
(A)sh
350.882 174.41 mo
(C)sh
327.54 186.41 mo
(s)sh
332.54 186.41 mo
(t)sh
335.319 186.41 mo
(a)sh
340.88 186.41 mo
(t)sh
343.659 186.41 mo
(u)sh
349.22 186.41 mo
(s)sh
312.53 255.36 mo
369.223 255.36 li
369.223 198.667 li
312.53 198.667 li
cp
gsave
grestore
/228232112.0 
<<
/ID /228232112.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
!%1#:Tl_+\!ZEHEak[_l8#0"t;m6]dG>"^**M?5BKjZ\c"6fkP&7>K6SUt4jU'd#jW$,)R1SP%r^H6ZZ
PkJ<EVUmj]>Dc@f]7"=6Zs'SEJ.gcA7\-hMNB@Buma,8g5tT312N!<$295i\!](!LA1k]+h#/G0GQ8<l
-^,r4Y<SbE+78V&+T\leYUigJ2566B02KrLH6(n&GGkKq=<M9C[R/0elEtr_+Xd??C:/hNn:rSWghga%
I@C;uF5HO>Hk:%FL^g(ur`!c2/pE]-FD@(U`G1D=!%uGq16dLQ]\'Z2&rcB?/*d-+W?IqaT9kUciq^J&
WgoUrVRakB-VBTrl9EEFBEA^(9Em6fO?:8][`uX=`A*I+O=!;%BsA%5&aG7'a:\o8+?rVjqP6YNTEn'g
-H'r!SHQPoU6u-]lo2uU$\"Y`Xb)WO8a5"`*QuSbOYE\0\_o?hW\D7G!"c[!2EU1`nMikr+PSfQUkIZV
J,~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228232112.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
312.53 255.36 mo
369.223 255.36 li
369.223 198.667 li
312.53 198.667 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
330.04 212.01 mo
(P)sh
336.71 212.01 mo
(i)sh
338.932 212.01 mo
(x)sh
343.932 212.01 mo
(e)sh
349.494 212.01 mo
(l)sh
351.715 212.01 mo
( )sh
317.54 224.01 mo
(r)sh
320.87 224.01 mo
(e)sh
326.431 224.01 mo
(c)sh
331.432 224.01 mo
(o)sh
336.993 224.01 mo
(n)sh
342.555 224.01 mo
(s)sh
347.555 224.01 mo
(t)sh
350.333 224.01 mo
(r)sh
353.663 224.01 mo
(u)sh
359.225 224.01 mo
(c)sh
323.08 236.01 mo
(t)sh
325.858 236.01 mo
(i)sh
328.08 236.01 mo
(o)sh
333.642 236.01 mo
(n)sh
339.203 236.01 mo
( )sh
341.982 236.01 mo
(a)sh
347.543 236.01 mo
(n)sh
353.105 236.01 mo
(d)sh
358.666 236.01 mo
( )sh
324.76 248.01 mo
(f)sh
327.538 248.01 mo
(i)sh
329.76 248.01 mo
(l)sh
331.982 248.01 mo
(t)sh
334.76 248.01 mo
(e)sh
340.322 248.01 mo
(r)sh
343.652 248.01 mo
(i)sh
345.873 248.01 mo
(n)sh
351.435 248.01 mo
(g)sh
312.53 283.705 mo
369.223 283.705 li
369.223 255.359 li
312.53 255.359 li
cp
ef
312.53 283.705 mo
369.223 283.705 li
369.223 255.359 li
312.53 255.359 li
cp
@
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+ARIAL,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+ARIAL,Bold gcheck setglobal} if
1 1340 22 <0001004dffe7041b05c0002900d940328715c915027b1c8b1c02a603a905
a714b603ba05b614da18dd19081614018d168d1702210a0d000401171316
211f0d100c0ab80124400c4f0d01400d8f0d020d0d0116b80102400f1f13
2f1302134012163413a61b0501b80156b5100420040204b8ffc040321216
3404a6270db00cc00c020c0c1610d87f1f8f1f9f1faf1fbf1f051fe007d8
4f2401241a2b16d8177701d800192ad3c2182b4e10f44dedf4ed4e10f671
4dedf45ded11392f5d003ffd2b71e43ffd2b71e411392f5d71ed01111239
1139001112391112391112395d313001715d5d005d132516163332363534
2623220737163635342623220607253e0233321716151407161615140023
22244d01100d725157777252364b1f7278584948660bfefd1b6dc379cf7d
67d37e97fee6d2c7fefa018521686e84706a7c15e50369574a5864602c85
9f5b846c88c1731bbc85c1fef0e5>HIBBAA+ARIAL,Bold AddT42Char 
HIBBAA+ARIAL,Bold /CharStrings get begin
/three 22 def
end
HIBBAA+ARIAL,Bold /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFX+ARIAL,Bold*1 
[47{/.notdef}rp /slash /.notdef /one /two /three 2{/.notdef}rp /six 
/.notdef /eight 8{/.notdef}rp /A /.notdef /C 9{/.notdef}rp /M 
2{/.notdef}rp /P /.notdef /R 2{/.notdef}rp /U 2{/.notdef}rp /X 
167{/.notdef}rp]
LEHNFX+ARIAL,Bold nf
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
319.2 266.03 mo
(X)sh
325.88 266.03 mo
(8)sh
331.442 266.03 mo
(6)sh
337 266.03 mo
(/)sh
339.78 266.03 mo
(A)sh
347.002 266.03 mo
(R)sh
354.223 266.03 mo
(M)sh
327.54 278.782 mo
(C)sh
334.762 278.782 mo
(P)sh
341.432 278.782 mo
(U)sh
348.65 278.782 mo
(3)sh
.72 297.878 mo
85.759 297.878 li
85.759 99.448 li
.72 99.448 li
cp
.901642 .903157 .904266 rgb
ef
.72 lw
[5.04 3.6 ] 0 dsh
.72 297.878 mo
85.759 297.878 li
85.759 99.448 li
.72 99.448 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
9.8873 112.45 mo
(T)sh
15.9957 112.45 mo
(h)sh
21.5573 112.45 mo
(r)sh
24.8872 112.45 mo
(e)sh
30.4488 112.45 mo
(a)sh
36.0103 112.45 mo
(d)sh
41.5719 112.45 mo
( )sh
44.3503 112.45 mo
(c)sh
49.3505 112.45 mo
(o)sh
54.9121 112.45 mo
(n)sh
60.4736 112.45 mo
(t)sh
63.252 112.45 mo
(e)sh
68.8136 112.45 mo
(x)sh
73.8138 112.45 mo
(t)sh
14.893 156.15 mo
71.586 156.15 li
71.586 127.804 li
14.893 127.804 li
cp
1 1 1 rgb
ef
.24 lw
[] 0 dsh
14.893 156.15 mo
71.586 156.15 li
71.586 127.804 li
14.893 127.804 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
32.402 138.97 mo
(S)sh
39.0721 138.97 mo
(l)sh
41.2938 138.97 mo
(i)sh
43.5155 138.97 mo
(c)sh
48.5157 138.97 mo
(e)sh
26.841 150.97 mo
(H)sh
34.0626 150.97 mo
(e)sh
39.6242 150.97 mo
(a)sh
45.1857 150.97 mo
(d)sh
50.7473 150.97 mo
(e)sh
56.3089 150.97 mo
(r)sh
14.893 198.67 mo
71.586 198.67 li
71.586 156.15 li
14.893 156.15 li
cp
gsave
grestore
/228232308.0 
<<
/ID /228232308.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
!%1^Ud4bV@#.4PC:][(9of';m@IS$Y$U?rY?H2g%nhWP);(0qIJo[7.Vh8_A3iq^_5G6BeZu^L94%ss&
CirB!!RYS^g?AS?oe7cuW)Tpc:uD\cC9<uW(XQjE!FilN5QqQRVR:5"-g?=YIEs0lb2.+^K`s0pS]KV\
!s%6jGgm]8=+L#V.FGL+"TfW>%Fl'*i,@NN2ua,B^uB?Yr,,:`RDe9-H+b786`>feA+EbFTQ5mP-3tAV
5XLKuppCSn^^i"N:^<Y:m_.KUf>HWVH%E\e-`W"#WIj0g#/3_\kj?+E+Ri8kmn;79WJ#p0!iiId_!qha
JP-3^Y?Wo](m(79S\i^[0Q][#g`3%W$=P=c4u!su'!/</5Z:%#"8i-gmlX#V7Z+8[4<5V2'`LU!I#8(9
&VLH.!"oWa"Gm@_N?h#7XGd,[;2g%u_XA<qFis5V!AV[3A=Y,@1B^DAMZl4a*R6-Cq),=R#Q~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228232308.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
14.893 198.67 mo
71.586 198.67 li
71.586 156.15 li
14.893 156.15 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
26.013 174.41 mo
(C)sh
33.2346 174.41 mo
(A)sh
39.9047 174.41 mo
(B)sh
46.5748 174.41 mo
(A)sh
53.2448 174.41 mo
(C)sh
29.899 186.41 mo
(s)sh
34.8992 186.41 mo
(t)sh
37.6776 186.41 mo
(a)sh
43.2392 186.41 mo
(t)sh
46.0176 186.41 mo
(u)sh
51.5791 186.41 mo
(s)sh
14.893 255.36 mo
71.586 255.36 li
71.586 198.667 li
14.893 198.667 li
cp
gsave
grestore
/228232504.0 
<<
/ID /228232504.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 32 ] 
/XStep 32 
/YStep 32 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
32 0 li
32 32 li
0 32 li
cp
false sop
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 355.5 ]ct
[32 0 0 -32 0 355.5 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,itB&/5f]"G?dV&?nDd*"WZL6j*dh!<F!%5i@`;9I^njLd[uBBZ+Wp#DBu<YkXGX.i=5\jRLo&Jm0Ie
!%1^UjS"!dTMT<$3[GQ$8#0$s<4ZWX?j-`7J/'Nu,-6TMemJ)rj`\%9Y1RO`)\m,0?F*f"iE=e;Fpk2&
DH*(#p#6FQ"Vd"2,r4:=#Z#C50EWF(KY^IRG`65n*KS9;>bDj?Z@J_S#k&QUJ3OH=)eQ"#`Nj_,"EFj#
UP)Ruh`qZbF*(eUBX+n<R/t3%!4-JN.LWRXc'9H&9\[uS>K2:CD@@3@ScaBTmK*~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/228232504.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
ef
2 vmreclaim
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
14.893 255.36 mo
71.586 255.36 li
71.586 198.667 li
14.893 198.667 li
cp
false sop
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
32.402 212.01 mo
(P)sh
39.0721 212.01 mo
(i)sh
41.2938 212.01 mo
(x)sh
46.294 212.01 mo
(e)sh
51.8555 212.01 mo
(l)sh
54.0772 212.01 mo
( )sh
19.897 224.01 mo
(r)sh
23.2269 224.01 mo
(e)sh
28.7885 224.01 mo
(c)sh
33.7887 224.01 mo
(o)sh
39.3502 224.01 mo
(n)sh
44.9118 224.01 mo
(s)sh
49.912 224.01 mo
(t)sh
52.6904 224.01 mo
(r)sh
56.0203 224.01 mo
(u)sh
61.5819 224.01 mo
(c)sh
25.446 236.01 mo
(t)sh
28.2244 236.01 mo
(i)sh
30.4461 236.01 mo
(o)sh
36.0077 236.01 mo
(n)sh
41.5692 236.01 mo
( )sh
44.3477 236.01 mo
(a)sh
49.9092 236.01 mo
(n)sh
55.4708 236.01 mo
(d)sh
61.0324 236.01 mo
( )sh
27.121 248.01 mo
(f)sh
29.8994 248.01 mo
(i)sh
32.1211 248.01 mo
(l)sh
34.3428 248.01 mo
(t)sh
37.1212 248.01 mo
(e)sh
42.6828 248.01 mo
(r)sh
46.0127 248.01 mo
(i)sh
48.2344 248.01 mo
(n)sh
53.796 248.01 mo
(g)sh
.72 71.11 mo
383.4 71.11 li
383.4 42.764 li
.72 42.764 li
cp
.969836 .970302 .970644 rgb
ef
.72 71.11 mo
383.4 71.11 li
383.4 42.764 li
.72 42.764 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 8344 78 <00010088000003f805ba000b0261401b060c0d0d0655070656065a09030f
0df305f60603090c1010025506b8fff4b40c0c02550ab8fff4b40c0c0255
09b8fff4b40c0c025503b8ffe840100d0d06555503770a02120620132134
08b8fff0b312273409b8fff0b41227341205b8fff0b312213409b8fff040
84122734060404050406370947040525062d0a580a7703750ada03e30607
a60601230626072508390638093f0d4f0d59045906580759097d04790599
09c606d204d606e406e907f706f90815120a0a0503030402060607090908
0a0a050908082507061407070603040425050a1405050a0a090603040801
02000405060708080b0b000a04b8010f400905040c0c0655052208b8010f
402120073f070207100c0c0655071a900d010d0b2500022501019000013f
004f000200b8fffe40310e0e025500100d0d025500100c0c0255000a0b0b
025500120b0b065500120c0c065500080d0d065500190c0de1214766182b
2b4ef42b2b2b2b2b2b2b5d713c4d10ed10ed4e1071f62b5d4dedf42bed00
3f3c103c103c3f3c3f3c11173987052e2b047d10c487052e182b0e7d10c4
0710083c083c0310083c083cb10602435458400d4b09011f098403020918
0d1134002b5d7159313001435c58400a092c1d3909081d1d3c06b8ffdeb2
1d3906b8ffd4b2203906b8ffd4b121392b2b2b2b2b595d00715d0171002b
2b435c58b90006ffc0b2213903b8ffc0b2163903b8ffdeb2103906b8ffde
b2103903b8ffdeb20c3903b8ffdeb10b392b2b2b2b2b2b59012b2b2b435c
584012dd040108141639090814143c090814143c06b8fff6b2183906b8ff
ecb11b392b2b2b2b2b015d59005d2b2b2b2b2b015d712b33113311013301
012301071188b401aae9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f
7afe5b00>PBAAAA+ARIAL AddT42Char 
1 9260 80 <0001008700000626043e002301c7b9000dfff4b40d0d065508b8fff4b40d
0d065509b8ffd8404d0b0d342504e404e409e117e52005d505f620021708
202309181b20090303231e1c06151c0b0b06070106231a19100ad0250190
25a025022517171a0e2590110111041010025511180f0f025511b8ffec40
0b0e0e025511140c0c025511b8ffe840170b0b025511020b0b0655110c10
10065511060f0f065511b8fffab40c0c065511b8fff8b40d0d065511b801
5d400c1825901b011b180f0f02551bb8ffec400b0e0e02551b140c0c0255
1bb8ffee40110b0b02551b040b0b06551b0a101006551bb8fffe400b0d0d
06551b0c0f0f06551bb8fffcb40c0c06551bb8015d4016000233232501d0
00019000a000021f003f004f000300b8fffe401d0e0e025500100d0d0255
00100c0c0255000c0b0b025500160b0b065500b8fffcb41010065500b8ff
f440140f0f0655000a0c0c0655000e0d0d065500192425b80178b3214750
182b2b4ef42b2b2b2b2b2b2b2b2b5d71723c4dfde410f42b2b2b2b2b2b2b
2b2b5dedf42b2b2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f
3f3c4d10ed10ed11173901111239123931304379400e0c141326140c111b
01120d151b01002b012b2b81015d005d2b2b2b3311331536363332161736
3332161511231134262623220615112311342623220606151187a132a66a
76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258baafb6fd
27029d6c5f3a95a4fd9702b27878509a91fdd900>PBAAAA+ARIAL AddT42Char 
1 10724 83 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/k 78 def
/m 80 def
/p 83 def
end
PBAAAA+ARIAL /Encoding get
dup 107 /k put
dup 109 /m put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /B /C 4{/.notdef}rp /H 
7{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [12.0002 0 0 -12.0002 0 0 ]msf
68.644 60.53 mo
(T)sh
75.9743 60.53 mo
(h)sh
82.6482 60.53 mo
(r)sh
86.6442 60.53 mo
(e)sh
93.3181 60.53 mo
(a)sh
99.992 60.53 mo
(d)sh
106.666 60.53 mo
( )sh
110 60.53 mo
(p)sh
116.674 60.53 mo
(o)sh
123.348 60.53 mo
(o)sh
130.022 60.53 mo
(l)sh
132.688 60.53 mo
( )sh
136.022 60.53 mo
(m)sh
146.018 60.53 mo
(a)sh
152.692 60.53 mo
(n)sh
159.366 60.53 mo
(a)sh
166.04 60.53 mo
(g)sh
172.714 60.53 mo
(e)sh
179.388 60.53 mo
(m)sh
189.384 60.53 mo
(e)sh
196.058 60.53 mo
(n)sh
202.732 60.53 mo
(t)sh
206.066 60.53 mo
( )sh
209.4 60.53 mo
(a)sh
216.074 60.53 mo
(n)sh
222.748 60.53 mo
(d)sh
229.422 60.53 mo
( )sh
232.756 60.53 mo
(t)sh
236.09 60.53 mo
(a)sh
242.764 60.53 mo
(s)sh
248.764 60.53 mo
(k)sh
254.764 60.53 mo
( )sh
258.099 60.53 mo
(s)sh
264.099 60.53 mo
(c)sh
270.099 60.53 mo
(h)sh
276.773 60.53 mo
(e)sh
283.447 60.53 mo
(d)sh
290.121 60.53 mo
(u)sh
296.794 60.53 mo
(l)sh
299.461 60.53 mo
(i)sh
302.127 60.53 mo
(n)sh
308.801 60.53 mo
(g)sh
.72 354.571 mo
383.4 354.571 li
383.4 326.225 li
.72 326.225 li
cp
.969836 .970302 .970644 rgb
ef
.72 354.571 mo
383.4 354.571 li
383.4 326.225 li
.72 326.225 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [12.0002 0 0 -12.0002 0 0 ]msf
123.35 343.998 mo
(T)sh
130.68 343.998 mo
(h)sh
137.354 343.998 mo
(r)sh
141.35 343.998 mo
(e)sh
148.024 343.998 mo
(a)sh
154.698 343.998 mo
(d)sh
161.372 343.998 mo
( )sh
164.706 343.998 mo
(p)sh
171.38 343.998 mo
(o)sh
178.054 343.998 mo
(o)sh
184.728 343.998 mo
(l)sh
187.394 343.998 mo
( )sh
190.728 343.998 mo
(m)sh
200.724 343.998 mo
(a)sh
207.398 343.998 mo
(n)sh
214.072 343.998 mo
(a)sh
220.746 343.998 mo
(g)sh
227.42 343.998 mo
(e)sh
234.094 343.998 mo
(m)sh
244.09 343.998 mo
(e)sh
250.764 343.998 mo
(n)sh
257.438 343.998 mo
(t)sh
14.893 283.705 mo
71.586 283.705 li
71.586 255.359 li
14.893 255.359 li
cp
ef
14.893 283.705 mo
71.586 283.705 li
71.586 255.359 li
14.893 255.359 li
cp
@
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+ARIAL,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+ARIAL,Bold gcheck setglobal} if
1 528 19 <00020056ffe7040e05c0000e00200093404b780a880aa701aa07aa09a70e
b709c8090856115916591a561f67116816681a671f08390239063609360d
490249064509460da709cb02c906c409c40dd902db06d409d40d11101820
180218b8ffc0402512163418a6080d1f0f2f0f020f401216340fa600051d
d84f0401041a2214d80b1921d3c2182b4e10f44ded4e10f6714ded003fed
2b713fed2b713130015d005d5d0132171611100706232200111037361722
060706111016163332363736111026260232d5788f9077d5d6fefa9077d5
3350161d344f333350161d344f05c098b4fe5ffe60b696014901a6019eb6
96e941546dfefefefec14041546c01020102c141>HIBBAA+ARIAL,Bold AddT42Char 
HIBBAA+ARIAL,Bold /CharStrings get begin
/zero 19 def
end
HIBBAA+ARIAL,Bold /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFX+ARIAL,Bold*1 
[47{/.notdef}rp /slash /zero /one /two /three 2{/.notdef}rp /six 
/.notdef /eight 8{/.notdef}rp /A /.notdef /C 9{/.notdef}rp /M 
2{/.notdef}rp /P /.notdef /R 2{/.notdef}rp /U 2{/.notdef}rp /X 
167{/.notdef}rp]
LEHNFX+ARIAL,Bold nf
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
21.567 266.03 mo
(X)sh
28.237 266.03 mo
(8)sh
33.7986 266.03 mo
(6)sh
39.36 266.03 mo
(/)sh
42.139 266.03 mo
(A)sh
49.3606 266.03 mo
(R)sh
56.5822 266.03 mo
(M)sh
29.902 278.782 mo
(C)sh
37.1236 278.782 mo
(P)sh
43.7937 278.782 mo
(U)sh
51.015 278.782 mo
(0)sh
.72 28.59 mo
170.8 28.59 li
170.8 .243988 li
.72 .243988 li
cp
.990187 .990339 .99045 rgb
ef
.72 28.59 mo
170.8 28.59 li
170.8 .243988 li
.72 .243988 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 382 16 <0001004101b8026a026d0003002c401970027003024d014d020201230002
1a05700001001904708d182b4e10e45d10e6002f4ded31300071015d1335
211541022901b8b5b500>PBAAAA+ARIAL AddT42Char 
1 1862 44 <000100bf0000018105ba000300ccb5010200080205b8ffc0b3383d3405b8
ffc0b333343405b8ffc0b32d303405b8ffc0b328293405b8ffc0b3232534
05b8ffc0b31d1e3405b8ffc0b3181a3405b8ffc0402a0d103420059005af
050303200100008f00a000b000042f0040005000df00f000051220008f00
90000305b8ffc0400b0d0d025500181010025500b8ffecb40f0f025500b8
ffeeb40d0d025500b8fff640100c0c025500200b0b065500a204d659182b
10f62b2b2b2b2b2b5d435c58b2800001015d5971723cfd5d2b2b2b2b2b2b
2b2b3c003f3f313033113311bfc205bafa46>PBAAAA+ARIAL AddT42Char 
1 5048 69 <00020086ffe8041f05ba0010001d0180409b01050c0f240535054505053f
1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c1a5d085d
0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e213ec17ec
19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605da1df504
fa100c10150e040602001b1c0607010a151c0e0b1824d00b01100b400b60
0b800b041f400d0d02550b0c0f0f02550b180d0d02550bb8fff6b40c0c02
550bb8fff0b40b0b06550bb8fff4b40f0f06550bb8ffe0b40c0c06550bb8
fff4402f0d0d06550b7401113300040c0c025500040d0d06550033032502
02c001019001a001b001f001041f013f014f010301b8fffeb41010025501
b8fffc401d0e0e0255010c0d0d025501100c0c025501120b0b0255010c0b
0b065501b8fff8b41010065501b8fffc40160f0f065501180c0c06550114
0d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b2b2b5d71723c4d10
fdf42b2be410fd2b2b2b2b2b2b2b2b5d71ed003fed3f3fed3f1139111239
3130005d015d7172007121231133113633321e0215100023222703141716
333236353426232206012da7b472b162af7140fef2bdbc6b0234559176ac
a57576ac05bafdf58f4f8fca73feeffed69d0196bf558bcdcbd0c6cd>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/hyphen 16 def
/I 44 def
/b 69 def
end
PBAAAA+ARIAL /Encoding get
dup 45 /hyphen put
dup 73 /I put
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 19{/.notdef}rp /A /B /C 
4{/.notdef}rp /H /I 6{/.notdef}rp /P 2{/.notdef}rp /S /T 
12{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 2{/.notdef}rp /x 
135{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [12.0002 0 0 -12.0002 0 0 ]msf
26.06 18.01 mo
(I)sh
29.3941 18.01 mo
(n)sh
36.068 18.01 mo
(p)sh
42.7419 18.01 mo
(u)sh
49.4158 18.01 mo
(t)sh
52.7499 18.01 mo
( )sh
56.084 18.01 mo
(c)sh
62.0842 18.01 mo
(o)sh
68.7581 18.01 mo
(d)sh
75.432 18.01 mo
(e)sh
82.1059 18.01 mo
(d)sh
88.7798 18.01 mo
( )sh
92.1139 18.01 mo
(b)sh
98.7878 18.01 mo
(i)sh
101.454 18.01 mo
(t)sh
104.79 18.01 mo
(-)sh
108.78 18.01 mo
(s)sh
114.78 18.01 mo
(t)sh
118.114 18.01 mo
(r)sh
122.11 18.01 mo
(e)sh
128.784 18.01 mo
(a)sh
135.458 18.01 mo
(m)sh
199.15 28.59 mo
383.4 28.59 li
383.4 .243988 li
199.15 .243988 li
cp
.990187 .990339 .99045 rgb
ef
199.15 28.59 mo
383.4 28.59 li
383.4 .243988 li
199.15 .243988 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 2900 50 <00020063ffe705dd05d4000e001b00ca40501a0f01141014141b171b1b04
041004140b170b1b04a917b60ec60e031717181b02201d40114f134f1740
1a58055809571055115f135a175f18561a571b8b17990210191e0303121e
0b09152620070107b8ffe8b41010025507b8ffeeb40d0d025507b8fff0b4
0c0c025507b8ffeab40b0b065507b8fff4b40d0d065507b8fffa40210c0c
0655071a801d011d0f2620000100060b0b065500060c0c065500191c635c
182b4e10f42b2b5d4ded4e105df62b2b2b2b2b2b5d4ded003fed3fed3130
015d71005d5d5d7113100021320412151402042322240237100033320011
3402262322006301880136cb0146abb4feb6bfcffebaa8c8011dd7db011b
79e991cefed702ca016d019dc2fea5dcdffea0b5c8015abefef7fecf0134
011bb3010b93fee5>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/O 50 def
end
PBAAAA+ARIAL /Encoding get
dup 79 /O put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 19{/.notdef}rp /A /B /C 
4{/.notdef}rp /H /I 5{/.notdef}rp /O /P 2{/.notdef}rp /S 
/T 12{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u 2{/.notdef}rp 
/x 135{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [12.0002 0 0 -12.0002 0 0 ]msf
214.56 18.01 mo
(O)sh
223.894 18.01 mo
(u)sh
230.568 18.01 mo
(t)sh
233.902 18.01 mo
(p)sh
240.576 18.01 mo
(u)sh
247.25 18.01 mo
(t)sh
250.584 18.01 mo
( )sh
253.918 18.01 mo
(d)sh
260.592 18.01 mo
(e)sh
267.266 18.01 mo
(c)sh
273.266 18.01 mo
(o)sh
279.94 18.01 mo
(d)sh
286.614 18.01 mo
(e)sh
293.288 18.01 mo
(d)sh
299.962 18.01 mo
( )sh
303.296 18.01 mo
(f)sh
306.63 18.01 mo
(r)sh
310.626 18.01 mo
(a)sh
317.3 18.01 mo
(m)sh
327.296 18.01 mo
(e)sh
333.97 18.01 mo
( )sh
337.304 18.01 mo
(p)sh
343.978 18.01 mo
(i)sh
346.644 18.01 mo
(x)sh
352.644 18.01 mo
(e)sh
359.318 18.01 mo
(l)sh
361.984 18.01 mo
(s)sh
.23998 lw
85.759 28.59 mo
85.759 37.93 li
@
88.519 37.24 mo
85.759 42.76 li
82.999 37.24 li
88.519 37.24 li
cp
ef
291.27 33.42 mo
291.27 42.76 li
298.36 42.76 li
@
288.51 34.11 mo
291.27 28.59 li
294.03 34.11 li
288.51 34.11 li
cp
ef
71.586 177.41 mo
80.587 161.81 li
80.587 172.1 li
105.1 172.1 li
105.1 161.81 li
114.11 177.41 li
105.1 193 li
105.1 182.71 li
80.587 182.71 li
80.587 193 li
71.586 177.41 li
cp
.490856 .489376 .490488 rgb
ef
1.2 lw
71.586 177.41 mo
80.587 161.81 li
80.587 172.1 li
105.1 172.1 li
105.1 161.81 li
114.11 177.41 li
105.1 193 li
105.1 182.71 li
80.587 182.71 li
80.587 193 li
71.586 177.41 li
cp
.137531 .0973373 .0856268 rgb
@
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+ARIAL,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+ARIAL,Bold gcheck setglobal} if
1 4862 70 <00010055ffe8043f043e001900e14051580f59125916680f691269167d18
79199702970cc610c618d710d618e906e908e913e915f80613381338154a
124a164618590c690c073a1237163718037705770f8705860f8919a812a7
16b912b616090eb8ffc0b3181b340eb8ffc0b51214340e330db8ffc0b319
1e340db8ffc0b30f11340dba0104000a02744012110b0040181b34004012
1434003390010101ba0101000402744020170701401214340121002f0d40
1214340d214f0e010e1a1b072114191a5841182b4e10f44ded4e10f65d4d
ed2bf4ed2b003ffdf45de42b2b3ffdf42b2be42b2b3130005d7101715d01
052626232206151416333236370506062322001110003332160431feeb0e
634f697d7f6b50661501142bf4cde9feeb0116edc2e502ec32535491aabd
9c5b6f2fbec20126010401070125a700>HIBBAA+ARIAL,Bold AddT42Char 
1 5418 81 <0001009100000459043e0016009f4018071317135a08680804b804013408
34104408440fe9100506b80274401d11070e0d060c0b0b01000a02012616
0040202434af0001ff0001001a18b8ffc040162224349018a018027018f0
1802ef1801180a0b260c0eb80129b20d0d0cb8ffc0400f202434a00c01f0
0c010c19173f3c182b4e10f471722b3c4d10ed10fd3c4e105d71722bf671
722b3c4dfd3c003f3c3c103c3f3c3fed3130005d01715d21211134262623
2206061511211121153633321e02150459fee724513949742bfee701058b
d35d9a4f1f021eac65385084b2fe1f04269cb44368847b00>HIBBAA+ARIAL,Bold AddT42Char 
1 5880 86 <00010030ffe80410043e002a02c240c00611062308271711172398129814
9727952a09071446140212bb0db90ec721e523f80df62206290d550d650d
950b9712a722b90c07412340244426672264268712871486228324093726
4506460b4a0d4f0f462142220722242726370c352135223523352407060a
05110921180d270c22222223072422402c730c781479157629752a881584
2a9a15952ab422b4230d80018f178c18992aa92ab02c0617211640212334
16401c1f341f1601df16011633082150258f25022540181d34251a2cb8ff
c04017110a3f502c01302c012f2c012c1e213010011033012100b8ffc0b3
0f093f00b8ffc0b3110a3f00b8ffc04009090d3400192b78b8182b4e10fc
2b2b2b4dedf471ed4e105d71722bf62b714dedf471722b2bed00b1060243
54584035060101060116012622362146215401591764016917f6010a0117
02041a21220228130d0c02281a5f04010446280b501a011a4613073ffd5d
3ffd5d1112173911121739111217395d711bb90022ffcbb3282a3421b8ff
cbb3282a3422b8ffe0b31e243421b8ffe0b31f243422b8ffe0b3191a3421
b8ffe0401b191a346b0d0136224622980d9422c422d4220621220c0d0404
1a00b8ffc0b5191b34003301b8ffc0b3172d3f01b8ffb0b3090a3e01b8ff
c0b322253401b8ffc0401d1a1c3400013001400150010460018001f00103
00011001500160010401b8ffc0b313163401b80101404d0004015f04f004
020446280b1640191b3416331740172d3f1740090a3e174035373417402b
2e34174025293417401a1c340f171f175f176f170417551a402224340f1a
01501aff1a021a4613073ffd5d712bf45d2b2b2b2b2b2be42b3ffd5d71f4
2b5d71722b2b2b2be42b111217395d712b2b2b2b2b2b59313001715d0071
7171715d5d435c58b90024ffc940090b123f0f280b123f21b8ffecb60d39
0c140c3921b8ffecb20c3922b8ffeab10b39002b2b2b2b012b2b5900715d
132516163332373635342726272427263534363332161705262623220706
1514171604171615140623222630011a126e636d3725141549feac5b7eda
e5dad428fef7115f586f30201c2601c15958f4efd9fd012f2b5255281c2f
201514114b3e56998abc8e8b313e421f16231e151c664a4b8692d2b0>HIBBAA+ARIAL,Bold AddT42Char 
1 6718 92 <0001000efe510452042600130134b41228050113b8ffe040180c0f340816
0d0f3407160d0f3406160d0f3405160c0f3402b8ffc0401f1a3a34050606
040d0b0e061002001306041302040303010100061360100110b801af4012
0b0f0d2f0e280020153015601503f0150115b8ffc0b322263415b8ffc040
121c1e341517171a043903401819347f030103b80127400902401819347f
020102b801274012013900401c36342000300002001914c4a0182b4e10f4
5d2b4dfd19f45d2bf45d2b18fd4e456544e62b2b71724d10f4e4003fed5d
2f3f3c103c103c0112391139001112391239391139070e103c3130002b01
2b2b2b2b2b5d4bb010534bb03a515a58b2041000bafff00001fff0b10310
013838383859435c58b90005ffe8400e0d113f131013193f131012183f05
b8fff0b313193f05b8fff0b212183f012b2b2b2b2b59132113132101070e
032322272716333236370e012bfef80123fe89432543577f50514e194235
625e190426fd0e02f2fc02b95d623d2211dc0d735900>HIBBAA+ARIAL,Bold AddT42Char 
HIBBAA+ARIAL,Bold /CharStrings get begin
/c 70 def
/n 81 def
/s 86 def
/y 92 def
end
HIBBAA+ARIAL,Bold /Encoding get
dup 99 /c put
dup 110 /n put
dup 115 /s put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFX+ARIAL,Bold*1 
[47{/.notdef}rp /slash /zero /one /two /three 2{/.notdef}rp /six 
/.notdef /eight 8{/.notdef}rp /A /.notdef /C 9{/.notdef}rp /M 
2{/.notdef}rp /P /.notdef /R 2{/.notdef}rp /U 2{/.notdef}rp /X 
10{/.notdef}rp /c 10{/.notdef}rp /n 4{/.notdef}rp /s 5{/.notdef}rp /y 
134{/.notdef}rp]
LEHNFX+ARIAL,Bold nf
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
81.449 180.41 mo
(s)sh
87.0106 180.41 mo
(y)sh
92.5721 180.41 mo
(n)sh
98.6805 180.41 mo
(c)sh
71.586 141.97 mo
79.769 127.8 li
79.769 137.15 li
105.92 137.15 li
105.92 127.8 li
114.11 141.97 li
105.92 156.15 li
105.92 146.79 li
79.769 146.79 li
79.769 156.15 li
71.586 141.97 li
cp
ef
.24 lw
71.586 141.97 mo
79.769 127.8 li
79.769 137.15 li
105.92 137.15 li
105.92 127.8 li
114.11 141.97 li
105.92 156.15 li
105.92 146.79 li
79.769 146.79 li
79.769 156.15 li
71.586 141.97 li
cp
.137531 .0973373 .0856268 rgb
@
%ADOBeginSubsetFont: PBAAAA+ARIAL AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ARIAL gcheck setglobal} if
1 13628 92 <00010021fe5103ee0426001a01f7b10202435458401d0a140f030b031c19
0f12060b061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a
1910dd1a18cd003f3f3fed12173931301bb30f1c010fb8ffde406d1c3928
14560faf0a03400d400f020f202830341020283034070c0912160d181227
0b270c270d360c360d350e99110b28122813481659125913591569126913
69157906760d79117a147a15850d8a118c128c138914980aa80bbc10bb11
ba14ea0ae714f50dfd10f914ff1c1e12b106024354584016130b1c1b040f
440f840f030f190b031c190f12060b06003f3f3fed1112395d0111123939
1b40370f0f0c101112120a00031914131325120a1412120a0f0c0f110c25
0b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021cb802
3fb50f1340124014b80254400b3f124012025f12bf120212b80142b60f01
2200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020cb801
42b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a1910
ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c103c
87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c44bb0
0e534bb018515a58bb000cffe8000bffe80138385959313001435c58b900
14ffdeb637390a2237390eb8ffe8b51539112215392b2b2b2b595d712b2b
00715d2b015d591327163332363736373637013313161736371333010607
060623227f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c412430
7c5634fe67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300
>PBAAAA+ARIAL AddT42Char 
PBAAAA+ARIAL /CharStrings get begin
/y 92 def
end
PBAAAA+ARIAL /Encoding get
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEHNFW+ARIAL*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 19{/.notdef}rp /A /B /C 
4{/.notdef}rp /H /I 5{/.notdef}rp /O /P 2{/.notdef}rp /S 
/T 12{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u 2{/.notdef}rp 
/x /y 134{/.notdef}rp]
LEHNFW+ARIAL nf
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
82.284 144.97 mo
(c)sh
87.2842 144.97 mo
(o)sh
92.8457 144.97 mo
(p)sh
98.4073 144.97 mo
(y)sh
.23998 lw
43.24 75.94 mo
43.24 94.62 li
@
40.48 76.63 mo
43.24 71.11 li
46 76.63 li
40.48 76.63 li
cp
ef
46 93.93 mo
43.24 99.45 li
40.48 93.93 li
46 93.93 li
cp
ef
142.45 75.94 mo
142.45 94.62 li
@
139.69 76.63 mo
142.45 71.11 li
145.21 76.63 li
139.69 76.63 li
cp
ef
145.21 93.93 mo
142.45 99.45 li
139.69 93.93 li
145.21 93.93 li
cp
ef
241.66 75.94 mo
241.66 94.62 li
@
238.9 76.63 mo
241.66 71.11 li
244.42 76.63 li
238.9 76.63 li
cp
ef
244.42 93.93 mo
241.66 99.45 li
238.9 93.93 li
244.42 93.93 li
cp
ef
340.88 75.94 mo
340.88 94.62 li
@
338.12 76.63 mo
340.88 71.11 li
343.64 76.63 li
338.12 76.63 li
cp
ef
343.64 93.93 mo
340.88 99.45 li
338.12 93.93 li
343.64 93.93 li
cp
ef
43.24 302.708 mo
43.24 321.394 li
@
40.48 303.398 mo
43.24 297.878 li
46 303.398 li
40.48 303.398 li
cp
ef
46 320.704 mo
43.24 326.224 li
40.48 320.704 li
46 320.704 li
cp
ef
142.45 302.708 mo
142.45 321.394 li
@
139.69 303.398 mo
142.45 297.878 li
145.21 303.398 li
139.69 303.398 li
cp
ef
145.21 320.704 mo
142.45 326.224 li
139.69 320.704 li
145.21 320.704 li
cp
ef
241.66 302.708 mo
241.66 321.394 li
@
238.9 303.398 mo
241.66 297.878 li
244.42 303.398 li
238.9 303.398 li
cp
ef
244.42 320.704 mo
241.66 326.224 li
238.9 320.704 li
244.42 320.704 li
cp
ef
340.88 302.708 mo
340.88 321.394 li
@
338.12 303.398 mo
340.88 297.878 li
343.64 303.398 li
338.12 303.398 li
cp
ef
343.64 320.704 mo
340.88 326.224 li
338.12 320.704 li
343.64 320.704 li
cp
ef
170.8 141.97 mo
178.98 127.8 li
178.98 137.15 li
205.14 137.15 li
205.14 127.8 li
213.32 141.97 li
205.14 156.15 li
205.14 146.79 li
178.98 146.79 li
178.98 156.15 li
170.8 141.97 li
cp
1 1 1 rgb
ef
.24 lw
170.8 141.97 mo
178.98 127.8 li
178.98 137.15 li
205.14 137.15 li
205.14 127.8 li
213.32 141.97 li
205.14 156.15 li
205.14 146.79 li
178.98 146.79 li
178.98 156.15 li
170.8 141.97 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
181.5 144.97 mo
(c)sh
186.5 144.97 mo
(o)sh
192.062 144.97 mo
(p)sh
197.623 144.97 mo
(y)sh
270.01 141.97 mo
278.19 127.8 li
278.19 137.15 li
304.35 137.15 li
304.35 127.8 li
312.53 141.97 li
304.35 156.15 li
304.35 146.79 li
278.19 146.79 li
278.19 156.15 li
270.01 141.97 li
cp
1 1 1 rgb
ef
270.01 141.97 mo
278.19 127.8 li
278.19 137.15 li
304.35 137.15 li
304.35 127.8 li
312.53 141.97 li
304.35 156.15 li
304.35 146.79 li
278.19 146.79 li
278.19 156.15 li
270.01 141.97 li
cp
.137531 .0973373 .0856268 rgb
@
LEHNFW+ARIAL*1 [10.0001 0 0 -10.0001 0 0 ]msf
280.71 144.97 mo
(c)sh
285.71 144.97 mo
(o)sh
291.272 144.97 mo
(p)sh
296.833 144.97 mo
(y)sh
170.8 177.41 mo
179.8 161.81 li
179.8 172.1 li
204.32 172.1 li
204.32 161.81 li
213.32 177.41 li
204.32 193 li
204.32 182.71 li
179.8 182.71 li
179.8 193 li
170.8 177.41 li
cp
.490856 .489376 .490488 rgb
ef
1.2 lw
170.8 177.41 mo
179.8 161.81 li
179.8 172.1 li
204.32 172.1 li
204.32 161.81 li
213.32 177.41 li
204.32 193 li
204.32 182.71 li
179.8 182.71 li
179.8 193 li
170.8 177.41 li
cp
.137531 .0973373 .0856268 rgb
@
1 1 1 rgb
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
180.66 180.41 mo
(s)sh
186.222 180.41 mo
(y)sh
191.783 180.41 mo
(n)sh
197.892 180.41 mo
(c)sh
270.01 177.41 mo
279.01 161.81 li
279.01 172.1 li
303.53 172.1 li
303.53 161.81 li
312.53 177.41 li
303.53 193 li
303.53 182.71 li
279.01 182.71 li
279.01 193 li
270.01 177.41 li
cp
.490856 .489376 .490488 rgb
ef
270.01 177.41 mo
279.01 161.81 li
279.01 172.1 li
303.53 172.1 li
303.53 161.81 li
312.53 177.41 li
303.53 193 li
303.53 182.71 li
279.01 182.71 li
279.01 193 li
270.01 177.41 li
cp
.137531 .0973373 .0856268 rgb
@
1 1 1 rgb
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
279.87 180.41 mo
(s)sh
285.432 180.41 mo
(y)sh
290.993 180.41 mo
(n)sh
297.102 180.41 mo
(c)sh
270.01 227.01 mo
279.01 211.42 li
279.01 221.71 li
303.53 221.71 li
303.53 211.42 li
312.53 227.01 li
303.53 242.6 li
303.53 232.31 li
279.01 232.31 li
279.01 242.6 li
270.01 227.01 li
cp
.490856 .489376 .490488 rgb
ef
270.01 227.01 mo
279.01 211.42 li
279.01 221.71 li
303.53 221.71 li
303.53 211.42 li
312.53 227.01 li
303.53 242.6 li
303.53 232.31 li
279.01 232.31 li
279.01 242.6 li
270.01 227.01 li
cp
.137531 .0973373 .0856268 rgb
@
1 1 1 rgb
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
279.87 230.01 mo
(s)sh
285.432 230.01 mo
(y)sh
290.993 230.01 mo
(n)sh
297.102 230.01 mo
(c)sh
170.8 227.01 mo
179.8 211.42 li
179.8 221.71 li
204.32 221.71 li
204.32 211.42 li
213.32 227.01 li
204.32 242.6 li
204.32 232.31 li
179.8 232.31 li
179.8 242.6 li
170.8 227.01 li
cp
.490856 .489376 .490488 rgb
ef
170.8 227.01 mo
179.8 211.42 li
179.8 221.71 li
204.32 221.71 li
204.32 211.42 li
213.32 227.01 li
204.32 242.6 li
204.32 232.31 li
179.8 232.31 li
179.8 242.6 li
170.8 227.01 li
cp
.137531 .0973373 .0856268 rgb
@
1 1 1 rgb
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
180.66 230.01 mo
(s)sh
186.222 230.01 mo
(y)sh
191.783 230.01 mo
(n)sh
197.892 230.01 mo
(c)sh
71.586 227.01 mo
80.587 211.42 li
80.587 221.71 li
105.1 221.71 li
105.1 211.42 li
114.11 227.01 li
105.1 242.6 li
105.1 232.31 li
80.587 232.31 li
80.587 242.6 li
71.586 227.01 li
cp
.490856 .489376 .490488 rgb
ef
71.586 227.01 mo
80.587 211.42 li
80.587 221.71 li
105.1 221.71 li
105.1 211.42 li
114.11 227.01 li
105.1 242.6 li
105.1 232.31 li
80.587 232.31 li
80.587 242.6 li
71.586 227.01 li
cp
.137531 .0973373 .0856268 rgb
@
1 1 1 rgb
LEHNFX+ARIAL,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
81.449 230.01 mo
(s)sh
87.0106 230.01 mo
(y)sh
92.5721 230.01 mo
(n)sh
98.6805 230.01 mo
(c)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Pattern [/228399548.0 /228399744.0 /228231524.0 /228231720.0 /228231916.0 
/228232112.0 /228232308.0 /228232504.0 ]]
] del_res
/LEHNFW+ARIAL*1 uf
/LEHNFW+ARIAL uf
/PBAAAA+ARIAL uf
/LEHNFX+ARIAL,Bold*1 uf
/LEHNFX+ARIAL,Bold uf
/HIBBAA+ARIAL,Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
